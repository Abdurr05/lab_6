
c:/Users/Abdurrahman/Documents/labs/lab_6/target/3.0.0/argon/lab_6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003eb0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d7ed0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  2003e55c  000d7ed4  0001e55c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000022c  2003e5c4  2003e5c4  0002e5c4  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d7f3c  000d7f3c  00027f3c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d7f64  000d7f64  00027f64  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001c491b  00000000  00000000  00027f68  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000198dd  00000000  00000000  001ec883  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0003aa77  00000000  00000000  00206160  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002c38  00000000  00000000  00240bd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00009160  00000000  00000000  0024380f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003e2dc  00000000  00000000  0024c96f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00045b89  00000000  00000000  0028ac4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00127a1b  00000000  00000000  002d07d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000080e0  00000000  00000000  003f81f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f003 f87f 	bl	d7134 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f003 f887 	bl	d7150 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e55c 	.word	0x2003e55c
   d404c:	000d7ed4 	.word	0x000d7ed4
   d4050:	2003e5c4 	.word	0x2003e5c4
   d4054:	2003e5c4 	.word	0x2003e5c4
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f001 ffdb 	bl	d601c <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000d7ea4 	.word	0x000d7ea4
   d4080:	000d7ec8 	.word	0x000d7ec8

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b826 	b.w	d40d4 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f831 	bl	d40f0 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f001 bf85 	b.w	d5fa0 <_post_loop>

000d4096 <_Znaj>:
   d4096:	f001 bc79 	b.w	d598c <malloc>

000d409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409a:	f001 bc7f 	b.w	d599c <free>
	...

000d40a0 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a2:	4a03      	ldr	r2, [pc, #12]	; (d40b0 <__cxa_pure_virtual+0x10>)
   d40a4:	2100      	movs	r1, #0
   d40a6:	200c      	movs	r0, #12
   d40a8:	f001 fbd4 	bl	d5854 <panic_>
  while (1);
   d40ac:	e7fe      	b.n	d40ac <__cxa_pure_virtual+0xc>
   d40ae:	bf00      	nop
   d40b0:	000d55d5 	.word	0x000d55d5

000d40b4 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b4:	7800      	ldrb	r0, [r0, #0]
   d40b6:	fab0 f080 	clz	r0, r0
   d40ba:	0940      	lsrs	r0, r0, #5
   d40bc:	4770      	bx	lr

000d40be <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40be:	2301      	movs	r3, #1
   d40c0:	7003      	strb	r3, [r0, #0]
   d40c2:	4770      	bx	lr

000d40c4 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40c4:	b510      	push	{r4, lr}
   d40c6:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d40c8:	6800      	ldr	r0, [r0, #0]
   d40ca:	b108      	cbz	r0, d40d0 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d40cc:	f001 fc66 	bl	d599c <free>
class SystemClass {
   d40d0:	4620      	mov	r0, r4
   d40d2:	bd10      	pop	{r4, pc}

000d40d4 <setup>:
SYSTEM_MODE(MANUAL);
SYSTEM_THREAD(ENABLED);

OledWingAdafruit display;
// setup() runs once, when the device is first turned on.
void setup() {
   d40d4:	b508      	push	{r3, lr}
  // Put initialization like pinMode and begin functions here.
  display.setup();
   d40d6:	4805      	ldr	r0, [pc, #20]	; (d40ec <setup+0x18>)
   d40d8:	f000 fd10 	bl	d4afc <_ZN16OledWingAdafruit5setupEv>
	display.clearDisplay();
   d40dc:	4803      	ldr	r0, [pc, #12]	; (d40ec <setup+0x18>)
   d40de:	f000 ff2b 	bl	d4f38 <_ZN16Adafruit_SSD130612clearDisplayEv>
	display.display();
}
   d40e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	display.display();
   d40e6:	4801      	ldr	r0, [pc, #4]	; (d40ec <setup+0x18>)
   d40e8:	f001 b992 	b.w	d5410 <_ZN16Adafruit_SSD13067displayEv>
   d40ec:	2003e5d4 	.word	0x2003e5d4

000d40f0 <loop>:

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d40f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  display.loop();
   d40f2:	4c31      	ldr	r4, [pc, #196]	; (d41b8 <loop+0xc8>)
   d40f4:	4620      	mov	r0, r4
   d40f6:	f000 fd2a 	bl	d4b4e <_ZN16OledWingAdafruit4loopEv>
  //The formula to get the temperature in celsius from the TMP36
  uint64_t reading = analogRead(A5);
   d40fa:	200e      	movs	r0, #14
   d40fc:	f002 faf7 	bl	d66ee <analogRead>
   d4100:	4605      	mov	r5, r0
  double voltage = (reading * 3.3) / 4095.0;
  double temperature = (voltage - 0.5) * 100;
  double fahrenheit = temperature * 1.8 + 32;
  // to display the temperature
  if (display.pressedA()) {
   d4102:	4620      	mov	r0, r4
   d4104:	f000 fd3c 	bl	d4b80 <_ZN16OledWingAdafruit8pressedAEv>
   d4108:	2800      	cmp	r0, #0
   d410a:	d047      	beq.n	d419c <loop+0xac>
  double voltage = (reading * 3.3) / 4095.0;
   d410c:	4628      	mov	r0, r5
   d410e:	17e9      	asrs	r1, r5, #31
   d4110:	f002 fcd4 	bl	d6abc <__aeabi_ul2d>
   d4114:	a322      	add	r3, pc, #136	; (adr r3, d41a0 <loop+0xb0>)
   d4116:	e9d3 2300 	ldrd	r2, r3, [r3]
   d411a:	f002 fd05 	bl	d6b28 <__aeabi_dmul>
   d411e:	a322      	add	r3, pc, #136	; (adr r3, d41a8 <loop+0xb8>)
   d4120:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4124:	f002 fe2a 	bl	d6d7c <__aeabi_ddiv>
  double temperature = (voltage - 0.5) * 100;
   d4128:	4b24      	ldr	r3, [pc, #144]	; (d41bc <loop+0xcc>)
   d412a:	2200      	movs	r2, #0
   d412c:	f002 fb44 	bl	d67b8 <__aeabi_dsub>
   d4130:	4b23      	ldr	r3, [pc, #140]	; (d41c0 <loop+0xd0>)
   d4132:	2200      	movs	r2, #0
   d4134:	f002 fcf8 	bl	d6b28 <__aeabi_dmul>
   d4138:	4606      	mov	r6, r0
    display.clearDisplay();
   d413a:	4620      	mov	r0, r4
  double temperature = (voltage - 0.5) * 100;
   d413c:	460f      	mov	r7, r1
    display.clearDisplay();
   d413e:	f000 fefb 	bl	d4f38 <_ZN16Adafruit_SSD130612clearDisplayEv>
		display.setTextSize(1);
   d4142:	4620      	mov	r0, r4
   d4144:	2101      	movs	r1, #1
   d4146:	f000 fc8a 	bl	d4a5e <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   d414a:	2200      	movs	r2, #0
   d414c:	f04f 1301 	mov.w	r3, #65537	; 0x10001
		display.setTextColor(WHITE);
		display.setCursor(0,0);
    display.println("celsius:");
   d4150:	491c      	ldr	r1, [pc, #112]	; (d41c4 <loop+0xd4>)
   d4152:	4620      	mov	r0, r4
   d4154:	e9c4 2304 	strd	r2, r3, [r4, #16]
   d4158:	f001 fda3 	bl	d5ca2 <_ZN5Print7printlnEPKc>
		display.println(temperature);
   d415c:	ec47 6b10 	vmov	d0, r6, r7
   d4160:	2102      	movs	r1, #2
   d4162:	4620      	mov	r0, r4
   d4164:	f001 fe8e 	bl	d5e84 <_ZN5Print7printlnEdi>
    display.println("fahrenheit:");
   d4168:	4917      	ldr	r1, [pc, #92]	; (d41c8 <loop+0xd8>)
   d416a:	4620      	mov	r0, r4
   d416c:	f001 fd99 	bl	d5ca2 <_ZN5Print7printlnEPKc>
  double fahrenheit = temperature * 1.8 + 32;
   d4170:	a30f      	add	r3, pc, #60	; (adr r3, d41b0 <loop+0xc0>)
   d4172:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4176:	4630      	mov	r0, r6
   d4178:	4639      	mov	r1, r7
   d417a:	f002 fcd5 	bl	d6b28 <__aeabi_dmul>
   d417e:	4b13      	ldr	r3, [pc, #76]	; (d41cc <loop+0xdc>)
   d4180:	2200      	movs	r2, #0
   d4182:	f002 fb1b 	bl	d67bc <__adddf3>
   d4186:	ec41 0b10 	vmov	d0, r0, r1
		display.println(fahrenheit);
   d418a:	4620      	mov	r0, r4
   d418c:	2102      	movs	r1, #2
   d418e:	f001 fe79 	bl	d5e84 <_ZN5Print7printlnEdi>
		display.display();
   d4192:	4620      	mov	r0, r4
  }
  // The core of your code will likely live here.

   d4194:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		display.display();
   d4198:	f001 b93a 	b.w	d5410 <_ZN16Adafruit_SSD13067displayEv>
   d419c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d419e:	bf00      	nop
   d41a0:	66666666 	.word	0x66666666
   d41a4:	400a6666 	.word	0x400a6666
   d41a8:	00000000 	.word	0x00000000
   d41ac:	40affe00 	.word	0x40affe00
   d41b0:	cccccccd 	.word	0xcccccccd
   d41b4:	3ffccccc 	.word	0x3ffccccc
   d41b8:	2003e5d4 	.word	0x2003e5d4
   d41bc:	3fe00000 	.word	0x3fe00000
   d41c0:	40590000 	.word	0x40590000
   d41c4:	000d71cc 	.word	0x000d71cc
   d41c8:	000d71d5 	.word	0x000d71d5
   d41cc:	40400000 	.word	0x40400000

000d41d0 <_GLOBAL__sub_I_SystemMode>:
   d41d0:	b538      	push	{r3, r4, r5, lr}
              error_(SYSTEM_ERROR_NONE) {
   d41d2:	4c0f      	ldr	r4, [pc, #60]	; (d4210 <_GLOBAL__sub_I_SystemMode+0x40>)
    SleepResult() {}
   d41d4:	4b0f      	ldr	r3, [pc, #60]	; (d4214 <_GLOBAL__sub_I_SystemMode+0x44>)
   d41d6:	60a3      	str	r3, [r4, #8]
              error_(SYSTEM_ERROR_NONE) {
   d41d8:	2500      	movs	r5, #0
   d41da:	6025      	str	r5, [r4, #0]
   d41dc:	80a5      	strh	r5, [r4, #4]
    SleepResult() {}
   d41de:	71a5      	strb	r5, [r4, #6]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d41e0:	2003      	movs	r0, #3
   d41e2:	f001 fb3f 	bl	d5864 <set_system_mode>
SYSTEM_MODE(MANUAL);
   d41e6:	4a0c      	ldr	r2, [pc, #48]	; (d4218 <_GLOBAL__sub_I_SystemMode+0x48>)
   d41e8:	490c      	ldr	r1, [pc, #48]	; (d421c <_GLOBAL__sub_I_SystemMode+0x4c>)
   d41ea:	4620      	mov	r0, r4
OledWingAdafruit display;
   d41ec:	4c0c      	ldr	r4, [pc, #48]	; (d4220 <_GLOBAL__sub_I_SystemMode+0x50>)
SYSTEM_MODE(MANUAL);
   d41ee:	f002 fad5 	bl	d679c <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);
   d41f2:	4629      	mov	r1, r5
   d41f4:	2001      	movs	r0, #1
   d41f6:	f001 fb45 	bl	d5884 <system_thread_set_state>
OledWingAdafruit display;
   d41fa:	2107      	movs	r1, #7
   d41fc:	4620      	mov	r0, r4
   d41fe:	f000 fc4f 	bl	d4aa0 <_ZN16OledWingAdafruitC1Ei>
   d4202:	4620      	mov	r0, r4
   d4204:	4a04      	ldr	r2, [pc, #16]	; (d4218 <_GLOBAL__sub_I_SystemMode+0x48>)
   d4206:	4907      	ldr	r1, [pc, #28]	; (d4224 <_GLOBAL__sub_I_SystemMode+0x54>)
   d4208:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
OledWingAdafruit display;
   d420c:	f002 bac6 	b.w	d679c <__aeabi_atexit>
   d4210:	2003e5c8 	.word	0x2003e5c8
   d4214:	ffff0000 	.word	0xffff0000
   d4218:	2003e5c4 	.word	0x2003e5c4
   d421c:	000d40c5 	.word	0x000d40c5
   d4220:	2003e5d4 	.word	0x2003e5d4
   d4224:	000d4a6d 	.word	0x000d4a6d

000d4228 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   d4228:	4770      	bx	lr

000d422a <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   d422a:	b510      	push	{r4, lr}
  }
   d422c:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   d422e:	4604      	mov	r4, r0
  }
   d4230:	f002 fab9 	bl	d67a6 <_ZdlPvj>
   d4234:	4620      	mov	r0, r4
   d4236:	bd10      	pop	{r4, pc}

000d4238 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d4238:	b40e      	push	{r1, r2, r3}
   d423a:	b503      	push	{r0, r1, lr}
   d423c:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d423e:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d4240:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d4244:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d4246:	f001 fe28 	bl	d5e9a <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d424a:	b002      	add	sp, #8
   d424c:	f85d eb04 	ldr.w	lr, [sp], #4
   d4250:	b003      	add	sp, #12
   d4252:	4770      	bx	lr

000d4254 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d4254:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4256:	4604      	mov	r4, r0
   d4258:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d425a:	7922      	ldrb	r2, [r4, #4]
   d425c:	68a3      	ldr	r3, [r4, #8]
   d425e:	b132      	cbz	r2, d426e <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   d4260:	b9a3      	cbnz	r3, d428c <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   d4262:	490b      	ldr	r1, [pc, #44]	; (d4290 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   d4264:	b002      	add	sp, #8
   d4266:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   d426a:	f001 bd07 	b.w	d5c7c <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d426e:	4a09      	ldr	r2, [pc, #36]	; (d4294 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   d4270:	7b26      	ldrb	r6, [r4, #12]
   d4272:	4d09      	ldr	r5, [pc, #36]	; (d4298 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   d4274:	4909      	ldr	r1, [pc, #36]	; (d429c <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   d4276:	7b64      	ldrb	r4, [r4, #13]
   d4278:	2e01      	cmp	r6, #1
   d427a:	bf18      	it	ne
   d427c:	4629      	movne	r1, r5
   d427e:	e9cd 1400 	strd	r1, r4, [sp]
   d4282:	4907      	ldr	r1, [pc, #28]	; (d42a0 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   d4284:	f7ff ffd8 	bl	d4238 <_ZN5Print6printfEPKcz>
  }
   d4288:	b002      	add	sp, #8
   d428a:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d428c:	4a05      	ldr	r2, [pc, #20]	; (d42a4 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   d428e:	e7ef      	b.n	d4270 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   d4290:	000d71f2 	.word	0x000d71f2
   d4294:	000d71e9 	.word	0x000d71e9
   d4298:	000d71ee 	.word	0x000d71ee
   d429c:	000d71ea 	.word	0x000d71ea
   d42a0:	000d7208 	.word	0x000d7208
   d42a4:	000d71e1 	.word	0x000d71e1

000d42a8 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   d42a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d42ac:	b085      	sub	sp, #20
   d42ae:	461f      	mov	r7, r3
   d42b0:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   d42b4:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   d42b8:	eba8 0902 	sub.w	r9, r8, r2
   d42bc:	eba7 0a01 	sub.w	sl, r7, r1
   d42c0:	f1b9 0f00 	cmp.w	r9, #0
   d42c4:	bfb8      	it	lt
   d42c6:	f1c9 0900 	rsblt	r9, r9, #0
   d42ca:	f1ba 0f00 	cmp.w	sl, #0
   d42ce:	bfb8      	it	lt
   d42d0:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   d42d4:	45d1      	cmp	r9, sl
        uint16_t color) {
   d42d6:	4683      	mov	fp, r0
   d42d8:	460c      	mov	r4, r1
   d42da:	4615      	mov	r5, r2
    if (steep) {
   d42dc:	dd04      	ble.n	d42e8 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   d42de:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   d42e0:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   d42e2:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   d42e4:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   d42e6:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   d42e8:	42bc      	cmp	r4, r7
   d42ea:	dd05      	ble.n	d42f8 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   d42ec:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   d42ee:	4645      	mov	r5, r8
   d42f0:	4690      	mov	r8, r2
    if (x0 > x1) {
   d42f2:	4622      	mov	r2, r4
   d42f4:	463c      	mov	r4, r7
   d42f6:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   d42f8:	1b3e      	subs	r6, r7, r4
   d42fa:	b2b2      	uxth	r2, r6
   d42fc:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   d42fe:	eba8 0205 	sub.w	r2, r8, r5
   d4302:	2a00      	cmp	r2, #0
   d4304:	bfb8      	it	lt
   d4306:	4252      	neglt	r2, r2
   d4308:	9201      	str	r2, [sp, #4]

    int16_t err = dx / 2;
   d430a:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   d430e:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   d4312:	4545      	cmp	r5, r8
   d4314:	bfb4      	ite	lt
   d4316:	2201      	movlt	r2, #1
   d4318:	f04f 32ff 	movge.w	r2, #4294967295
    int16_t err = dx / 2;
   d431c:	1076      	asrs	r6, r6, #1
        ystep = -1;
   d431e:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   d4320:	42bc      	cmp	r4, r7
   d4322:	dc1c      	bgt.n	d435e <_ZN12Adafruit_GFX9writeLineEsssst+0xb6>
        if (steep) {
   d4324:	f8db 2000 	ldr.w	r2, [fp]
            writePixel(y0, x0, color);
   d4328:	9303      	str	r3, [sp, #12]
        if (steep) {
   d432a:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   d432c:	f8d2 8018 	ldr.w	r8, [r2, #24]
   d4330:	bfc7      	ittee	gt
   d4332:	4629      	movgt	r1, r5
   d4334:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   d4336:	462a      	movle	r2, r5
   d4338:	4621      	movle	r1, r4
   d433a:	4658      	mov	r0, fp
   d433c:	47c0      	blx	r8
        }
        err -= dy;
   d433e:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   d4340:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   d4342:	1ab6      	subs	r6, r6, r2
   d4344:	b2b1      	uxth	r1, r6
   d4346:	b236      	sxth	r6, r6
        if (err < 0) {
   d4348:	2e00      	cmp	r6, #0
   d434a:	da05      	bge.n	d4358 <_ZN12Adafruit_GFX9writeLineEsssst+0xb0>
            y0 += ystep;
   d434c:	9a02      	ldr	r2, [sp, #8]
   d434e:	4415      	add	r5, r2
            err += dx;
   d4350:	9a00      	ldr	r2, [sp, #0]
   d4352:	1856      	adds	r6, r2, r1
            y0 += ystep;
   d4354:	b22d      	sxth	r5, r5
            err += dx;
   d4356:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   d4358:	3401      	adds	r4, #1
   d435a:	b224      	sxth	r4, r4
   d435c:	e7e0      	b.n	d4320 <_ZN12Adafruit_GFX9writeLineEsssst+0x78>
        }
    }
}
   d435e:	b005      	add	sp, #20
   d4360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d4364 <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   d4364:	4770      	bx	lr

000d4366 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   d4366:	b410      	push	{r4}
    drawPixel(x, y, color);
   d4368:	6804      	ldr	r4, [r0, #0]
   d436a:	6924      	ldr	r4, [r4, #16]
   d436c:	46a4      	mov	ip, r4
}
   d436e:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   d4372:	4760      	bx	ip

000d4374 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   d4374:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   d4376:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   d4378:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   d437c:	9502      	str	r5, [sp, #8]
   d437e:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   d4380:	46a4      	mov	ip, r4
}
   d4382:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   d4384:	4760      	bx	ip

000d4386 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   d4386:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   d4388:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   d438a:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   d438e:	9502      	str	r5, [sp, #8]
   d4390:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   d4392:	46a4      	mov	ip, r4
}
   d4394:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   d4396:	4760      	bx	ip

000d4398 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d4398:	b470      	push	{r4, r5, r6}
   d439a:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   d439e:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   d43a2:	6804      	ldr	r4, [r0, #0]
   d43a4:	e9cd 5603 	strd	r5, r6, [sp, #12]
   d43a8:	6c24      	ldr	r4, [r4, #64]	; 0x40
   d43aa:	46a4      	mov	ip, r4
}
   d43ac:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   d43ae:	4760      	bx	ip

000d43b0 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   d43b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d43b4:	461c      	mov	r4, r3
    startWrite();
   d43b6:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   d43b8:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   d43bc:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   d43be:	4605      	mov	r5, r0
   d43c0:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   d43c2:	3c01      	subs	r4, #1
   d43c4:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   d43c6:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   d43c8:	b224      	sxth	r4, r4
    startWrite();
   d43ca:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   d43cc:	682b      	ldr	r3, [r5, #0]
   d43ce:	f8cd 8004 	str.w	r8, [sp, #4]
   d43d2:	9400      	str	r4, [sp, #0]
   d43d4:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   d43d6:	4628      	mov	r0, r5
   d43d8:	463b      	mov	r3, r7
   d43da:	4632      	mov	r2, r6
   d43dc:	4639      	mov	r1, r7
   d43de:	47a0      	blx	r4
    endWrite();
   d43e0:	682b      	ldr	r3, [r5, #0]
   d43e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d43e4:	4628      	mov	r0, r5
}
   d43e6:	b002      	add	sp, #8
   d43e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   d43ec:	4718      	bx	r3

000d43ee <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   d43ee:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d43f2:	461d      	mov	r5, r3
    startWrite();
   d43f4:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   d43f6:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   d43fa:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   d43fc:	4604      	mov	r4, r0
   d43fe:	4617      	mov	r7, r2
   d4400:	460e      	mov	r6, r1
    startWrite();
   d4402:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   d4404:	e9cd 7800 	strd	r7, r8, [sp]
   d4408:	6822      	ldr	r2, [r4, #0]
   d440a:	1e6b      	subs	r3, r5, #1
   d440c:	4433      	add	r3, r6
   d440e:	6a95      	ldr	r5, [r2, #40]	; 0x28
   d4410:	4620      	mov	r0, r4
   d4412:	b21b      	sxth	r3, r3
   d4414:	463a      	mov	r2, r7
   d4416:	4631      	mov	r1, r6
   d4418:	47a8      	blx	r5
    endWrite();
   d441a:	6823      	ldr	r3, [r4, #0]
   d441c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d441e:	4620      	mov	r0, r4
}
   d4420:	b002      	add	sp, #8
   d4422:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   d4426:	4718      	bx	r3

000d4428 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d4428:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d442c:	461e      	mov	r6, r3
    startWrite();
   d442e:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   d4430:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   d4434:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   d4436:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   d443a:	460c      	mov	r4, r1
   d443c:	4605      	mov	r5, r0
   d443e:	4617      	mov	r7, r2
    startWrite();
   d4440:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   d4442:	4426      	add	r6, r4
   d4444:	42b4      	cmp	r4, r6
   d4446:	682b      	ldr	r3, [r5, #0]
   d4448:	da0b      	bge.n	d4462 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   d444a:	f8cd 8000 	str.w	r8, [sp]
   d444e:	f8d3 a020 	ldr.w	sl, [r3, #32]
   d4452:	4621      	mov	r1, r4
   d4454:	464b      	mov	r3, r9
   d4456:	463a      	mov	r2, r7
   d4458:	4628      	mov	r0, r5
   d445a:	3401      	adds	r4, #1
   d445c:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   d445e:	b224      	sxth	r4, r4
   d4460:	e7f0      	b.n	d4444 <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   d4462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4464:	4628      	mov	r0, r5
}
   d4466:	b002      	add	sp, #8
   d4468:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   d446c:	4718      	bx	r3

000d446e <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   d446e:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   d4470:	6802      	ldr	r2, [r0, #0]
   d4472:	9101      	str	r1, [sp, #4]
   d4474:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   d4478:	9100      	str	r1, [sp, #0]
   d447a:	6c14      	ldr	r4, [r2, #64]	; 0x40
   d447c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d4480:	2200      	movs	r2, #0
   d4482:	4611      	mov	r1, r2
   d4484:	47a0      	blx	r4
}
   d4486:	b002      	add	sp, #8
   d4488:	bd10      	pop	{r4, pc}

000d448a <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d448a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d448e:	461d      	mov	r5, r3
    startWrite();
   d4490:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   d4492:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   d4496:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   d4498:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   d449c:	4604      	mov	r4, r0
   d449e:	460f      	mov	r7, r1
   d44a0:	4616      	mov	r6, r2
    startWrite();
   d44a2:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   d44a4:	6823      	ldr	r3, [r4, #0]
   d44a6:	f8cd 8000 	str.w	r8, [sp]
   d44aa:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d44ae:	4632      	mov	r2, r6
   d44b0:	462b      	mov	r3, r5
   d44b2:	4639      	mov	r1, r7
   d44b4:	4620      	mov	r0, r4
   d44b6:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   d44b8:	6823      	ldr	r3, [r4, #0]
   d44ba:	f8cd 8000 	str.w	r8, [sp]
   d44be:	f109 32ff 	add.w	r2, r9, #4294967295
   d44c2:	4432      	add	r2, r6
   d44c4:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d44c8:	4639      	mov	r1, r7
   d44ca:	462b      	mov	r3, r5
   d44cc:	4620      	mov	r0, r4
   d44ce:	b212      	sxth	r2, r2
   d44d0:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   d44d2:	6823      	ldr	r3, [r4, #0]
   d44d4:	f8cd 8000 	str.w	r8, [sp]
   d44d8:	f8d3 a020 	ldr.w	sl, [r3, #32]
   d44dc:	4632      	mov	r2, r6
   d44de:	464b      	mov	r3, r9
   d44e0:	4639      	mov	r1, r7
   d44e2:	4620      	mov	r0, r4
   d44e4:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   d44e6:	1e6b      	subs	r3, r5, #1
   d44e8:	19d9      	adds	r1, r3, r7
   d44ea:	6823      	ldr	r3, [r4, #0]
   d44ec:	f8cd 8000 	str.w	r8, [sp]
   d44f0:	6a1d      	ldr	r5, [r3, #32]
   d44f2:	4620      	mov	r0, r4
   d44f4:	464b      	mov	r3, r9
   d44f6:	4632      	mov	r2, r6
   d44f8:	b209      	sxth	r1, r1
   d44fa:	47a8      	blx	r5
    endWrite();
   d44fc:	6823      	ldr	r3, [r4, #0]
   d44fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4500:	4620      	mov	r0, r4
}
   d4502:	b002      	add	sp, #8
   d4504:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   d4508:	4718      	bx	r3

000d450a <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   d450a:	4770      	bx	lr

000d450c <_ZN12Adafruit_GFX8drawLineEsssst>:
        uint16_t color) {
   d450c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    if(x0 == x1){
   d4510:	4299      	cmp	r1, r3
        uint16_t color) {
   d4512:	4616      	mov	r6, r2
   d4514:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   d4518:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   d451c:	6802      	ldr	r2, [r0, #0]
   d451e:	4680      	mov	r8, r0
   d4520:	460d      	mov	r5, r1
   d4522:	461c      	mov	r4, r3
    if(x0 == x1){
   d4524:	d113      	bne.n	d454e <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   d4526:	42be      	cmp	r6, r7
   d4528:	bfc8      	it	gt
   d452a:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   d452c:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   d4530:	bfc4      	itt	gt
   d4532:	463e      	movgt	r6, r7
   d4534:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   d4536:	1c7b      	adds	r3, r7, #1
   d4538:	6b94      	ldr	r4, [r2, #56]	; 0x38
   d453a:	1b9b      	subs	r3, r3, r6
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d453c:	b21b      	sxth	r3, r3
   d453e:	4632      	mov	r2, r6
   d4540:	4629      	mov	r1, r5
   d4542:	4640      	mov	r0, r8
   d4544:	46a4      	mov	ip, r4
}
   d4546:	b003      	add	sp, #12
   d4548:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d454c:	4760      	bx	ip
    } else if(y0 == y1){
   d454e:	42be      	cmp	r6, r7
   d4550:	d10a      	bne.n	d4568 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   d4552:	4299      	cmp	r1, r3
   d4554:	bfc2      	ittt	gt
   d4556:	460b      	movgt	r3, r1
   d4558:	4625      	movgt	r5, r4
   d455a:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d455c:	1c63      	adds	r3, r4, #1
   d455e:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   d4562:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d4564:	1b5b      	subs	r3, r3, r5
   d4566:	e7e9      	b.n	d453c <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   d4568:	6953      	ldr	r3, [r2, #20]
   d456a:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   d456c:	e9cd 7900 	strd	r7, r9, [sp]
   d4570:	f8d8 3000 	ldr.w	r3, [r8]
   d4574:	4640      	mov	r0, r8
   d4576:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d4578:	4632      	mov	r2, r6
   d457a:	4623      	mov	r3, r4
   d457c:	4629      	mov	r1, r5
   d457e:	47b8      	blx	r7
        endWrite();
   d4580:	f8d8 3000 	ldr.w	r3, [r8]
   d4584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4586:	4640      	mov	r0, r8
}
   d4588:	b003      	add	sp, #12
   d458a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   d458e:	4718      	bx	r3

000d4590 <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   d4590:	f001 0303 	and.w	r3, r1, #3
   d4594:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
   d4598:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   d459a:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   d459c:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   d45a0:	bf59      	ittee	pl
   d45a2:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   d45a4:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   d45a6:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   d45a8:	81c3      	strhmi	r3, [r0, #14]
}
   d45aa:	4770      	bx	lr

000d45ac <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   d45ac:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   d45ae:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   d45b0:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   d45b2:	4a07      	ldr	r2, [pc, #28]	; (d45d0 <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   d45b4:	4d07      	ldr	r5, [pc, #28]	; (d45d4 <_ZN12Adafruit_GFXC1Ess+0x28>)
   d45b6:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   d45b8:	2400      	movs	r4, #0
    _width    = WIDTH;
   d45ba:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   d45bc:	f04f 31ff 	mov.w	r1, #4294967295
   d45c0:	e9c0 1205 	strd	r1, r2, [r0, #20]
   d45c4:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   d45c6:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   d45c8:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   d45ca:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   d45cc:	6204      	str	r4, [r0, #32]
}
   d45ce:	bd30      	pop	{r4, r5, pc}
   d45d0:	01000101 	.word	0x01000101
   d45d4:	000d7730 	.word	0x000d7730

000d45d8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d45d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d45dc:	b089      	sub	sp, #36	; 0x24
   d45de:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   d45e2:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d45e4:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   d45e8:	9304      	str	r3, [sp, #16]
   d45ea:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   d45ee:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d45f0:	9305      	str	r3, [sp, #20]
   d45f2:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   d45f6:	4604      	mov	r4, r0
    startWrite();
   d45f8:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   d45fa:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   d45fe:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   d4602:	bf48      	it	mi
   d4604:	f108 020e 	addmi.w	r2, r8, #14
   d4608:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   d460c:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   d460e:	4635      	mov	r5, r6
   d4610:	9b03      	ldr	r3, [sp, #12]
   d4612:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   d4614:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   d4618:	189a      	adds	r2, r3, r2
   d461a:	9b05      	ldr	r3, [sp, #20]
   d461c:	428b      	cmp	r3, r1
   d461e:	b212      	sxth	r2, r2
   d4620:	dd27      	ble.n	d4672 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d4622:	9b04      	ldr	r3, [sp, #16]
   d4624:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   d4626:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d462a:	9306      	str	r3, [sp, #24]
   d462c:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   d4630:	4580      	cmp	r8, r0
   d4632:	fa1f f189 	uxth.w	r1, r9
   d4636:	dd17      	ble.n	d4668 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   d4638:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d463a:	bf05      	ittet	eq
   d463c:	9b06      	ldreq	r3, [sp, #24]
   d463e:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   d4640:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d4642:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   d4644:	bf18      	it	ne
   d4646:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   d4648:	062b      	lsls	r3, r5, #24
   d464a:	d50a      	bpl.n	d4662 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   d464c:	9b02      	ldr	r3, [sp, #8]
   d464e:	6820      	ldr	r0, [r4, #0]
   d4650:	9207      	str	r2, [sp, #28]
   d4652:	4419      	add	r1, r3
   d4654:	6983      	ldr	r3, [r0, #24]
   d4656:	b209      	sxth	r1, r1
   d4658:	461f      	mov	r7, r3
   d465a:	4620      	mov	r0, r4
   d465c:	4653      	mov	r3, sl
   d465e:	47b8      	blx	r7
   d4660:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   d4662:	f109 0901 	add.w	r9, r9, #1
   d4666:	e7e1      	b.n	d462c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   d4668:	9b01      	ldr	r3, [sp, #4]
   d466a:	3301      	adds	r3, #1
   d466c:	9301      	str	r3, [sp, #4]
   d466e:	445e      	add	r6, fp
   d4670:	e7ce      	b.n	d4610 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   d4672:	6823      	ldr	r3, [r4, #0]
   d4674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4676:	4620      	mov	r0, r4
}
   d4678:	b009      	add	sp, #36	; 0x24
   d467a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   d467e:	4718      	bx	r3

000d4680 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   d4680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4684:	ed2d 8b02 	vpush	{d8}
   d4688:	b091      	sub	sp, #68	; 0x44
   d468a:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   d468c:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   d468e:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   d4692:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   d4696:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   d469a:	9103      	str	r1, [sp, #12]
   d469c:	461f      	mov	r7, r3
   d469e:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   d46a2:	9304      	str	r3, [sp, #16]
   d46a4:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   d46a6:	2a00      	cmp	r2, #0
   d46a8:	f040 80c5 	bne.w	d4836 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   d46ac:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d46b0:	428b      	cmp	r3, r1
   d46b2:	f340 814c 	ble.w	d494e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   d46b6:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   d46ba:	42b3      	cmp	r3, r6
   d46bc:	f340 8147 	ble.w	d494e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   d46c0:	2306      	movs	r3, #6
   d46c2:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   d46c6:	2b00      	cmp	r3, #0
   d46c8:	f340 8141 	ble.w	d494e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   d46cc:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   d46d0:	2b00      	cmp	r3, #0
   d46d2:	f340 813c 	ble.w	d494e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   d46d6:	7f03      	ldrb	r3, [r0, #28]
   d46d8:	b91b      	cbnz	r3, d46e2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   d46da:	2faf      	cmp	r7, #175	; 0xaf
   d46dc:	bf84      	itt	hi
   d46de:	3701      	addhi	r7, #1
   d46e0:	b2ff      	uxtbhi	r7, r7
        startWrite();
   d46e2:	f8db 3000 	ldr.w	r3, [fp]
   d46e6:	4658      	mov	r0, fp
   d46e8:	695b      	ldr	r3, [r3, #20]
   d46ea:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d46ec:	2205      	movs	r2, #5
   d46ee:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   d46f0:	2200      	movs	r2, #0
   d46f2:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d46f4:	4a98      	ldr	r2, [pc, #608]	; (d4958 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   d46f6:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   d46fa:	18d3      	adds	r3, r2, r3
   d46fc:	930c      	str	r3, [sp, #48]	; 0x30
   d46fe:	b2b3      	uxth	r3, r6
   d4700:	9306      	str	r3, [sp, #24]
   d4702:	9a05      	ldr	r2, [sp, #20]
   d4704:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d4706:	5c9b      	ldrb	r3, [r3, r2]
   d4708:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   d470a:	b2ab      	uxth	r3, r5
   d470c:	930b      	str	r3, [sp, #44]	; 0x2c
   d470e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   d4712:	9308      	str	r3, [sp, #32]
   d4714:	9b03      	ldr	r3, [sp, #12]
   d4716:	fb02 f905 	mul.w	r9, r2, r5
   d471a:	fa19 f983 	uxtah	r9, r9, r3
   d471e:	fa0f f389 	sxth.w	r3, r9
   d4722:	ee08 3a10 	vmov	s16, r3
   d4726:	2308      	movs	r3, #8
   d4728:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   d472a:	9b03      	ldr	r3, [sp, #12]
   d472c:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   d4730:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   d4734:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   d4738:	9a07      	ldr	r2, [sp, #28]
   d473a:	f8db 3000 	ldr.w	r3, [fp]
   d473e:	07d2      	lsls	r2, r2, #31
   d4740:	d552      	bpl.n	d47e8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   d4742:	2d01      	cmp	r5, #1
   d4744:	fa1f f289 	uxth.w	r2, r9
   d4748:	d13e      	bne.n	d47c8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   d474a:	2c01      	cmp	r4, #1
   d474c:	d13c      	bne.n	d47c8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   d474e:	699b      	ldr	r3, [r3, #24]
   d4750:	9906      	ldr	r1, [sp, #24]
   d4752:	461f      	mov	r7, r3
   d4754:	9b04      	ldr	r3, [sp, #16]
   d4756:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   d4758:	b212      	sxth	r2, r2
   d475a:	4651      	mov	r1, sl
   d475c:	4658      	mov	r0, fp
   d475e:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   d4760:	f109 0301 	add.w	r3, r9, #1
   d4764:	fa4f f983 	sxtb.w	r9, r3
   d4768:	9b07      	ldr	r3, [sp, #28]
   d476a:	085b      	lsrs	r3, r3, #1
   d476c:	9307      	str	r3, [sp, #28]
   d476e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d4770:	3b01      	subs	r3, #1
   d4772:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d4776:	930a      	str	r3, [sp, #40]	; 0x28
   d4778:	d1de      	bne.n	d4738 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   d477a:	9f05      	ldr	r7, [sp, #20]
   d477c:	3701      	adds	r7, #1
   d477e:	b27b      	sxtb	r3, r7
   d4780:	9305      	str	r3, [sp, #20]
   d4782:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d4784:	3b01      	subs	r3, #1
   d4786:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d478a:	9309      	str	r3, [sp, #36]	; 0x24
   d478c:	d1b9      	bne.n	d4702 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   d478e:	9b04      	ldr	r3, [sp, #16]
   d4790:	4543      	cmp	r3, r8
   d4792:	d00f      	beq.n	d47b4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   d4794:	2d01      	cmp	r5, #1
   d4796:	f8db 3000 	ldr.w	r3, [fp]
   d479a:	d13b      	bne.n	d4814 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   d479c:	2c01      	cmp	r4, #1
   d479e:	d139      	bne.n	d4814 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   d47a0:	9908      	ldr	r1, [sp, #32]
   d47a2:	f8cd 8000 	str.w	r8, [sp]
   d47a6:	3105      	adds	r1, #5
   d47a8:	6a1c      	ldr	r4, [r3, #32]
   d47aa:	4632      	mov	r2, r6
   d47ac:	2308      	movs	r3, #8
   d47ae:	b209      	sxth	r1, r1
   d47b0:	4658      	mov	r0, fp
   d47b2:	47a0      	blx	r4
        endWrite();
   d47b4:	f8db 3000 	ldr.w	r3, [fp]
   d47b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d47ba:	4658      	mov	r0, fp
}
   d47bc:	b011      	add	sp, #68	; 0x44
   d47be:	ecbd 8b02 	vpop	{d8}
   d47c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   d47c6:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   d47c8:	9906      	ldr	r1, [sp, #24]
   d47ca:	fb14 f202 	smulbb	r2, r4, r2
   d47ce:	440a      	add	r2, r1
   d47d0:	9904      	ldr	r1, [sp, #16]
   d47d2:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   d47d4:	9400      	str	r4, [sp, #0]
   d47d6:	69db      	ldr	r3, [r3, #28]
   d47d8:	ee18 1a10 	vmov	r1, s16
   d47dc:	461f      	mov	r7, r3
   d47de:	b212      	sxth	r2, r2
   d47e0:	462b      	mov	r3, r5
   d47e2:	4658      	mov	r0, fp
   d47e4:	47b8      	blx	r7
   d47e6:	e7bb      	b.n	d4760 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   d47e8:	9a04      	ldr	r2, [sp, #16]
   d47ea:	4542      	cmp	r2, r8
   d47ec:	d0b8      	beq.n	d4760 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   d47ee:	2d01      	cmp	r5, #1
   d47f0:	fa1f f289 	uxth.w	r2, r9
   d47f4:	d107      	bne.n	d4806 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   d47f6:	2c01      	cmp	r4, #1
   d47f8:	d105      	bne.n	d4806 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   d47fa:	699b      	ldr	r3, [r3, #24]
   d47fc:	9906      	ldr	r1, [sp, #24]
   d47fe:	461f      	mov	r7, r3
   d4800:	440a      	add	r2, r1
   d4802:	4643      	mov	r3, r8
   d4804:	e7a8      	b.n	d4758 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   d4806:	9906      	ldr	r1, [sp, #24]
   d4808:	f8cd 8004 	str.w	r8, [sp, #4]
   d480c:	fb14 f202 	smulbb	r2, r4, r2
   d4810:	440a      	add	r2, r1
   d4812:	e7df      	b.n	d47d4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   d4814:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d4816:	f8cd 8004 	str.w	r8, [sp, #4]
   d481a:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   d481e:	9a08      	ldr	r2, [sp, #32]
   d4820:	00e4      	lsls	r4, r4, #3
   d4822:	440a      	add	r2, r1
   d4824:	4611      	mov	r1, r2
   d4826:	9400      	str	r4, [sp, #0]
   d4828:	69dc      	ldr	r4, [r3, #28]
   d482a:	4632      	mov	r2, r6
   d482c:	462b      	mov	r3, r5
   d482e:	b209      	sxth	r1, r1
   d4830:	4658      	mov	r0, fp
   d4832:	47a0      	blx	r4
        endWrite();
   d4834:	e7be      	b.n	d47b4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   d4836:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   d4838:	6851      	ldr	r1, [r2, #4]
        uint8_t  *bitmap = pgm_read_bitmap_ptr(gfxFont);
   d483a:	6812      	ldr	r2, [r2, #0]
   d483c:	920d      	str	r2, [sp, #52]	; 0x34
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   d483e:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   d4840:	b2ff      	uxtb	r7, r7
   d4842:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   d4846:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   d484a:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   d484c:	789a      	ldrb	r2, [r3, #2]
   d484e:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   d4850:	78da      	ldrb	r2, [r3, #3]
   d4852:	920b      	str	r2, [sp, #44]	; 0x2c
        if(size_x > 1 || size_y > 1) {
   d4854:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   d4856:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   d485a:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   d485e:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   d4860:	d801      	bhi.n	d4866 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   d4862:	2c01      	cmp	r4, #1
   d4864:	d957      	bls.n	d4916 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   d4866:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   d486a:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   d486c:	fa0f f38a 	sxth.w	r3, sl
   d4870:	9307      	str	r3, [sp, #28]
        startWrite();
   d4872:	f8db 3000 	ldr.w	r3, [fp]
   d4876:	4658      	mov	r0, fp
   d4878:	695b      	ldr	r3, [r3, #20]
   d487a:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d487c:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   d487e:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d4882:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   d4884:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   d4888:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   d488a:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   d488c:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   d488e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d4890:	429f      	cmp	r7, r3
   d4892:	d28f      	bcs.n	d47b4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d4894:	9b07      	ldr	r3, [sp, #28]
   d4896:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   d4898:	443b      	add	r3, r7
   d489a:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   d489e:	2200      	movs	r2, #0
   d48a0:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   d48a2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d48a4:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   d48a6:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d48aa:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   d48ae:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d48b2:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   d48b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   d48b6:	9905      	ldr	r1, [sp, #20]
   d48b8:	4291      	cmp	r1, r2
   d48ba:	d241      	bcs.n	d4940 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   d48bc:	1c5a      	adds	r2, r3, #1
   d48be:	b2d2      	uxtb	r2, r2
   d48c0:	075b      	lsls	r3, r3, #29
   d48c2:	920c      	str	r2, [sp, #48]	; 0x30
   d48c4:	d107      	bne.n	d48d6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   d48c6:	9b06      	ldr	r3, [sp, #24]
   d48c8:	9906      	ldr	r1, [sp, #24]
   d48ca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   d48cc:	3301      	adds	r3, #1
   d48ce:	b29b      	uxth	r3, r3
   d48d0:	f812 9001 	ldrb.w	r9, [r2, r1]
   d48d4:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   d48d6:	f019 0f80 	tst.w	r9, #128	; 0x80
   d48da:	d012      	beq.n	d4902 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   d48dc:	2d01      	cmp	r5, #1
   d48de:	f8db 3000 	ldr.w	r3, [fp]
   d48e2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   d48e6:	d11a      	bne.n	d491e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   d48e8:	2c01      	cmp	r4, #1
   d48ea:	d118      	bne.n	d491e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   d48ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   d48ee:	699b      	ldr	r3, [r3, #24]
   d48f0:	4411      	add	r1, r2
   d48f2:	9a05      	ldr	r2, [sp, #20]
   d48f4:	4411      	add	r1, r2
   d48f6:	461e      	mov	r6, r3
   d48f8:	4652      	mov	r2, sl
   d48fa:	9b04      	ldr	r3, [sp, #16]
   d48fc:	b209      	sxth	r1, r1
   d48fe:	4658      	mov	r0, fp
   d4900:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   d4902:	9e05      	ldr	r6, [sp, #20]
   d4904:	3601      	adds	r6, #1
   d4906:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   d4908:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   d490c:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   d490e:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   d4912:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            for(xx=0; xx<w; xx++) {
   d4914:	e7ce      	b.n	d48b4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   d4916:	2300      	movs	r3, #0
   d4918:	e9cd 3307 	strd	r3, r3, [sp, #28]
   d491c:	e7a9      	b.n	d4872 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d491e:	9805      	ldr	r0, [sp, #20]
   d4920:	9a08      	ldr	r2, [sp, #32]
   d4922:	4402      	add	r2, r0
   d4924:	fb02 1105 	mla	r1, r2, r5, r1
   d4928:	9a04      	ldr	r2, [sp, #16]
   d492a:	e9cd 4200 	strd	r4, r2, [sp]
   d492e:	69db      	ldr	r3, [r3, #28]
   d4930:	ee18 2a10 	vmov	r2, s16
   d4934:	461e      	mov	r6, r3
   d4936:	b209      	sxth	r1, r1
   d4938:	462b      	mov	r3, r5
   d493a:	4658      	mov	r0, fp
   d493c:	47b0      	blx	r6
   d493e:	e7e0      	b.n	d4902 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   d4940:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   d4942:	3701      	adds	r7, #1
   d4944:	4498      	add	r8, r3
   d4946:	fa5f f888 	uxtb.w	r8, r8
   d494a:	b2ff      	uxtb	r7, r7
   d494c:	e79f      	b.n	d488e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   d494e:	b011      	add	sp, #68	; 0x44
   d4950:	ecbd 8b02 	vpop	{d8}
   d4954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4958:	000d7225 	.word	0x000d7225

000d495c <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   d495c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   d495e:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   d4960:	b085      	sub	sp, #20
   d4962:	4604      	mov	r4, r0
   d4964:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   d4966:	2a00      	cmp	r2, #0
   d4968:	d134      	bne.n	d49d4 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   d496a:	290a      	cmp	r1, #10
   d496c:	d108      	bne.n	d4980 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   d496e:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   d4970:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   d4972:	7e42      	ldrb	r2, [r0, #25]
   d4974:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   d4978:	8263      	strh	r3, [r4, #18]
}
   d497a:	2001      	movs	r0, #1
   d497c:	b005      	add	sp, #20
   d497e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   d4980:	290d      	cmp	r1, #13
   d4982:	d0fa      	beq.n	d497a <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   d4984:	7ee1      	ldrb	r1, [r4, #27]
   d4986:	7e00      	ldrb	r0, [r0, #24]
   d4988:	7e65      	ldrb	r5, [r4, #25]
   d498a:	b171      	cbz	r1, d49aa <_ZN12Adafruit_GFX5writeEh+0x4e>
   d498c:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   d4990:	2106      	movs	r1, #6
   d4992:	fb11 6100 	smlabb	r1, r1, r0, r6
   d4996:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   d499a:	42b1      	cmp	r1, r6
   d499c:	bfc1      	itttt	gt
   d499e:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   d49a2:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   d49a4:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   d49a8:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   d49aa:	8ae2      	ldrh	r2, [r4, #22]
   d49ac:	9201      	str	r2, [sp, #4]
   d49ae:	8aa2      	ldrh	r2, [r4, #20]
   d49b0:	9200      	str	r2, [sp, #0]
   d49b2:	e9cd 0502 	strd	r0, r5, [sp, #8]
   d49b6:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d49ba:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d49be:	4620      	mov	r0, r4
   d49c0:	f7ff fe5e 	bl	d4680 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   d49c4:	7e23      	ldrb	r3, [r4, #24]
   d49c6:	8a22      	ldrh	r2, [r4, #16]
   d49c8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d49cc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   d49d0:	8223      	strh	r3, [r4, #16]
   d49d2:	e7d2      	b.n	d497a <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   d49d4:	290a      	cmp	r1, #10
   d49d6:	d107      	bne.n	d49e8 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   d49d8:	2300      	movs	r3, #0
   d49da:	8203      	strh	r3, [r0, #16]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d49dc:	7a93      	ldrb	r3, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   d49de:	7e41      	ldrb	r1, [r0, #25]
   d49e0:	8a42      	ldrh	r2, [r0, #18]
   d49e2:	fb01 2303 	mla	r3, r1, r3, r2
   d49e6:	e7c7      	b.n	d4978 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   d49e8:	290d      	cmp	r1, #13
   d49ea:	d0c6      	beq.n	d497a <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   d49ec:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   d49ee:	42a9      	cmp	r1, r5
   d49f0:	d3c3      	bcc.n	d497a <_ZN12Adafruit_GFX5writeEh+0x1e>
   d49f2:	7a51      	ldrb	r1, [r2, #9]
   d49f4:	4299      	cmp	r1, r3
   d49f6:	d3c0      	bcc.n	d497a <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   d49f8:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   d49fa:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   d49fc:	b2ed      	uxtb	r5, r5
   d49fe:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   d4a02:	78af      	ldrb	r7, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   d4a04:	b32f      	cbz	r7, d4a52 <_ZN12Adafruit_GFX5writeEh+0xf6>
   d4a06:	78e9      	ldrb	r1, [r5, #3]
   d4a08:	b319      	cbz	r1, d4a52 <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   d4a0a:	7ee1      	ldrb	r1, [r4, #27]
   d4a0c:	7e00      	ldrb	r0, [r0, #24]
   d4a0e:	7e66      	ldrb	r6, [r4, #25]
   d4a10:	b191      	cbz	r1, d4a38 <_ZN12Adafruit_GFX5writeEh+0xdc>
   d4a12:	f995 1005 	ldrsb.w	r1, [r5, #5]
   d4a16:	4439      	add	r1, r7
   d4a18:	f9b4 7010 	ldrsh.w	r7, [r4, #16]
   d4a1c:	fb00 7101 	mla	r1, r0, r1, r7
   d4a20:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
   d4a24:	42b9      	cmp	r1, r7
   d4a26:	dd07      	ble.n	d4a38 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   d4a28:	2700      	movs	r7, #0
   d4a2a:	8227      	strh	r7, [r4, #16]
   d4a2c:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d4a30:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   d4a32:	fb02 1206 	mla	r2, r2, r6, r1
   d4a36:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   d4a38:	8ae2      	ldrh	r2, [r4, #22]
   d4a3a:	9201      	str	r2, [sp, #4]
   d4a3c:	8aa2      	ldrh	r2, [r4, #20]
   d4a3e:	9200      	str	r2, [sp, #0]
   d4a40:	e9cd 0602 	strd	r0, r6, [sp, #8]
   d4a44:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d4a48:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d4a4c:	4620      	mov	r0, r4
   d4a4e:	f7ff fe17 	bl	d4680 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   d4a52:	7929      	ldrb	r1, [r5, #4]
   d4a54:	7e23      	ldrb	r3, [r4, #24]
   d4a56:	8a22      	ldrh	r2, [r4, #16]
   d4a58:	fb01 2303 	mla	r3, r1, r3, r2
   d4a5c:	e7b8      	b.n	d49d0 <_ZN12Adafruit_GFX5writeEh+0x74>

000d4a5e <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   d4a5e:	2901      	cmp	r1, #1
   d4a60:	bf38      	it	cc
   d4a62:	2101      	movcc	r1, #1
   d4a64:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   d4a66:	7641      	strb	r1, [r0, #25]
}
   d4a68:	4770      	bx	lr
	...

000d4a6c <_ZN16OledWingAdafruitD1Ev>:


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {

}
OledWingAdafruit::~OledWingAdafruit() {
   d4a6c:	b510      	push	{r4, lr}
   d4a6e:	4b06      	ldr	r3, [pc, #24]	; (d4a88 <_ZN16OledWingAdafruitD1Ev+0x1c>)
   d4a70:	6003      	str	r3, [r0, #0]
   d4a72:	4604      	mov	r4, r0
	if (mutex) {
   d4a74:	6d00      	ldr	r0, [r0, #80]	; 0x50
   d4a76:	b108      	cbz	r0, d4a7c <_ZN16OledWingAdafruitD1Ev+0x10>
		os_mutex_destroy(mutex);
   d4a78:	f000 fdc4 	bl	d5604 <os_mutex_destroy>
OledWingAdafruit::~OledWingAdafruit() {
   d4a7c:	4620      	mov	r0, r4
   d4a7e:	f000 f8e3 	bl	d4c48 <_ZN16Adafruit_SSD1306D1Ev>
	}
}
   d4a82:	4620      	mov	r0, r4
   d4a84:	bd10      	pop	{r4, pc}
   d4a86:	bf00      	nop
   d4a88:	000d7788 	.word	0x000d7788

000d4a8c <_ZN16OledWingAdafruitD0Ev>:
OledWingAdafruit::~OledWingAdafruit() {
   d4a8c:	b510      	push	{r4, lr}
   d4a8e:	4604      	mov	r4, r0
}
   d4a90:	f7ff ffec 	bl	d4a6c <_ZN16OledWingAdafruitD1Ev>
   d4a94:	4620      	mov	r0, r4
   d4a96:	2170      	movs	r1, #112	; 0x70
   d4a98:	f001 fe85 	bl	d67a6 <_ZdlPvj>
   d4a9c:	4620      	mov	r0, r4
   d4a9e:	bd10      	pop	{r4, pc}

000d4aa0 <_ZN16OledWingAdafruitC1Ei>:
OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {
   d4aa0:	b530      	push	{r4, r5, lr}
   d4aa2:	b085      	sub	sp, #20
   d4aa4:	4604      	mov	r4, r0
   d4aa6:	460d      	mov	r5, r1
   d4aa8:	f001 fe50 	bl	d674c <_Z19__fetch_global_Wirev>
   d4aac:	4a10      	ldr	r2, [pc, #64]	; (d4af0 <_ZN16OledWingAdafruitC1Ei+0x50>)
   d4aae:	4911      	ldr	r1, [pc, #68]	; (d4af4 <_ZN16OledWingAdafruitC1Ei+0x54>)
   d4ab0:	e9cd 2101 	strd	r2, r1, [sp, #4]
   d4ab4:	f04f 32ff 	mov.w	r2, #4294967295
   d4ab8:	2180      	movs	r1, #128	; 0x80
   d4aba:	4603      	mov	r3, r0
   d4abc:	9200      	str	r2, [sp, #0]
   d4abe:	4620      	mov	r0, r4
   d4ac0:	2220      	movs	r2, #32
   d4ac2:	f000 f947 	bl	d4d54 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
   d4ac6:	4b0c      	ldr	r3, [pc, #48]	; (d4af8 <_ZN16OledWingAdafruitC1Ei+0x58>)
   d4ac8:	6023      	str	r3, [r4, #0]
   d4aca:	2300      	movs	r3, #0
   d4acc:	e9c4 3514 	strd	r3, r5, [r4, #80]	; 0x50
   d4ad0:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d4ad4:	f000 f85e 	bl	d4b94 <_ZN8DebounceC1Ev>
   d4ad8:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d4adc:	f000 f85a 	bl	d4b94 <_ZN8DebounceC1Ev>
   d4ae0:	f104 0068 	add.w	r0, r4, #104	; 0x68
   d4ae4:	f000 f856 	bl	d4b94 <_ZN8DebounceC1Ev>
}
   d4ae8:	4620      	mov	r0, r4
   d4aea:	b005      	add	sp, #20
   d4aec:	bd30      	pop	{r4, r5, pc}
   d4aee:	bf00      	nop
   d4af0:	00061a80 	.word	0x00061a80
   d4af4:	000186a0 	.word	0x000186a0
   d4af8:	000d7788 	.word	0x000d7788

000d4afc <_ZN16OledWingAdafruit5setupEv>:

void OledWingAdafruit::setup() {
   d4afc:	b513      	push	{r0, r1, r4, lr}
   d4afe:	4604      	mov	r4, r0
	os_mutex_create(&mutex);
   d4b00:	3050      	adds	r0, #80	; 0x50
   d4b02:	f000 fd77 	bl	d55f4 <os_mutex_create>

	if (useButtons & USE_BUTTON_A) {
   d4b06:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d4b08:	07d9      	lsls	r1, r3, #31
   d4b0a:	d505      	bpl.n	d4b18 <_ZN16OledWingAdafruit5setupEv+0x1c>
		buttonA.attach(BUTTON_A_PIN, INPUT_PULLUP);
   d4b0c:	2202      	movs	r2, #2
   d4b0e:	2104      	movs	r1, #4
   d4b10:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d4b14:	f000 f852 	bl	d4bbc <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_B) {
   d4b18:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d4b1a:	079a      	lsls	r2, r3, #30
   d4b1c:	d505      	bpl.n	d4b2a <_ZN16OledWingAdafruit5setupEv+0x2e>
		buttonB.attach(BUTTON_B_PIN, INPUT); // Button B has a hardware 100K pull-up on the board
   d4b1e:	2200      	movs	r2, #0
   d4b20:	2103      	movs	r1, #3
   d4b22:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d4b26:	f000 f849 	bl	d4bbc <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_C) {
   d4b2a:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d4b2c:	075b      	lsls	r3, r3, #29
   d4b2e:	d505      	bpl.n	d4b3c <_ZN16OledWingAdafruit5setupEv+0x40>
		buttonC.attach(BUTTON_C_PIN, INPUT_PULLUP);
   d4b30:	2202      	movs	r2, #2
   d4b32:	4611      	mov	r1, r2
   d4b34:	f104 0068 	add.w	r0, r4, #104	; 0x68
   d4b38:	f000 f840 	bl	d4bbc <_ZN8Debounce6attachEi7PinMode>
	}

	// 128x32 = I2C addr 0x3C. Method inherited from Adafruit_SSD1306.
	begin(SSD1306_SWITCHCAPVCC, 0x3C);
   d4b3c:	2301      	movs	r3, #1
   d4b3e:	9300      	str	r3, [sp, #0]
   d4b40:	223c      	movs	r2, #60	; 0x3c
   d4b42:	2102      	movs	r1, #2
   d4b44:	4620      	mov	r0, r4
   d4b46:	f000 fa05 	bl	d4f54 <_ZN16Adafruit_SSD13065beginEhhbb>
}
   d4b4a:	b002      	add	sp, #8
   d4b4c:	bd10      	pop	{r4, pc}

000d4b4e <_ZN16OledWingAdafruit4loopEv>:

void OledWingAdafruit::loop() {
   d4b4e:	b510      	push	{r4, lr}
	if (useButtons & USE_BUTTON_A) {
   d4b50:	6d43      	ldr	r3, [r0, #84]	; 0x54
   d4b52:	07d9      	lsls	r1, r3, #31
void OledWingAdafruit::loop() {
   d4b54:	4604      	mov	r4, r0
	if (useButtons & USE_BUTTON_A) {
   d4b56:	d502      	bpl.n	d4b5e <_ZN16OledWingAdafruit4loopEv+0x10>
		buttonA.update();
   d4b58:	3058      	adds	r0, #88	; 0x58
   d4b5a:	f000 f83c 	bl	d4bd6 <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_B) {
   d4b5e:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d4b60:	079a      	lsls	r2, r3, #30
   d4b62:	d503      	bpl.n	d4b6c <_ZN16OledWingAdafruit4loopEv+0x1e>
		buttonB.update();
   d4b64:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d4b68:	f000 f835 	bl	d4bd6 <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_C) {
   d4b6c:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d4b6e:	075b      	lsls	r3, r3, #29
   d4b70:	d505      	bpl.n	d4b7e <_ZN16OledWingAdafruit4loopEv+0x30>
		buttonC.update();
   d4b72:	f104 0068 	add.w	r0, r4, #104	; 0x68
	}
}
   d4b76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		buttonC.update();
   d4b7a:	f000 b82c 	b.w	d4bd6 <_ZN8Debounce6updateEv>
}
   d4b7e:	bd10      	pop	{r4, pc}

000d4b80 <_ZN16OledWingAdafruit8pressedAEv>:

bool OledWingAdafruit::pressedA() {
	return (useButtons & USE_BUTTON_A) && buttonA.fell();
   d4b80:	6d43      	ldr	r3, [r0, #84]	; 0x54
bool OledWingAdafruit::pressedA() {
   d4b82:	4602      	mov	r2, r0
	return (useButtons & USE_BUTTON_A) && buttonA.fell();
   d4b84:	f013 0001 	ands.w	r0, r3, #1
   d4b88:	d003      	beq.n	d4b92 <_ZN16OledWingAdafruit8pressedAEv+0x12>
   d4b8a:	f102 0058 	add.w	r0, r2, #88	; 0x58
   d4b8e:	f000 b852 	b.w	d4c36 <_ZN8Debounce4fellEv>
}
   d4b92:	4770      	bx	lr

000d4b94 <_ZN8DebounceC1Ev>:

Debounce::Debounce()
    : previous_millis(0)
    , interval_millis(10)
    , state(0)
    , pin(0)
   d4b94:	2100      	movs	r1, #0
   d4b96:	220a      	movs	r2, #10
   d4b98:	e9c0 1200 	strd	r1, r2, [r0]
{}
   d4b9c:	4770      	bx	lr

000d4b9e <_ZN8Debounce6attachEi>:

void Debounce::attach(int pin) {
    this->pin = pin;
    state = 0;
   d4b9e:	2300      	movs	r3, #0
void Debounce::attach(int pin) {
   d4ba0:	b510      	push	{r4, lr}
   d4ba2:	4604      	mov	r4, r0
    this->pin = pin;
   d4ba4:	71c1      	strb	r1, [r0, #7]
    state = 0;
   d4ba6:	7183      	strb	r3, [r0, #6]
    if (digitalRead(pin)) {
   d4ba8:	b288      	uxth	r0, r1
   d4baa:	f001 fd8d 	bl	d66c8 <digitalRead>
   d4bae:	b108      	cbz	r0, d4bb4 <_ZN8Debounce6attachEi+0x16>
        state = _BV(DEBOUNCED_STATE) | _BV(UNSTABLE_STATE);
   d4bb0:	2303      	movs	r3, #3
   d4bb2:	71a3      	strb	r3, [r4, #6]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4bb4:	f000 fd16 	bl	d55e4 <HAL_Timer_Get_Milli_Seconds>
    }
#ifdef BOUNCE_LOCK_OUT
    previous_millis = 0;
#else
    previous_millis = millis();
   d4bb8:	6020      	str	r0, [r4, #0]
#endif
}
   d4bba:	bd10      	pop	{r4, pc}

000d4bbc <_ZN8Debounce6attachEi7PinMode>:

void Debounce::attach(int pin, PinMode mode){
   d4bbc:	b538      	push	{r3, r4, r5, lr}
   d4bbe:	460c      	mov	r4, r1
   d4bc0:	4605      	mov	r5, r0
  pinMode(pin, mode);
   d4bc2:	4611      	mov	r1, r2
   d4bc4:	b2a0      	uxth	r0, r4
   d4bc6:	f001 fd55 	bl	d6674 <pinMode>
  
  this->attach(pin);
   d4bca:	4621      	mov	r1, r4
   d4bcc:	4628      	mov	r0, r5
}
   d4bce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  this->attach(pin);
   d4bd2:	f7ff bfe4 	b.w	d4b9e <_ZN8Debounce6attachEi>

000d4bd6 <_ZN8Debounce6updateEv>:
{
    this->interval_millis = interval_millis;
}

bool Debounce::update()
{
   d4bd6:	b538      	push	{r3, r4, r5, lr}
   d4bd8:	4604      	mov	r4, r0
    }
    // return just the sate changed bit
    return state & _BV(STATE_CHANGED);
#else
    // Read the state of the switch in a temporary variable.
    bool currentState = digitalRead(pin);
   d4bda:	79c0      	ldrb	r0, [r0, #7]
   d4bdc:	f001 fd74 	bl	d66c8 <digitalRead>
    state &= ~_BV(STATE_CHANGED);
   d4be0:	79a5      	ldrb	r5, [r4, #6]
    bool currentState = digitalRead(pin);
   d4be2:	3800      	subs	r0, #0
    state &= ~_BV(STATE_CHANGED);
   d4be4:	f025 0308 	bic.w	r3, r5, #8
    bool currentState = digitalRead(pin);
   d4be8:	bf18      	it	ne
   d4bea:	2001      	movne	r0, #1

    // If the reading is different from last reading, reset the debounce counter
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   d4bec:	f3c5 0540 	ubfx	r5, r5, #1, #1
   d4bf0:	4285      	cmp	r5, r0
    state &= ~_BV(STATE_CHANGED);
   d4bf2:	71a3      	strb	r3, [r4, #6]
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   d4bf4:	d00a      	beq.n	d4c0c <_ZN8Debounce6updateEv+0x36>
   d4bf6:	f000 fcf5 	bl	d55e4 <HAL_Timer_Get_Milli_Seconds>
        previous_millis = millis();
        state ^= _BV(UNSTABLE_STATE);
   d4bfa:	79a3      	ldrb	r3, [r4, #6]
        previous_millis = millis();
   d4bfc:	6020      	str	r0, [r4, #0]
        state ^= _BV(UNSTABLE_STATE);
   d4bfe:	f083 0302 	eor.w	r3, r3, #2
            // We have passed the threshold time, so the input is now stable
            // If it is different from last state, set the STATE_CHANGED flag
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
                previous_millis = millis();
                state ^= _BV(DEBOUNCED_STATE);
                state |= _BV(STATE_CHANGED);
   d4c02:	71a3      	strb	r3, [r4, #6]
            }
        }

    return state & _BV(STATE_CHANGED);
   d4c04:	79a0      	ldrb	r0, [r4, #6]
#endif
}
   d4c06:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   d4c0a:	bd38      	pop	{r3, r4, r5, pc}
   d4c0c:	f000 fcea 	bl	d55e4 <HAL_Timer_Get_Milli_Seconds>
        if ( millis() - previous_millis >= interval_millis ) {
   d4c10:	6823      	ldr	r3, [r4, #0]
   d4c12:	1ac0      	subs	r0, r0, r3
   d4c14:	88a3      	ldrh	r3, [r4, #4]
   d4c16:	4298      	cmp	r0, r3
   d4c18:	d3f4      	bcc.n	d4c04 <_ZN8Debounce6updateEv+0x2e>
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
   d4c1a:	79a3      	ldrb	r3, [r4, #6]
   d4c1c:	f003 0301 	and.w	r3, r3, #1
   d4c20:	42ab      	cmp	r3, r5
   d4c22:	d0ef      	beq.n	d4c04 <_ZN8Debounce6updateEv+0x2e>
   d4c24:	f000 fcde 	bl	d55e4 <HAL_Timer_Get_Milli_Seconds>
                state ^= _BV(DEBOUNCED_STATE);
   d4c28:	79a3      	ldrb	r3, [r4, #6]
                previous_millis = millis();
   d4c2a:	6020      	str	r0, [r4, #0]
                state ^= _BV(DEBOUNCED_STATE);
   d4c2c:	f083 0301 	eor.w	r3, r3, #1
                state |= _BV(STATE_CHANGED);
   d4c30:	f043 0308 	orr.w	r3, r3, #8
   d4c34:	e7e5      	b.n	d4c02 <_ZN8Debounce6updateEv+0x2c>

000d4c36 <_ZN8Debounce4fellEv>:
    return ( state & _BV(DEBOUNCED_STATE) ) && ( state & _BV(STATE_CHANGED));
}

bool Debounce::fell()
{
    return !( state & _BV(DEBOUNCED_STATE) ) && ( state & _BV(STATE_CHANGED));
   d4c36:	7980      	ldrb	r0, [r0, #6]
   d4c38:	f000 0009 	and.w	r0, r0, #9
   d4c3c:	f1a0 0308 	sub.w	r3, r0, #8
   d4c40:	4258      	negs	r0, r3
   d4c42:	4158      	adcs	r0, r3
   d4c44:	4770      	bx	lr
	...

000d4c48 <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   d4c48:	b510      	push	{r4, lr}
   d4c4a:	4b04      	ldr	r3, [pc, #16]	; (d4c5c <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   d4c4c:	6003      	str	r3, [r0, #0]
   d4c4e:	4604      	mov	r4, r0
  if(buffer) {
   d4c50:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d4c52:	b108      	cbz	r0, d4c58 <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   d4c54:	f000 fea2 	bl	d599c <free>
    buffer = NULL;
  }
}
   d4c58:	4620      	mov	r0, r4
   d4c5a:	bd10      	pop	{r4, pc}
   d4c5c:	000d7c94 	.word	0x000d7c94

000d4c60 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   d4c60:	b510      	push	{r4, lr}
   d4c62:	4604      	mov	r4, r0
}
   d4c64:	f7ff fff0 	bl	d4c48 <_ZN16Adafruit_SSD1306D1Ev>
   d4c68:	4620      	mov	r0, r4
   d4c6a:	2150      	movs	r1, #80	; 0x50
   d4c6c:	f001 fd9b 	bl	d67a6 <_ZdlPvj>
   d4c70:	4620      	mov	r0, r4
   d4c72:	bd10      	pop	{r4, pc}

000d4c74 <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   d4c74:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d4c76:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   d4c78:	db4b      	blt.n	d4d12 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   d4c7a:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   d4c7e:	428c      	cmp	r4, r1
   d4c80:	dd47      	ble.n	d4d12 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   d4c82:	2a00      	cmp	r2, #0
   d4c84:	db45      	blt.n	d4d12 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   d4c86:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   d4c8a:	4294      	cmp	r4, r2
   d4c8c:	dd41      	ble.n	d4d12 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   d4c8e:	7e84      	ldrb	r4, [r0, #26]
   d4c90:	2c02      	cmp	r4, #2
   d4c92:	d01f      	beq.n	d4cd4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   d4c94:	2c03      	cmp	r4, #3
   d4c96:	d026      	beq.n	d4ce6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   d4c98:	2c01      	cmp	r4, #1
   d4c9a:	d104      	bne.n	d4ca6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   d4c9c:	8904      	ldrh	r4, [r0, #8]
   d4c9e:	43d2      	mvns	r2, r2
   d4ca0:	4414      	add	r4, r2
      break;
   d4ca2:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   d4ca4:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   d4ca6:	2b01      	cmp	r3, #1
   d4ca8:	d023      	beq.n	d4cf2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   d4caa:	2b02      	cmp	r3, #2
   d4cac:	d032      	beq.n	d4d14 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   d4cae:	bb83      	cbnz	r3, d4d12 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   d4cb0:	2a00      	cmp	r2, #0
   d4cb2:	4613      	mov	r3, r2
   d4cb4:	8904      	ldrh	r4, [r0, #8]
   d4cb6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d4cb8:	bfb8      	it	lt
   d4cba:	1dd3      	addlt	r3, r2, #7
   d4cbc:	10db      	asrs	r3, r3, #3
   d4cbe:	fb13 1104 	smlabb	r1, r3, r4, r1
   d4cc2:	f002 0207 	and.w	r2, r2, #7
   d4cc6:	2301      	movs	r3, #1
   d4cc8:	4093      	lsls	r3, r2
   d4cca:	5c42      	ldrb	r2, [r0, r1]
   d4ccc:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   d4cd0:	5442      	strb	r2, [r0, r1]
    }
  }
}
   d4cd2:	e01e      	b.n	d4d12 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   d4cd4:	8904      	ldrh	r4, [r0, #8]
   d4cd6:	43c9      	mvns	r1, r1
   d4cd8:	4421      	add	r1, r4
      y = HEIGHT - y - 1;
   d4cda:	8944      	ldrh	r4, [r0, #10]
   d4cdc:	43d2      	mvns	r2, r2
   d4cde:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   d4ce0:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   d4ce2:	b212      	sxth	r2, r2
      break;
   d4ce4:	e7df      	b.n	d4ca6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   d4ce6:	8944      	ldrh	r4, [r0, #10]
   d4ce8:	43c9      	mvns	r1, r1
   d4cea:	440c      	add	r4, r1
      break;
   d4cec:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   d4cee:	b222      	sxth	r2, r4
      break;
   d4cf0:	e7d9      	b.n	d4ca6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   d4cf2:	2a00      	cmp	r2, #0
   d4cf4:	8904      	ldrh	r4, [r0, #8]
   d4cf6:	4613      	mov	r3, r2
   d4cf8:	bfb8      	it	lt
   d4cfa:	1dd3      	addlt	r3, r2, #7
   d4cfc:	10db      	asrs	r3, r3, #3
   d4cfe:	fb13 1104 	smlabb	r1, r3, r4, r1
   d4d02:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d4d04:	f002 0007 	and.w	r0, r2, #7
   d4d08:	2201      	movs	r2, #1
   d4d0a:	4082      	lsls	r2, r0
   d4d0c:	5c58      	ldrb	r0, [r3, r1]
   d4d0e:	4302      	orrs	r2, r0
   d4d10:	545a      	strb	r2, [r3, r1]
}
   d4d12:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   d4d14:	2a00      	cmp	r2, #0
   d4d16:	4613      	mov	r3, r2
   d4d18:	8904      	ldrh	r4, [r0, #8]
   d4d1a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d4d1c:	bfb8      	it	lt
   d4d1e:	1dd3      	addlt	r3, r2, #7
   d4d20:	10db      	asrs	r3, r3, #3
   d4d22:	fb13 1104 	smlabb	r1, r3, r4, r1
   d4d26:	f002 0207 	and.w	r2, r2, #7
   d4d2a:	2301      	movs	r3, #1
   d4d2c:	fa03 f202 	lsl.w	r2, r3, r2
   d4d30:	5c43      	ldrb	r3, [r0, r1]
   d4d32:	405a      	eors	r2, r3
   d4d34:	e7cc      	b.n	d4cd0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>

000d4d36 <_ZN16Adafruit_SSD130610stopscrollEv.part.0>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   d4d36:	b510      	push	{r4, lr}
   d4d38:	4604      	mov	r4, r0
  TRANSACTION_START
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
  TRANSACTION_END
   d4d3a:	f990 0036 	ldrsb.w	r0, [r0, #54]	; 0x36
   d4d3e:	2101      	movs	r1, #1
   d4d40:	b280      	uxth	r0, r0
   d4d42:	f001 fca8 	bl	d6696 <digitalWrite>
   d4d46:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d4d48:	b118      	cbz	r0, d4d52 <_ZN16Adafruit_SSD130610stopscrollEv.part.0+0x1c>
}
   d4d4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  TRANSACTION_END
   d4d4e:	f000 be9c 	b.w	d5a8a <_ZN8SPIClass14endTransactionEv>
}
   d4d52:	bd10      	pop	{r4, pc}

000d4d54 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
   d4d54:	b570      	push	{r4, r5, r6, lr}
   d4d56:	4604      	mov	r4, r0
   d4d58:	461d      	mov	r5, r3
  wireClk(clkDuring), restoreClk(clkAfter) {
   d4d5a:	2600      	movs	r6, #0
   d4d5c:	f7ff fc26 	bl	d45ac <_ZN12Adafruit_GFXC1Ess>
   d4d60:	4b11      	ldr	r3, [pc, #68]	; (d4da8 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x54>)
   d4d62:	6023      	str	r3, [r4, #0]
   d4d64:	6266      	str	r6, [r4, #36]	; 0x24
  Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
   d4d66:	b915      	cbnz	r5, d4d6e <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
   d4d68:	f001 fcf0 	bl	d674c <_Z19__fetch_global_Wirev>
   d4d6c:	4605      	mov	r5, r0
  wireClk(clkDuring), restoreClk(clkAfter) {
   d4d6e:	23ff      	movs	r3, #255	; 0xff
   d4d70:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   d4d74:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   d4d78:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   d4d7c:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
  {
   d4d80:	4b0a      	ldr	r3, [pc, #40]	; (d4dac <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x58>)
   d4d82:	63a3      	str	r3, [r4, #56]	; 0x38
   d4d84:	2301      	movs	r3, #1
   d4d86:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   d4d8a:	9b05      	ldr	r3, [sp, #20]
   d4d8c:	64a3      	str	r3, [r4, #72]	; 0x48
   d4d8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d4d92:	9b06      	ldr	r3, [sp, #24]
   d4d94:	86a2      	strh	r2, [r4, #52]	; 0x34
   d4d96:	e9c4 560a 	strd	r5, r6, [r4, #40]	; 0x28
   d4d9a:	6426      	str	r6, [r4, #64]	; 0x40
   d4d9c:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
   d4da0:	64e3      	str	r3, [r4, #76]	; 0x4c
}
   d4da2:	4620      	mov	r0, r4
   d4da4:	bd70      	pop	{r4, r5, r6, pc}
   d4da6:	bf00      	nop
   d4da8:	000d7c94 	.word	0x000d7c94
   d4dac:	000d77e0 	.word	0x000d77e0

000d4db0 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   d4db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4db2:	4604      	mov	r4, r0
  if(wire) { // I2C
   d4db4:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   d4db6:	460d      	mov	r5, r1
  if(wire) { // I2C
   d4db8:	b190      	cbz	r0, d4de0 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   d4dba:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d4dbe:	f001 fb23 	bl	d6408 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   d4dc2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4dc4:	6803      	ldr	r3, [r0, #0]
   d4dc6:	2100      	movs	r1, #0
   d4dc8:	689b      	ldr	r3, [r3, #8]
   d4dca:	4798      	blx	r3
    WIRE_WRITE(c);
   d4dcc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4dce:	6803      	ldr	r3, [r0, #0]
   d4dd0:	4629      	mov	r1, r5
   d4dd2:	689b      	ldr	r3, [r3, #8]
   d4dd4:	4798      	blx	r3
    wire->endTransmission();
   d4dd6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   d4dd8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   d4ddc:	f001 bb1b 	b.w	d6416 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   d4de0:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   d4de4:	4601      	mov	r1, r0
   d4de6:	b298      	uxth	r0, r3
   d4de8:	f001 fc55 	bl	d6696 <digitalWrite>
  if(spi) {
   d4dec:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d4dee:	b120      	cbz	r0, d4dfa <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   d4df0:	4629      	mov	r1, r5
}
   d4df2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   d4df6:	f000 becf 	b.w	d5b98 <_ZN8SPIClass8transferEh>
   d4dfa:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d4dfc:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   d4dfe:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d4e02:	ea05 0107 	and.w	r1, r5, r7
   d4e06:	b280      	uxth	r0, r0
   d4e08:	f001 fc45 	bl	d6696 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   d4e0c:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d4e10:	2101      	movs	r1, #1
   d4e12:	b280      	uxth	r0, r0
   d4e14:	f001 fc3f 	bl	d6696 <digitalWrite>
      digitalWrite(clkPin , LOW);
   d4e18:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d4e1c:	2100      	movs	r1, #0
   d4e1e:	b280      	uxth	r0, r0
   d4e20:	f001 fc39 	bl	d6696 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d4e24:	3e01      	subs	r6, #1
   d4e26:	ea4f 0757 	mov.w	r7, r7, lsr #1
   d4e2a:	d1e8      	bne.n	d4dfe <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   d4e2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4e2e <_ZN16Adafruit_SSD130613invertDisplayEb>:
void Adafruit_SSD1306::invertDisplay(boolean i) {
   d4e2e:	b538      	push	{r3, r4, r5, lr}
   d4e30:	4604      	mov	r4, r0
  TRANSACTION_START
   d4e32:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   d4e34:	460d      	mov	r5, r1
  TRANSACTION_START
   d4e36:	b180      	cbz	r0, d4e5a <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   d4e38:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d4e3a:	f001 fad7 	bl	d63ec <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   d4e3e:	2d00      	cmp	r5, #0
   d4e40:	4620      	mov	r0, r4
   d4e42:	bf14      	ite	ne
   d4e44:	21a7      	movne	r1, #167	; 0xa7
   d4e46:	21a6      	moveq	r1, #166	; 0xa6
   d4e48:	f7ff ffb2 	bl	d4db0 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   d4e4c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4e4e:	b188      	cbz	r0, d4e74 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   d4e50:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   d4e52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4e56:	f001 bac9 	b.w	d63ec <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   d4e5a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d4e5c:	b118      	cbz	r0, d4e66 <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   d4e5e:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d4e62:	f000 fe2b 	bl	d5abc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   d4e66:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d4e6a:	2100      	movs	r1, #0
   d4e6c:	b280      	uxth	r0, r0
   d4e6e:	f001 fc12 	bl	d6696 <digitalWrite>
   d4e72:	e7e4      	b.n	d4e3e <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
   d4e74:	4620      	mov	r0, r4
}
   d4e76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4e7a:	f7ff bf5c 	b.w	d4d36 <_ZN16Adafruit_SSD130610stopscrollEv.part.0>

000d4e7e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   d4e7e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d4e82:	4604      	mov	r4, r0
  if(wire) { // I2C
   d4e84:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   d4e86:	460d      	mov	r5, r1
  if(wire) { // I2C
   d4e88:	188f      	adds	r7, r1, r2
   d4e8a:	b340      	cbz	r0, d4ede <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   d4e8c:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d4e90:	f001 faba 	bl	d6408 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   d4e94:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4e96:	6803      	ldr	r3, [r0, #0]
   d4e98:	2100      	movs	r1, #0
   d4e9a:	689b      	ldr	r3, [r3, #8]
   d4e9c:	4798      	blx	r3
    uint8_t bytesOut = 1;
   d4e9e:	2601      	movs	r6, #1
    while(n--) {
   d4ea0:	42bd      	cmp	r5, r7
   d4ea2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4ea4:	d017      	beq.n	d4ed6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   d4ea6:	2e1f      	cmp	r6, #31
   d4ea8:	d90c      	bls.n	d4ec4 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   d4eaa:	f001 fab4 	bl	d6416 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   d4eae:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d4eb2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4eb4:	f001 faa8 	bl	d6408 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   d4eb8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4eba:	6803      	ldr	r3, [r0, #0]
   d4ebc:	2100      	movs	r1, #0
   d4ebe:	689b      	ldr	r3, [r3, #8]
   d4ec0:	4798      	blx	r3
        bytesOut = 1;
   d4ec2:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   d4ec4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4ec6:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4eca:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   d4ecc:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   d4ece:	689b      	ldr	r3, [r3, #8]
   d4ed0:	4798      	blx	r3
      bytesOut++;
   d4ed2:	b2f6      	uxtb	r6, r6
    while(n--) {
   d4ed4:	e7e4      	b.n	d4ea0 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   d4ed6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   d4eda:	f001 ba9c 	b.w	d6416 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   d4ede:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   d4ee2:	4601      	mov	r1, r0
   d4ee4:	b298      	uxth	r0, r3
   d4ee6:	f001 fbd6 	bl	d6696 <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   d4eea:	42af      	cmp	r7, r5
   d4eec:	d022      	beq.n	d4f34 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   d4eee:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   d4ef0:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   d4ef4:	b118      	cbz	r0, d4efe <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   d4ef6:	4649      	mov	r1, r9
   d4ef8:	f000 fe4e 	bl	d5b98 <_ZN8SPIClass8transferEh>
   d4efc:	e7f5      	b.n	d4eea <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   d4efe:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d4f00:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   d4f04:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d4f08:	ea09 0108 	and.w	r1, r9, r8
   d4f0c:	b280      	uxth	r0, r0
   d4f0e:	f001 fbc2 	bl	d6696 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   d4f12:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d4f16:	2101      	movs	r1, #1
   d4f18:	b280      	uxth	r0, r0
   d4f1a:	f001 fbbc 	bl	d6696 <digitalWrite>
      digitalWrite(clkPin , LOW);
   d4f1e:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d4f22:	2100      	movs	r1, #0
   d4f24:	b280      	uxth	r0, r0
   d4f26:	f001 fbb6 	bl	d6696 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d4f2a:	3e01      	subs	r6, #1
   d4f2c:	ea4f 0858 	mov.w	r8, r8, lsr #1
   d4f30:	d1e8      	bne.n	d4f04 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   d4f32:	e7da      	b.n	d4eea <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   d4f34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d4f38 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   d4f38:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   d4f3c:	1dda      	adds	r2, r3, #7
   d4f3e:	bf48      	it	mi
   d4f40:	f103 020e 	addmi.w	r2, r3, #14
   d4f44:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   d4f48:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d4f4a:	10d2      	asrs	r2, r2, #3
   d4f4c:	435a      	muls	r2, r3
   d4f4e:	2100      	movs	r1, #0
   d4f50:	f002 b8fe 	b.w	d7150 <memset>

000d4f54 <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   d4f54:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d4f58:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   d4f5a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   d4f5c:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   d4f60:	4604      	mov	r4, r0
   d4f62:	460f      	mov	r7, r1
   d4f64:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   d4f66:	b1b3      	cbz	r3, d4f96 <_ZN16Adafruit_SSD13065beginEhhbb+0x42>
  clearDisplay();
   d4f68:	4620      	mov	r0, r4
   d4f6a:	f7ff ffe5 	bl	d4f38 <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   d4f6e:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
   d4f72:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   d4f76:	2820      	cmp	r0, #32
   d4f78:	dc1f      	bgt.n	d4fba <_ZN16Adafruit_SSD13065beginEhhbb+0x66>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   d4f7a:	2320      	movs	r3, #32
   d4f7c:	2201      	movs	r2, #1
   d4f7e:	e9cd 3201 	strd	r3, r2, [sp, #4]
   d4f82:	3820      	subs	r0, #32
   d4f84:	2373      	movs	r3, #115	; 0x73
   d4f86:	3973      	subs	r1, #115	; 0x73
   d4f88:	9300      	str	r3, [sp, #0]
   d4f8a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   d4f8e:	4b89      	ldr	r3, [pc, #548]	; (d51b4 <_ZN16Adafruit_SSD13065beginEhhbb+0x260>)
   d4f90:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   d4f94:	e01f      	b.n	d4fd6 <_ZN16Adafruit_SSD13065beginEhhbb+0x82>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   d4f96:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   d4f9a:	1dd8      	adds	r0, r3, #7
   d4f9c:	bf48      	it	mi
   d4f9e:	f103 000e 	addmi.w	r0, r3, #14
   d4fa2:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   d4fa6:	10c0      	asrs	r0, r0, #3
   d4fa8:	4358      	muls	r0, r3
   d4faa:	f000 fcef 	bl	d598c <malloc>
   d4fae:	62e0      	str	r0, [r4, #44]	; 0x2c
   d4fb0:	2800      	cmp	r0, #0
   d4fb2:	d1d9      	bne.n	d4f68 <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   d4fb4:	b004      	add	sp, #16
   d4fb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
   d4fba:	2340      	movs	r3, #64	; 0x40
   d4fbc:	f04f 0c01 	mov.w	ip, #1
   d4fc0:	e9cd 3c01 	strd	r3, ip, [sp, #4]
   d4fc4:	2352      	movs	r3, #82	; 0x52
   d4fc6:	3840      	subs	r0, #64	; 0x40
   d4fc8:	3952      	subs	r1, #82	; 0x52
   d4fca:	9300      	str	r3, [sp, #0]
   d4fcc:	4b7a      	ldr	r3, [pc, #488]	; (d51b8 <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   d4fce:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   d4fd2:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   d4fd6:	f340 024f 	sbfx	r2, r0, #1, #16
   d4fda:	f341 014f 	sbfx	r1, r1, #1, #16
   d4fde:	4620      	mov	r0, r4
   d4fe0:	f7ff fafa 	bl	d45d8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   d4fe4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   d4fe6:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   d4fea:	2800      	cmp	r0, #0
   d4fec:	d078      	beq.n	d50e0 <_ZN16Adafruit_SSD13065beginEhhbb+0x18c>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   d4fee:	2d00      	cmp	r5, #0
   d4ff0:	d174      	bne.n	d50dc <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   d4ff2:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   d4ff6:	2b20      	cmp	r3, #32
   d4ff8:	bf0c      	ite	eq
   d4ffa:	253c      	moveq	r5, #60	; 0x3c
   d4ffc:	253d      	movne	r5, #61	; 0x3d
   d4ffe:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   d5002:	f1b8 0f00 	cmp.w	r8, #0
   d5006:	d001      	beq.n	d500c <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
   d5008:	f001 f9f4 	bl	d63f4 <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   d500c:	b1fe      	cbz	r6, d504e <_ZN16Adafruit_SSD13065beginEhhbb+0xfa>
   d500e:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d5012:	2800      	cmp	r0, #0
   d5014:	db1b      	blt.n	d504e <_ZN16Adafruit_SSD13065beginEhhbb+0xfa>
    pinMode(     rstPin, OUTPUT);
   d5016:	2101      	movs	r1, #1
   d5018:	b280      	uxth	r0, r0
   d501a:	f001 fb2b 	bl	d6674 <pinMode>
    digitalWrite(rstPin, HIGH);
   d501e:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d5022:	2101      	movs	r1, #1
   d5024:	b280      	uxth	r0, r0
   d5026:	f001 fb36 	bl	d6696 <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   d502a:	2001      	movs	r0, #1
   d502c:	f000 ff7e 	bl	d5f2c <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   d5030:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d5034:	2100      	movs	r1, #0
   d5036:	b280      	uxth	r0, r0
   d5038:	f001 fb2d 	bl	d6696 <digitalWrite>
    delay(10);                  // Wait 10 ms
   d503c:	200a      	movs	r0, #10
   d503e:	f000 ff75 	bl	d5f2c <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   d5042:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d5046:	2101      	movs	r1, #1
   d5048:	b280      	uxth	r0, r0
   d504a:	f001 fb24 	bl	d6696 <digitalWrite>
  TRANSACTION_START
   d504e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5050:	2800      	cmp	r0, #0
   d5052:	d074      	beq.n	d513e <_ZN16Adafruit_SSD13065beginEhhbb+0x1ea>
   d5054:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d5056:	f001 f9c9 	bl	d63ec <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   d505a:	2204      	movs	r2, #4
   d505c:	4957      	ldr	r1, [pc, #348]	; (d51bc <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   d505e:	4620      	mov	r0, r4
   d5060:	f7ff ff0d 	bl	d4e7e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   d5064:	7aa1      	ldrb	r1, [r4, #10]
   d5066:	3901      	subs	r1, #1
   d5068:	b2c9      	uxtb	r1, r1
   d506a:	4620      	mov	r0, r4
   d506c:	f7ff fea0 	bl	d4db0 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   d5070:	4953      	ldr	r1, [pc, #332]	; (d51c0 <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   d5072:	2204      	movs	r2, #4
   d5074:	4620      	mov	r0, r4
   d5076:	f7ff ff02 	bl	d4e7e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   d507a:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d507e:	2b01      	cmp	r3, #1
   d5080:	bf0c      	ite	eq
   d5082:	2110      	moveq	r1, #16
   d5084:	2114      	movne	r1, #20
   d5086:	4620      	mov	r0, r4
   d5088:	f7ff fe92 	bl	d4db0 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   d508c:	2204      	movs	r2, #4
   d508e:	494d      	ldr	r1, [pc, #308]	; (d51c4 <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   d5090:	4620      	mov	r0, r4
   d5092:	f7ff fef4 	bl	d4e7e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   d5096:	68a3      	ldr	r3, [r4, #8]
   d5098:	4a4b      	ldr	r2, [pc, #300]	; (d51c8 <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   d509a:	4293      	cmp	r3, r2
   d509c:	d15c      	bne.n	d5158 <_ZN16Adafruit_SSD13065beginEhhbb+0x204>
    ssd1306_commandList(init4a, sizeof(init4a));
   d509e:	494b      	ldr	r1, [pc, #300]	; (d51cc <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   d50a0:	2204      	movs	r2, #4
   d50a2:	4620      	mov	r0, r4
   d50a4:	f7ff feeb 	bl	d4e7e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   d50a8:	21d9      	movs	r1, #217	; 0xd9
   d50aa:	4620      	mov	r0, r4
   d50ac:	f7ff fe80 	bl	d4db0 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   d50b0:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d50b4:	2b01      	cmp	r3, #1
   d50b6:	bf0c      	ite	eq
   d50b8:	2122      	moveq	r1, #34	; 0x22
   d50ba:	21f1      	movne	r1, #241	; 0xf1
   d50bc:	4620      	mov	r0, r4
   d50be:	f7ff fe77 	bl	d4db0 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   d50c2:	4620      	mov	r0, r4
   d50c4:	4942      	ldr	r1, [pc, #264]	; (d51d0 <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   d50c6:	2206      	movs	r2, #6
   d50c8:	f7ff fed9 	bl	d4e7e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   d50cc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d50ce:	2800      	cmp	r0, #0
   d50d0:	d063      	beq.n	d519a <_ZN16Adafruit_SSD13065beginEhhbb+0x246>
   d50d2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   d50d4:	f001 f98a 	bl	d63ec <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   d50d8:	2001      	movs	r0, #1
   d50da:	e76b      	b.n	d4fb4 <_ZN16Adafruit_SSD13065beginEhhbb+0x60>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   d50dc:	b26d      	sxtb	r5, r5
   d50de:	e78e      	b.n	d4ffe <_ZN16Adafruit_SSD13065beginEhhbb+0xaa>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   d50e0:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   d50e4:	2101      	movs	r1, #1
   d50e6:	b280      	uxth	r0, r0
   d50e8:	f001 fac4 	bl	d6674 <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   d50ec:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d50f0:	2101      	movs	r1, #1
   d50f2:	b280      	uxth	r0, r0
   d50f4:	f001 fabe 	bl	d6674 <pinMode>
    SSD1306_DESELECT
   d50f8:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d50fc:	2101      	movs	r1, #1
   d50fe:	b280      	uxth	r0, r0
   d5100:	f001 fac9 	bl	d6696 <digitalWrite>
    if(spi) { // Hardware SPI
   d5104:	6a65      	ldr	r5, [r4, #36]	; 0x24
   d5106:	b13d      	cbz	r5, d5118 <_ZN16Adafruit_SSD13065beginEhhbb+0x1c4>
      if(periphBegin) spi->begin();
   d5108:	f1b8 0f00 	cmp.w	r8, #0
   d510c:	f43f af7e 	beq.w	d500c <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
   d5110:	4628      	mov	r0, r5
   d5112:	f000 fca9 	bl	d5a68 <_ZN8SPIClass5beginEv>
   d5116:	e779      	b.n	d500c <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   d5118:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d511c:	2101      	movs	r1, #1
   d511e:	b280      	uxth	r0, r0
   d5120:	f001 faa8 	bl	d6674 <pinMode>
      pinMode(clkPin , OUTPUT);
   d5124:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d5128:	2101      	movs	r1, #1
   d512a:	b280      	uxth	r0, r0
   d512c:	f001 faa2 	bl	d6674 <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   d5130:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d5134:	4629      	mov	r1, r5
   d5136:	b280      	uxth	r0, r0
   d5138:	f001 faad 	bl	d6696 <digitalWrite>
   d513c:	e766      	b.n	d500c <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
  TRANSACTION_START
   d513e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d5140:	b118      	cbz	r0, d514a <_ZN16Adafruit_SSD13065beginEhhbb+0x1f6>
   d5142:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d5146:	f000 fcb9 	bl	d5abc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   d514a:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d514e:	2100      	movs	r1, #0
   d5150:	b280      	uxth	r0, r0
   d5152:	f001 faa0 	bl	d6696 <digitalWrite>
   d5156:	e780      	b.n	d505a <_ZN16Adafruit_SSD13065beginEhhbb+0x106>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   d5158:	4a1e      	ldr	r2, [pc, #120]	; (d51d4 <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   d515a:	4293      	cmp	r3, r2
   d515c:	d10e      	bne.n	d517c <_ZN16Adafruit_SSD13065beginEhhbb+0x228>
    ssd1306_commandList(init4b, sizeof(init4b));
   d515e:	491e      	ldr	r1, [pc, #120]	; (d51d8 <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   d5160:	2203      	movs	r2, #3
   d5162:	4620      	mov	r0, r4
   d5164:	f7ff fe8b 	bl	d4e7e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   d5168:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d516c:	2b01      	cmp	r3, #1
   d516e:	bf0c      	ite	eq
   d5170:	219f      	moveq	r1, #159	; 0x9f
   d5172:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   d5174:	4620      	mov	r0, r4
   d5176:	f7ff fe1b 	bl	d4db0 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   d517a:	e795      	b.n	d50a8 <_ZN16Adafruit_SSD13065beginEhhbb+0x154>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   d517c:	4a17      	ldr	r2, [pc, #92]	; (d51dc <_ZN16Adafruit_SSD13065beginEhhbb+0x288>)
   d517e:	4293      	cmp	r3, r2
   d5180:	d192      	bne.n	d50a8 <_ZN16Adafruit_SSD13065beginEhhbb+0x154>
    ssd1306_commandList(init4c, sizeof(init4c));
   d5182:	4917      	ldr	r1, [pc, #92]	; (d51e0 <_ZN16Adafruit_SSD13065beginEhhbb+0x28c>)
   d5184:	2203      	movs	r2, #3
   d5186:	4620      	mov	r0, r4
   d5188:	f7ff fe79 	bl	d4e7e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   d518c:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d5190:	2b01      	cmp	r3, #1
   d5192:	bf0c      	ite	eq
   d5194:	2110      	moveq	r1, #16
   d5196:	21af      	movne	r1, #175	; 0xaf
   d5198:	e7ec      	b.n	d5174 <_ZN16Adafruit_SSD13065beginEhhbb+0x220>
  TRANSACTION_END
   d519a:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d519e:	2101      	movs	r1, #1
   d51a0:	b280      	uxth	r0, r0
   d51a2:	f001 fa78 	bl	d6696 <digitalWrite>
   d51a6:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d51a8:	2800      	cmp	r0, #0
   d51aa:	d095      	beq.n	d50d8 <_ZN16Adafruit_SSD13065beginEhhbb+0x184>
   d51ac:	f000 fc6d 	bl	d5a8a <_ZN8SPIClass14endTransactionEv>
   d51b0:	e792      	b.n	d50d8 <_ZN16Adafruit_SSD13065beginEhhbb+0x184>
   d51b2:	bf00      	nop
   d51b4:	000d7aac 	.word	0x000d7aac
   d51b8:	000d77ec 	.word	0x000d77ec
   d51bc:	000d7cf4 	.word	0x000d7cf4
   d51c0:	000d7cf8 	.word	0x000d7cf8
   d51c4:	000d7cfc 	.word	0x000d7cfc
   d51c8:	00200080 	.word	0x00200080
   d51cc:	000d7d06 	.word	0x000d7d06
   d51d0:	000d7d00 	.word	0x000d7d00
   d51d4:	00400080 	.word	0x00400080
   d51d8:	000d7d0a 	.word	0x000d7d0a
   d51dc:	00100060 	.word	0x00100060
   d51e0:	000d7d0d 	.word	0x000d7d0d

000d51e4 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d51e4:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   d51e6:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d51e8:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   d51ec:	db3d      	blt.n	d526a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d51ee:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d51f2:	4294      	cmp	r4, r2
   d51f4:	dd39      	ble.n	d526a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   d51f6:	2900      	cmp	r1, #0
      w += x;
   d51f8:	bfbe      	ittt	lt
   d51fa:	185b      	addlt	r3, r3, r1
   d51fc:	b21b      	sxthlt	r3, r3
      x  = 0;
   d51fe:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   d5200:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d5204:	18ce      	adds	r6, r1, r3
   d5206:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   d5208:	bfc4      	itt	gt
   d520a:	1a63      	subgt	r3, r4, r1
   d520c:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   d520e:	2b00      	cmp	r3, #0
   d5210:	dd2b      	ble.n	d526a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   d5212:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d5214:	10d6      	asrs	r6, r2, #3
   d5216:	fb14 1106 	smlabb	r1, r4, r6, r1
   d521a:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   d521c:	f002 0007 	and.w	r0, r2, #7
   d5220:	2201      	movs	r2, #1
   d5222:	4082      	lsls	r2, r0
      switch(color) {
   d5224:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   d5226:	b2d2      	uxtb	r2, r2
      switch(color) {
   d5228:	d016      	beq.n	d5258 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   d522a:	2d02      	cmp	r5, #2
   d522c:	d00b      	beq.n	d5246 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   d522e:	b9e5      	cbnz	r5, d526a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   d5230:	43d2      	mvns	r2, r2
   d5232:	b2d2      	uxtb	r2, r2
   d5234:	440b      	add	r3, r1
   d5236:	4299      	cmp	r1, r3
   d5238:	d017      	beq.n	d526a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d523a:	f811 0b01 	ldrb.w	r0, [r1], #1
   d523e:	4010      	ands	r0, r2
   d5240:	f801 0c01 	strb.w	r0, [r1, #-1]
   d5244:	e7f7      	b.n	d5236 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   d5246:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   d5248:	4299      	cmp	r1, r3
   d524a:	d00e      	beq.n	d526a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d524c:	f811 0b01 	ldrb.w	r0, [r1], #1
   d5250:	4050      	eors	r0, r2
   d5252:	f801 0c01 	strb.w	r0, [r1, #-1]
   d5256:	e7f7      	b.n	d5248 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   d5258:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   d525a:	4299      	cmp	r1, r3
   d525c:	d005      	beq.n	d526a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d525e:	f811 0b01 	ldrb.w	r0, [r1], #1
   d5262:	4310      	orrs	r0, r2
   d5264:	f801 0c01 	strb.w	r0, [r1, #-1]
   d5268:	e7f7      	b.n	d525a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   d526a:	bd70      	pop	{r4, r5, r6, pc}

000d526c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   d526c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   d526e:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   d5270:	f8bd 6014 	ldrh.w	r6, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   d5274:	db76      	blt.n	d5364 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   d5276:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   d527a:	42a9      	cmp	r1, r5
   d527c:	da72      	bge.n	d5364 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   d527e:	2a00      	cmp	r2, #0
      __h += __y;
   d5280:	bfbc      	itt	lt
   d5282:	18d2      	addlt	r2, r2, r3
   d5284:	b213      	sxthlt	r3, r2
    if((__y + __h) > HEIGHT) { // Clip bottom
   d5286:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
      __y = 0;
   d528a:	bfb8      	it	lt
   d528c:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   d528e:	18d7      	adds	r7, r2, r3
   d5290:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   d5292:	bfc4      	itt	gt
   d5294:	1aa3      	subgt	r3, r4, r2
   d5296:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   d5298:	2b00      	cmp	r3, #0
   d529a:	dd63      	ble.n	d5364 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   d529c:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   d52a0:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   d52a2:	fb15 1104 	smlabb	r1, r5, r4, r1
      if(mod) {
   d52a6:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   d52aa:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   d52ac:	eb07 0401 	add.w	r4, r7, r1
      if(mod) {
   d52b0:	d023      	beq.n	d52fa <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8e>
        mod = 8 - mod;
   d52b2:	f1c2 0208 	rsb	r2, r2, #8
   d52b6:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   d52b8:	4d2c      	ldr	r5, [pc, #176]	; (d536c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   d52ba:	4293      	cmp	r3, r2
   d52bc:	bf3c      	itt	cc
   d52be:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   d52c2:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   d52c6:	5cad      	ldrb	r5, [r5, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   d52c8:	bf3c      	itt	cc
   d52ca:	fa4c fc0e 	asrcc.w	ip, ip, lr
   d52ce:	ea0c 0505 	andcc.w	r5, ip, r5
        switch(color) {
   d52d2:	2e01      	cmp	r6, #1
   d52d4:	d007      	beq.n	d52e6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x7a>
   d52d6:	2e02      	cmp	r6, #2
   d52d8:	d02e      	beq.n	d5338 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xcc>
   d52da:	b94e      	cbnz	r6, d52f0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x84>
         case BLACK:   *pBuf &= ~mask; break;
   d52dc:	f817 c001 	ldrb.w	ip, [r7, r1]
   d52e0:	ea2c 0505 	bic.w	r5, ip, r5
   d52e4:	e003      	b.n	d52ee <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case WHITE:   *pBuf |=  mask; break;
   d52e6:	f817 c001 	ldrb.w	ip, [r7, r1]
   d52ea:	ea45 050c 	orr.w	r5, r5, ip
         case INVERSE: *pBuf ^=  mask; break;
   d52ee:	547d      	strb	r5, [r7, r1]
      if(h >= mod) { // More to go?
   d52f0:	4293      	cmp	r3, r2
   d52f2:	d337      	bcc.n	d5364 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   d52f4:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   d52f8:	440c      	add	r4, r1
        h -= mod;
   d52fa:	1a9a      	subs	r2, r3, r2
   d52fc:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   d52fe:	2a07      	cmp	r2, #7
   d5300:	d90e      	bls.n	d5320 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb4>
          if(color == INVERSE) {
   d5302:	2e02      	cmp	r6, #2
   d5304:	d11d      	bne.n	d5342 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd6>
   d5306:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   d5308:	7821      	ldrb	r1, [r4, #0]
   d530a:	43c9      	mvns	r1, r1
   d530c:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   d530e:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   d5310:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   d5314:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   d5316:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   d5318:	440c      	add	r4, r1
            } while(h >= 8);
   d531a:	d8f5      	bhi.n	d5308 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9c>
   d531c:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   d5320:	b302      	cbz	r2, d5364 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   d5322:	4b13      	ldr	r3, [pc, #76]	; (d5370 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   d5324:	2e01      	cmp	r6, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   d5326:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   d5328:	d019      	beq.n	d535e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   d532a:	2e02      	cmp	r6, #2
   d532c:	d01b      	beq.n	d5366 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   d532e:	b9ce      	cbnz	r6, d5364 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   d5330:	7822      	ldrb	r2, [r4, #0]
   d5332:	ea22 0303 	bic.w	r3, r2, r3
   d5336:	e014      	b.n	d5362 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   d5338:	f817 c001 	ldrb.w	ip, [r7, r1]
   d533c:	ea85 050c 	eor.w	r5, r5, ip
   d5340:	e7d5      	b.n	d52ee <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
            uint8_t val = (color != BLACK) ? 255 : 0;
   d5342:	2e00      	cmp	r6, #0
   d5344:	bf14      	ite	ne
   d5346:	25ff      	movne	r5, #255	; 0xff
   d5348:	2500      	moveq	r5, #0
   d534a:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   d534c:	7025      	strb	r5, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   d534e:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   d5350:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   d5354:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   d5356:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   d5358:	440c      	add	r4, r1
            } while(h >= 8);
   d535a:	d8f7      	bhi.n	d534c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   d535c:	e7de      	b.n	d531c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb0>
           case WHITE:   *pBuf |=  mask; break;
   d535e:	7822      	ldrb	r2, [r4, #0]
   d5360:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   d5362:	7023      	strb	r3, [r4, #0]
}
   d5364:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   d5366:	7822      	ldrb	r2, [r4, #0]
   d5368:	4053      	eors	r3, r2
   d536a:	e7fa      	b.n	d5362 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   d536c:	000d7ce4 	.word	0x000d7ce4
   d5370:	000d7cec 	.word	0x000d7cec

000d5374 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d5374:	b470      	push	{r4, r5, r6}
   d5376:	4614      	mov	r4, r2
  switch(rotation) {
   d5378:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d537a:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   d537e:	2a02      	cmp	r2, #2
   d5380:	d00d      	beq.n	d539e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   d5382:	2a03      	cmp	r2, #3
   d5384:	d018      	beq.n	d53b8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   d5386:	2a01      	cmp	r2, #1
   d5388:	d111      	bne.n	d53ae <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   d538a:	8902      	ldrh	r2, [r0, #8]
   d538c:	43e4      	mvns	r4, r4
   d538e:	4414      	add	r4, r2
   d5390:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   d5392:	9603      	str	r6, [sp, #12]
   d5394:	460a      	mov	r2, r1
   d5396:	4621      	mov	r1, r4
}
   d5398:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   d539a:	f7ff bf67 	b.w	d526c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   d539e:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   d53a0:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   d53a2:	43e4      	mvns	r4, r4
    x -= (w-1);
   d53a4:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   d53a6:	4414      	add	r4, r2
    x -= (w-1);
   d53a8:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   d53aa:	b224      	sxth	r4, r4
    x -= (w-1);
   d53ac:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   d53ae:	9603      	str	r6, [sp, #12]
   d53b0:	4622      	mov	r2, r4
}
   d53b2:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   d53b4:	f7ff bf16 	b.w	d51e4 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   d53b8:	8945      	ldrh	r5, [r0, #10]
   d53ba:	4419      	add	r1, r3
   d53bc:	1a69      	subs	r1, r5, r1
   d53be:	b209      	sxth	r1, r1
    break;
   d53c0:	e7e7      	b.n	d5392 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000d53c2 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   d53c2:	b430      	push	{r4, r5}
   d53c4:	4614      	mov	r4, r2
  switch(rotation) {
   d53c6:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   d53c8:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   d53cc:	2a02      	cmp	r2, #2
   d53ce:	d00d      	beq.n	d53ec <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   d53d0:	2a03      	cmp	r2, #3
   d53d2:	d018      	beq.n	d5406 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   d53d4:	2a01      	cmp	r2, #1
   d53d6:	d111      	bne.n	d53fc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   d53d8:	18e2      	adds	r2, r4, r3
   d53da:	8904      	ldrh	r4, [r0, #8]
   d53dc:	1aa4      	subs	r4, r4, r2
   d53de:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   d53e0:	9502      	str	r5, [sp, #8]
   d53e2:	460a      	mov	r2, r1
   d53e4:	4621      	mov	r1, r4
}
   d53e6:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   d53e8:	f7ff befc 	b.w	d51e4 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   d53ec:	8902      	ldrh	r2, [r0, #8]
   d53ee:	43c9      	mvns	r1, r1
   d53f0:	4411      	add	r1, r2
    y -= (h-1);
   d53f2:	18e2      	adds	r2, r4, r3
   d53f4:	8944      	ldrh	r4, [r0, #10]
   d53f6:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   d53f8:	b209      	sxth	r1, r1
    y -= (h-1);
   d53fa:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   d53fc:	9502      	str	r5, [sp, #8]
   d53fe:	4622      	mov	r2, r4
}
   d5400:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   d5402:	f7ff bf33 	b.w	d526c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   d5406:	8942      	ldrh	r2, [r0, #10]
   d5408:	43c9      	mvns	r1, r1
   d540a:	4411      	add	r1, r2
   d540c:	b209      	sxth	r1, r1
    break;
   d540e:	e7e7      	b.n	d53e0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000d5410 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   d5410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5414:	4604      	mov	r4, r0
  TRANSACTION_START
   d5416:	6a80      	ldr	r0, [r0, #40]	; 0x28
   d5418:	2800      	cmp	r0, #0
   d541a:	d042      	beq.n	d54a2 <_ZN16Adafruit_SSD13067displayEv+0x92>
   d541c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d541e:	f000 ffe5 	bl	d63ec <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   d5422:	4947      	ldr	r1, [pc, #284]	; (d5540 <_ZN16Adafruit_SSD13067displayEv+0x130>)
   d5424:	2205      	movs	r2, #5
   d5426:	4620      	mov	r0, r4
   d5428:	f7ff fd29 	bl	d4e7e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   d542c:	7a21      	ldrb	r1, [r4, #8]
   d542e:	3901      	subs	r1, #1
   d5430:	4620      	mov	r0, r4
   d5432:	b2c9      	uxtb	r1, r1
   d5434:	f7ff fcbc 	bl	d4db0 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   d5438:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   d543c:	1dde      	adds	r6, r3, #7
   d543e:	bf48      	it	mi
   d5440:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   d5444:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   d5448:	8923      	ldrh	r3, [r4, #8]
   d544a:	10f6      	asrs	r6, r6, #3
   d544c:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   d5450:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   d5454:	2800      	cmp	r0, #0
   d5456:	d03a      	beq.n	d54ce <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   d5458:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d545c:	f000 ffd4 	bl	d6408 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   d5460:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5462:	6803      	ldr	r3, [r0, #0]
   d5464:	2140      	movs	r1, #64	; 0x40
   d5466:	689b      	ldr	r3, [r3, #8]
   d5468:	4798      	blx	r3
    uint8_t bytesOut = 1;
   d546a:	2701      	movs	r7, #1
    while(count--) {
   d546c:	42b5      	cmp	r5, r6
   d546e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5470:	d024      	beq.n	d54bc <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   d5472:	2f1f      	cmp	r7, #31
   d5474:	d90c      	bls.n	d5490 <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   d5476:	f000 ffce 	bl	d6416 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   d547a:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d547e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5480:	f000 ffc2 	bl	d6408 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   d5484:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5486:	6803      	ldr	r3, [r0, #0]
   d5488:	2140      	movs	r1, #64	; 0x40
   d548a:	689b      	ldr	r3, [r3, #8]
   d548c:	4798      	blx	r3
        bytesOut = 1;
   d548e:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   d5490:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5492:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5496:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   d5498:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   d549a:	689b      	ldr	r3, [r3, #8]
   d549c:	4798      	blx	r3
      bytesOut++;
   d549e:	b2ff      	uxtb	r7, r7
    while(count--) {
   d54a0:	e7e4      	b.n	d546c <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   d54a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d54a4:	b118      	cbz	r0, d54ae <_ZN16Adafruit_SSD13067displayEv+0x9e>
   d54a6:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d54aa:	f000 fb07 	bl	d5abc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   d54ae:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d54b2:	2100      	movs	r1, #0
   d54b4:	b280      	uxth	r0, r0
   d54b6:	f001 f8ee 	bl	d6696 <digitalWrite>
   d54ba:	e7b2      	b.n	d5422 <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   d54bc:	f000 ffab 	bl	d6416 <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   d54c0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d54c2:	b378      	cbz	r0, d5524 <_ZN16Adafruit_SSD13067displayEv+0x114>
   d54c4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   d54c6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d54ca:	f000 bf8f 	b.w	d63ec <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   d54ce:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   d54d2:	2101      	movs	r1, #1
   d54d4:	b280      	uxth	r0, r0
   d54d6:	f001 f8de 	bl	d6696 <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   d54da:	42b5      	cmp	r5, r6
   d54dc:	d0f0      	beq.n	d54c0 <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   d54de:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   d54e0:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   d54e4:	b118      	cbz	r0, d54ee <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   d54e6:	4649      	mov	r1, r9
   d54e8:	f000 fb56 	bl	d5b98 <_ZN8SPIClass8transferEh>
   d54ec:	e7f5      	b.n	d54da <_ZN16Adafruit_SSD13067displayEv+0xca>
   d54ee:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d54f0:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   d54f4:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d54f8:	ea09 0108 	and.w	r1, r9, r8
   d54fc:	b280      	uxth	r0, r0
   d54fe:	f001 f8ca 	bl	d6696 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   d5502:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d5506:	2101      	movs	r1, #1
   d5508:	b280      	uxth	r0, r0
   d550a:	f001 f8c4 	bl	d6696 <digitalWrite>
      digitalWrite(clkPin , LOW);
   d550e:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d5512:	2100      	movs	r1, #0
   d5514:	b280      	uxth	r0, r0
   d5516:	f001 f8be 	bl	d6696 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d551a:	3f01      	subs	r7, #1
   d551c:	ea4f 0858 	mov.w	r8, r8, lsr #1
   d5520:	d1e8      	bne.n	d54f4 <_ZN16Adafruit_SSD13067displayEv+0xe4>
   d5522:	e7da      	b.n	d54da <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   d5524:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d5528:	2101      	movs	r1, #1
   d552a:	b280      	uxth	r0, r0
   d552c:	f001 f8b3 	bl	d6696 <digitalWrite>
   d5530:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d5532:	b118      	cbz	r0, d553c <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   d5534:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   d5538:	f000 baa7 	b.w	d5a8a <_ZN8SPIClass14endTransactionEv>
}
   d553c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d5540:	000d7d10 	.word	0x000d7d10

000d5544 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5544:	b508      	push	{r3, lr}
   d5546:	4b02      	ldr	r3, [pc, #8]	; (d5550 <netdb_freeaddrinfo+0xc>)
   d5548:	681b      	ldr	r3, [r3, #0]
   d554a:	689b      	ldr	r3, [r3, #8]
   d554c:	9301      	str	r3, [sp, #4]
   d554e:	bd08      	pop	{r3, pc}
   d5550:	00030268 	.word	0x00030268

000d5554 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5554:	b508      	push	{r3, lr}
   d5556:	4b02      	ldr	r3, [pc, #8]	; (d5560 <netdb_getaddrinfo+0xc>)
   d5558:	681b      	ldr	r3, [r3, #0]
   d555a:	68db      	ldr	r3, [r3, #12]
   d555c:	9301      	str	r3, [sp, #4]
   d555e:	bd08      	pop	{r3, pc}
   d5560:	00030268 	.word	0x00030268

000d5564 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d5564:	b508      	push	{r3, lr}
   d5566:	4b02      	ldr	r3, [pc, #8]	; (d5570 <HAL_Validate_Pin_Function+0xc>)
   d5568:	681b      	ldr	r3, [r3, #0]
   d556a:	685b      	ldr	r3, [r3, #4]
   d556c:	9301      	str	r3, [sp, #4]
   d556e:	bd08      	pop	{r3, pc}
   d5570:	0003022c 	.word	0x0003022c

000d5574 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5574:	b508      	push	{r3, lr}
   d5576:	4b02      	ldr	r3, [pc, #8]	; (d5580 <HAL_Pin_Mode+0xc>)
   d5578:	681b      	ldr	r3, [r3, #0]
   d557a:	689b      	ldr	r3, [r3, #8]
   d557c:	9301      	str	r3, [sp, #4]
   d557e:	bd08      	pop	{r3, pc}
   d5580:	0003022c 	.word	0x0003022c

000d5584 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5584:	b508      	push	{r3, lr}
   d5586:	4b02      	ldr	r3, [pc, #8]	; (d5590 <HAL_Get_Pin_Mode+0xc>)
   d5588:	681b      	ldr	r3, [r3, #0]
   d558a:	68db      	ldr	r3, [r3, #12]
   d558c:	9301      	str	r3, [sp, #4]
   d558e:	bd08      	pop	{r3, pc}
   d5590:	0003022c 	.word	0x0003022c

000d5594 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5594:	b508      	push	{r3, lr}
   d5596:	4b02      	ldr	r3, [pc, #8]	; (d55a0 <HAL_GPIO_Write+0xc>)
   d5598:	681b      	ldr	r3, [r3, #0]
   d559a:	691b      	ldr	r3, [r3, #16]
   d559c:	9301      	str	r3, [sp, #4]
   d559e:	bd08      	pop	{r3, pc}
   d55a0:	0003022c 	.word	0x0003022c

000d55a4 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d55a4:	b508      	push	{r3, lr}
   d55a6:	4b02      	ldr	r3, [pc, #8]	; (d55b0 <HAL_GPIO_Read+0xc>)
   d55a8:	681b      	ldr	r3, [r3, #0]
   d55aa:	695b      	ldr	r3, [r3, #20]
   d55ac:	9301      	str	r3, [sp, #4]
   d55ae:	bd08      	pop	{r3, pc}
   d55b0:	0003022c 	.word	0x0003022c

000d55b4 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d55b4:	b508      	push	{r3, lr}
   d55b6:	4b02      	ldr	r3, [pc, #8]	; (d55c0 <hal_adc_read+0xc>)
   d55b8:	681b      	ldr	r3, [r3, #0]
   d55ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d55bc:	9301      	str	r3, [sp, #4]
   d55be:	bd08      	pop	{r3, pc}
   d55c0:	0003022c 	.word	0x0003022c

000d55c4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d55c4:	b508      	push	{r3, lr}
   d55c6:	4b02      	ldr	r3, [pc, #8]	; (d55d0 <HAL_RNG_GetRandomNumber+0xc>)
   d55c8:	681b      	ldr	r3, [r3, #0]
   d55ca:	685b      	ldr	r3, [r3, #4]
   d55cc:	9301      	str	r3, [sp, #4]
   d55ce:	bd08      	pop	{r3, pc}
   d55d0:	00030218 	.word	0x00030218

000d55d4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d55d4:	b508      	push	{r3, lr}
   d55d6:	4b02      	ldr	r3, [pc, #8]	; (d55e0 <HAL_Delay_Microseconds+0xc>)
   d55d8:	681b      	ldr	r3, [r3, #0]
   d55da:	68db      	ldr	r3, [r3, #12]
   d55dc:	9301      	str	r3, [sp, #4]
   d55de:	bd08      	pop	{r3, pc}
   d55e0:	00030218 	.word	0x00030218

000d55e4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d55e4:	b508      	push	{r3, lr}
   d55e6:	4b02      	ldr	r3, [pc, #8]	; (d55f0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d55e8:	681b      	ldr	r3, [r3, #0]
   d55ea:	695b      	ldr	r3, [r3, #20]
   d55ec:	9301      	str	r3, [sp, #4]
   d55ee:	bd08      	pop	{r3, pc}
   d55f0:	00030218 	.word	0x00030218

000d55f4 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d55f4:	b508      	push	{r3, lr}
   d55f6:	4b02      	ldr	r3, [pc, #8]	; (d5600 <os_mutex_create+0xc>)
   d55f8:	681b      	ldr	r3, [r3, #0]
   d55fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d55fc:	9301      	str	r3, [sp, #4]
   d55fe:	bd08      	pop	{r3, pc}
   d5600:	00030248 	.word	0x00030248

000d5604 <os_mutex_destroy>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
   d5604:	b508      	push	{r3, lr}
   d5606:	4b02      	ldr	r3, [pc, #8]	; (d5610 <os_mutex_destroy+0xc>)
   d5608:	681b      	ldr	r3, [r3, #0]
   d560a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d560c:	9301      	str	r3, [sp, #4]
   d560e:	bd08      	pop	{r3, pc}
   d5610:	00030248 	.word	0x00030248

000d5614 <os_mutex_recursive_create>:
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5614:	b508      	push	{r3, lr}
   d5616:	4b02      	ldr	r3, [pc, #8]	; (d5620 <os_mutex_recursive_create+0xc>)
   d5618:	681b      	ldr	r3, [r3, #0]
   d561a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d561c:	9301      	str	r3, [sp, #4]
   d561e:	bd08      	pop	{r3, pc}
   d5620:	00030248 	.word	0x00030248

000d5624 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d5624:	b508      	push	{r3, lr}
   d5626:	4b02      	ldr	r3, [pc, #8]	; (d5630 <os_mutex_recursive_destroy+0xc>)
   d5628:	681b      	ldr	r3, [r3, #0]
   d562a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d562c:	9301      	str	r3, [sp, #4]
   d562e:	bd08      	pop	{r3, pc}
   d5630:	00030248 	.word	0x00030248

000d5634 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5634:	b508      	push	{r3, lr}
   d5636:	4b02      	ldr	r3, [pc, #8]	; (d5640 <inet_inet_ntop+0xc>)
   d5638:	681b      	ldr	r3, [r3, #0]
   d563a:	695b      	ldr	r3, [r3, #20]
   d563c:	9301      	str	r3, [sp, #4]
   d563e:	bd08      	pop	{r3, pc}
   d5640:	00030264 	.word	0x00030264

000d5644 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d5644:	b508      	push	{r3, lr}
   d5646:	4b02      	ldr	r3, [pc, #8]	; (d5650 <hal_usart_init+0xc>)
   d5648:	681b      	ldr	r3, [r3, #0]
   d564a:	681b      	ldr	r3, [r3, #0]
   d564c:	9301      	str	r3, [sp, #4]
   d564e:	bd08      	pop	{r3, pc}
   d5650:	0003023c 	.word	0x0003023c

000d5654 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d5654:	b508      	push	{r3, lr}
   d5656:	4b02      	ldr	r3, [pc, #8]	; (d5660 <hal_usart_write+0xc>)
   d5658:	681b      	ldr	r3, [r3, #0]
   d565a:	68db      	ldr	r3, [r3, #12]
   d565c:	9301      	str	r3, [sp, #4]
   d565e:	bd08      	pop	{r3, pc}
   d5660:	0003023c 	.word	0x0003023c

000d5664 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d5664:	b508      	push	{r3, lr}
   d5666:	4b02      	ldr	r3, [pc, #8]	; (d5670 <hal_usart_available+0xc>)
   d5668:	681b      	ldr	r3, [r3, #0]
   d566a:	691b      	ldr	r3, [r3, #16]
   d566c:	9301      	str	r3, [sp, #4]
   d566e:	bd08      	pop	{r3, pc}
   d5670:	0003023c 	.word	0x0003023c

000d5674 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d5674:	b508      	push	{r3, lr}
   d5676:	4b02      	ldr	r3, [pc, #8]	; (d5680 <hal_usart_read+0xc>)
   d5678:	681b      	ldr	r3, [r3, #0]
   d567a:	695b      	ldr	r3, [r3, #20]
   d567c:	9301      	str	r3, [sp, #4]
   d567e:	bd08      	pop	{r3, pc}
   d5680:	0003023c 	.word	0x0003023c

000d5684 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d5684:	b508      	push	{r3, lr}
   d5686:	4b02      	ldr	r3, [pc, #8]	; (d5690 <hal_usart_peek+0xc>)
   d5688:	681b      	ldr	r3, [r3, #0]
   d568a:	699b      	ldr	r3, [r3, #24]
   d568c:	9301      	str	r3, [sp, #4]
   d568e:	bd08      	pop	{r3, pc}
   d5690:	0003023c 	.word	0x0003023c

000d5694 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d5694:	b508      	push	{r3, lr}
   d5696:	4b02      	ldr	r3, [pc, #8]	; (d56a0 <hal_usart_flush+0xc>)
   d5698:	681b      	ldr	r3, [r3, #0]
   d569a:	69db      	ldr	r3, [r3, #28]
   d569c:	9301      	str	r3, [sp, #4]
   d569e:	bd08      	pop	{r3, pc}
   d56a0:	0003023c 	.word	0x0003023c

000d56a4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d56a4:	b508      	push	{r3, lr}
   d56a6:	4b02      	ldr	r3, [pc, #8]	; (d56b0 <hal_usart_is_enabled+0xc>)
   d56a8:	681b      	ldr	r3, [r3, #0]
   d56aa:	6a1b      	ldr	r3, [r3, #32]
   d56ac:	9301      	str	r3, [sp, #4]
   d56ae:	bd08      	pop	{r3, pc}
   d56b0:	0003023c 	.word	0x0003023c

000d56b4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d56b4:	b508      	push	{r3, lr}
   d56b6:	4b02      	ldr	r3, [pc, #8]	; (d56c0 <hal_usart_available_data_for_write+0xc>)
   d56b8:	681b      	ldr	r3, [r3, #0]
   d56ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d56bc:	9301      	str	r3, [sp, #4]
   d56be:	bd08      	pop	{r3, pc}
   d56c0:	0003023c 	.word	0x0003023c

000d56c4 <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   d56c4:	b508      	push	{r3, lr}
   d56c6:	4b02      	ldr	r3, [pc, #8]	; (d56d0 <hal_i2c_set_speed+0xc>)
   d56c8:	681b      	ldr	r3, [r3, #0]
   d56ca:	681b      	ldr	r3, [r3, #0]
   d56cc:	9301      	str	r3, [sp, #4]
   d56ce:	bd08      	pop	{r3, pc}
   d56d0:	00030228 	.word	0x00030228

000d56d4 <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d56d4:	b508      	push	{r3, lr}
   d56d6:	4b02      	ldr	r3, [pc, #8]	; (d56e0 <hal_i2c_begin+0xc>)
   d56d8:	681b      	ldr	r3, [r3, #0]
   d56da:	68db      	ldr	r3, [r3, #12]
   d56dc:	9301      	str	r3, [sp, #4]
   d56de:	bd08      	pop	{r3, pc}
   d56e0:	00030228 	.word	0x00030228

000d56e4 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d56e4:	b508      	push	{r3, lr}
   d56e6:	4b02      	ldr	r3, [pc, #8]	; (d56f0 <hal_i2c_begin_transmission+0xc>)
   d56e8:	681b      	ldr	r3, [r3, #0]
   d56ea:	699b      	ldr	r3, [r3, #24]
   d56ec:	9301      	str	r3, [sp, #4]
   d56ee:	bd08      	pop	{r3, pc}
   d56f0:	00030228 	.word	0x00030228

000d56f4 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d56f4:	b508      	push	{r3, lr}
   d56f6:	4b02      	ldr	r3, [pc, #8]	; (d5700 <hal_i2c_end_transmission+0xc>)
   d56f8:	681b      	ldr	r3, [r3, #0]
   d56fa:	69db      	ldr	r3, [r3, #28]
   d56fc:	9301      	str	r3, [sp, #4]
   d56fe:	bd08      	pop	{r3, pc}
   d5700:	00030228 	.word	0x00030228

000d5704 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d5704:	b508      	push	{r3, lr}
   d5706:	4b02      	ldr	r3, [pc, #8]	; (d5710 <hal_i2c_write+0xc>)
   d5708:	681b      	ldr	r3, [r3, #0]
   d570a:	6a1b      	ldr	r3, [r3, #32]
   d570c:	9301      	str	r3, [sp, #4]
   d570e:	bd08      	pop	{r3, pc}
   d5710:	00030228 	.word	0x00030228

000d5714 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d5714:	b508      	push	{r3, lr}
   d5716:	4b02      	ldr	r3, [pc, #8]	; (d5720 <hal_i2c_available+0xc>)
   d5718:	681b      	ldr	r3, [r3, #0]
   d571a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d571c:	9301      	str	r3, [sp, #4]
   d571e:	bd08      	pop	{r3, pc}
   d5720:	00030228 	.word	0x00030228

000d5724 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d5724:	b508      	push	{r3, lr}
   d5726:	4b02      	ldr	r3, [pc, #8]	; (d5730 <hal_i2c_read+0xc>)
   d5728:	681b      	ldr	r3, [r3, #0]
   d572a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d572c:	9301      	str	r3, [sp, #4]
   d572e:	bd08      	pop	{r3, pc}
   d5730:	00030228 	.word	0x00030228

000d5734 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d5734:	b508      	push	{r3, lr}
   d5736:	4b02      	ldr	r3, [pc, #8]	; (d5740 <hal_i2c_peek+0xc>)
   d5738:	681b      	ldr	r3, [r3, #0]
   d573a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d573c:	9301      	str	r3, [sp, #4]
   d573e:	bd08      	pop	{r3, pc}
   d5740:	00030228 	.word	0x00030228

000d5744 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d5744:	b508      	push	{r3, lr}
   d5746:	4b02      	ldr	r3, [pc, #8]	; (d5750 <hal_i2c_flush+0xc>)
   d5748:	681b      	ldr	r3, [r3, #0]
   d574a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d574c:	9301      	str	r3, [sp, #4]
   d574e:	bd08      	pop	{r3, pc}
   d5750:	00030228 	.word	0x00030228

000d5754 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d5754:	b508      	push	{r3, lr}
   d5756:	4b02      	ldr	r3, [pc, #8]	; (d5760 <hal_i2c_is_enabled+0xc>)
   d5758:	681b      	ldr	r3, [r3, #0]
   d575a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d575c:	9301      	str	r3, [sp, #4]
   d575e:	bd08      	pop	{r3, pc}
   d5760:	00030228 	.word	0x00030228

000d5764 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d5764:	b508      	push	{r3, lr}
   d5766:	4b02      	ldr	r3, [pc, #8]	; (d5770 <hal_i2c_init+0xc>)
   d5768:	681b      	ldr	r3, [r3, #0]
   d576a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d576c:	9301      	str	r3, [sp, #4]
   d576e:	bd08      	pop	{r3, pc}
   d5770:	00030228 	.word	0x00030228

000d5774 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d5774:	b508      	push	{r3, lr}
   d5776:	4b02      	ldr	r3, [pc, #8]	; (d5780 <hal_spi_begin+0xc>)
   d5778:	681b      	ldr	r3, [r3, #0]
   d577a:	681b      	ldr	r3, [r3, #0]
   d577c:	9301      	str	r3, [sp, #4]
   d577e:	bd08      	pop	{r3, pc}
   d5780:	00030230 	.word	0x00030230

000d5784 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d5784:	b508      	push	{r3, lr}
   d5786:	4b02      	ldr	r3, [pc, #8]	; (d5790 <hal_spi_transfer+0xc>)
   d5788:	681b      	ldr	r3, [r3, #0]
   d578a:	695b      	ldr	r3, [r3, #20]
   d578c:	9301      	str	r3, [sp, #4]
   d578e:	bd08      	pop	{r3, pc}
   d5790:	00030230 	.word	0x00030230

000d5794 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d5794:	b508      	push	{r3, lr}
   d5796:	4b02      	ldr	r3, [pc, #8]	; (d57a0 <hal_spi_init+0xc>)
   d5798:	681b      	ldr	r3, [r3, #0]
   d579a:	69db      	ldr	r3, [r3, #28]
   d579c:	9301      	str	r3, [sp, #4]
   d579e:	bd08      	pop	{r3, pc}
   d57a0:	00030230 	.word	0x00030230

000d57a4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d57a4:	b508      	push	{r3, lr}
   d57a6:	4b02      	ldr	r3, [pc, #8]	; (d57b0 <hal_spi_is_enabled+0xc>)
   d57a8:	681b      	ldr	r3, [r3, #0]
   d57aa:	6a1b      	ldr	r3, [r3, #32]
   d57ac:	9301      	str	r3, [sp, #4]
   d57ae:	bd08      	pop	{r3, pc}
   d57b0:	00030230 	.word	0x00030230

000d57b4 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d57b4:	b508      	push	{r3, lr}
   d57b6:	4b02      	ldr	r3, [pc, #8]	; (d57c0 <hal_spi_info+0xc>)
   d57b8:	681b      	ldr	r3, [r3, #0]
   d57ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d57bc:	9301      	str	r3, [sp, #4]
   d57be:	bd08      	pop	{r3, pc}
   d57c0:	00030230 	.word	0x00030230

000d57c4 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d57c4:	b508      	push	{r3, lr}
   d57c6:	4b02      	ldr	r3, [pc, #8]	; (d57d0 <hal_spi_set_settings+0xc>)
   d57c8:	681b      	ldr	r3, [r3, #0]
   d57ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d57cc:	9301      	str	r3, [sp, #4]
   d57ce:	bd08      	pop	{r3, pc}
   d57d0:	00030230 	.word	0x00030230

000d57d4 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d57d4:	b508      	push	{r3, lr}
   d57d6:	4b02      	ldr	r3, [pc, #8]	; (d57e0 <hal_spi_acquire+0xc>)
   d57d8:	681b      	ldr	r3, [r3, #0]
   d57da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d57dc:	9301      	str	r3, [sp, #4]
   d57de:	bd08      	pop	{r3, pc}
   d57e0:	00030230 	.word	0x00030230

000d57e4 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d57e4:	b508      	push	{r3, lr}
   d57e6:	4b02      	ldr	r3, [pc, #8]	; (d57f0 <hal_spi_release+0xc>)
   d57e8:	681b      	ldr	r3, [r3, #0]
   d57ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d57ec:	9301      	str	r3, [sp, #4]
   d57ee:	bd08      	pop	{r3, pc}
   d57f0:	00030230 	.word	0x00030230

000d57f4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d57f4:	b508      	push	{r3, lr}
   d57f6:	4b02      	ldr	r3, [pc, #8]	; (d5800 <HAL_USB_USART_Init+0xc>)
   d57f8:	681b      	ldr	r3, [r3, #0]
   d57fa:	681b      	ldr	r3, [r3, #0]
   d57fc:	9301      	str	r3, [sp, #4]
   d57fe:	bd08      	pop	{r3, pc}
   d5800:	0003024c 	.word	0x0003024c

000d5804 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5804:	b508      	push	{r3, lr}
   d5806:	4b02      	ldr	r3, [pc, #8]	; (d5810 <HAL_USB_USART_Available_Data+0xc>)
   d5808:	681b      	ldr	r3, [r3, #0]
   d580a:	691b      	ldr	r3, [r3, #16]
   d580c:	9301      	str	r3, [sp, #4]
   d580e:	bd08      	pop	{r3, pc}
   d5810:	0003024c 	.word	0x0003024c

000d5814 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5814:	b508      	push	{r3, lr}
   d5816:	4b02      	ldr	r3, [pc, #8]	; (d5820 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5818:	681b      	ldr	r3, [r3, #0]
   d581a:	695b      	ldr	r3, [r3, #20]
   d581c:	9301      	str	r3, [sp, #4]
   d581e:	bd08      	pop	{r3, pc}
   d5820:	0003024c 	.word	0x0003024c

000d5824 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5824:	b508      	push	{r3, lr}
   d5826:	4b02      	ldr	r3, [pc, #8]	; (d5830 <HAL_USB_USART_Receive_Data+0xc>)
   d5828:	681b      	ldr	r3, [r3, #0]
   d582a:	699b      	ldr	r3, [r3, #24]
   d582c:	9301      	str	r3, [sp, #4]
   d582e:	bd08      	pop	{r3, pc}
   d5830:	0003024c 	.word	0x0003024c

000d5834 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5834:	b508      	push	{r3, lr}
   d5836:	4b02      	ldr	r3, [pc, #8]	; (d5840 <HAL_USB_USART_Send_Data+0xc>)
   d5838:	681b      	ldr	r3, [r3, #0]
   d583a:	69db      	ldr	r3, [r3, #28]
   d583c:	9301      	str	r3, [sp, #4]
   d583e:	bd08      	pop	{r3, pc}
   d5840:	0003024c 	.word	0x0003024c

000d5844 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5844:	b508      	push	{r3, lr}
   d5846:	4b02      	ldr	r3, [pc, #8]	; (d5850 <HAL_USB_USART_Flush_Data+0xc>)
   d5848:	681b      	ldr	r3, [r3, #0]
   d584a:	6a1b      	ldr	r3, [r3, #32]
   d584c:	9301      	str	r3, [sp, #4]
   d584e:	bd08      	pop	{r3, pc}
   d5850:	0003024c 	.word	0x0003024c

000d5854 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d5854:	b508      	push	{r3, lr}
   d5856:	4b02      	ldr	r3, [pc, #8]	; (d5860 <panic_+0xc>)
   d5858:	681b      	ldr	r3, [r3, #0]
   d585a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d585c:	9301      	str	r3, [sp, #4]
   d585e:	bd08      	pop	{r3, pc}
   d5860:	00030260 	.word	0x00030260

000d5864 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5864:	b508      	push	{r3, lr}
   d5866:	4b02      	ldr	r3, [pc, #8]	; (d5870 <set_system_mode+0xc>)
   d5868:	681b      	ldr	r3, [r3, #0]
   d586a:	685b      	ldr	r3, [r3, #4]
   d586c:	9301      	str	r3, [sp, #4]
   d586e:	bd08      	pop	{r3, pc}
   d5870:	00030220 	.word	0x00030220

000d5874 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5874:	b508      	push	{r3, lr}
   d5876:	4b02      	ldr	r3, [pc, #8]	; (d5880 <system_delay_ms+0xc>)
   d5878:	681b      	ldr	r3, [r3, #0]
   d587a:	695b      	ldr	r3, [r3, #20]
   d587c:	9301      	str	r3, [sp, #4]
   d587e:	bd08      	pop	{r3, pc}
   d5880:	00030220 	.word	0x00030220

000d5884 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d5884:	b508      	push	{r3, lr}
   d5886:	4b02      	ldr	r3, [pc, #8]	; (d5890 <system_thread_set_state+0xc>)
   d5888:	681b      	ldr	r3, [r3, #0]
   d588a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d588c:	9301      	str	r3, [sp, #4]
   d588e:	bd08      	pop	{r3, pc}
   d5890:	00030220 	.word	0x00030220

000d5894 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5894:	b508      	push	{r3, lr}
   d5896:	4b03      	ldr	r3, [pc, #12]	; (d58a4 <system_ctrl_set_app_request_handler+0x10>)
   d5898:	681b      	ldr	r3, [r3, #0]
   d589a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d589e:	9301      	str	r3, [sp, #4]
   d58a0:	bd08      	pop	{r3, pc}
   d58a2:	0000      	.short	0x0000
   d58a4:	00030220 	.word	0x00030220

000d58a8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d58a8:	b508      	push	{r3, lr}
   d58aa:	4b03      	ldr	r3, [pc, #12]	; (d58b8 <system_ctrl_set_result+0x10>)
   d58ac:	681b      	ldr	r3, [r3, #0]
   d58ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d58b2:	9301      	str	r3, [sp, #4]
   d58b4:	bd08      	pop	{r3, pc}
   d58b6:	0000      	.short	0x0000
   d58b8:	00030220 	.word	0x00030220

000d58bc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d58bc:	b508      	push	{r3, lr}
   d58be:	4b02      	ldr	r3, [pc, #8]	; (d58c8 <network_connect+0xc>)
   d58c0:	681b      	ldr	r3, [r3, #0]
   d58c2:	685b      	ldr	r3, [r3, #4]
   d58c4:	9301      	str	r3, [sp, #4]
   d58c6:	bd08      	pop	{r3, pc}
   d58c8:	00030240 	.word	0x00030240

000d58cc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d58cc:	b508      	push	{r3, lr}
   d58ce:	4b02      	ldr	r3, [pc, #8]	; (d58d8 <network_connecting+0xc>)
   d58d0:	681b      	ldr	r3, [r3, #0]
   d58d2:	689b      	ldr	r3, [r3, #8]
   d58d4:	9301      	str	r3, [sp, #4]
   d58d6:	bd08      	pop	{r3, pc}
   d58d8:	00030240 	.word	0x00030240

000d58dc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d58dc:	b508      	push	{r3, lr}
   d58de:	4b02      	ldr	r3, [pc, #8]	; (d58e8 <network_disconnect+0xc>)
   d58e0:	681b      	ldr	r3, [r3, #0]
   d58e2:	68db      	ldr	r3, [r3, #12]
   d58e4:	9301      	str	r3, [sp, #4]
   d58e6:	bd08      	pop	{r3, pc}
   d58e8:	00030240 	.word	0x00030240

000d58ec <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d58ec:	b508      	push	{r3, lr}
   d58ee:	4b02      	ldr	r3, [pc, #8]	; (d58f8 <network_ready+0xc>)
   d58f0:	681b      	ldr	r3, [r3, #0]
   d58f2:	691b      	ldr	r3, [r3, #16]
   d58f4:	9301      	str	r3, [sp, #4]
   d58f6:	bd08      	pop	{r3, pc}
   d58f8:	00030240 	.word	0x00030240

000d58fc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d58fc:	b508      	push	{r3, lr}
   d58fe:	4b02      	ldr	r3, [pc, #8]	; (d5908 <network_on+0xc>)
   d5900:	681b      	ldr	r3, [r3, #0]
   d5902:	695b      	ldr	r3, [r3, #20]
   d5904:	9301      	str	r3, [sp, #4]
   d5906:	bd08      	pop	{r3, pc}
   d5908:	00030240 	.word	0x00030240

000d590c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d590c:	b508      	push	{r3, lr}
   d590e:	4b02      	ldr	r3, [pc, #8]	; (d5918 <network_off+0xc>)
   d5910:	681b      	ldr	r3, [r3, #0]
   d5912:	699b      	ldr	r3, [r3, #24]
   d5914:	9301      	str	r3, [sp, #4]
   d5916:	bd08      	pop	{r3, pc}
   d5918:	00030240 	.word	0x00030240

000d591c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d591c:	b508      	push	{r3, lr}
   d591e:	4b02      	ldr	r3, [pc, #8]	; (d5928 <network_listen+0xc>)
   d5920:	681b      	ldr	r3, [r3, #0]
   d5922:	69db      	ldr	r3, [r3, #28]
   d5924:	9301      	str	r3, [sp, #4]
   d5926:	bd08      	pop	{r3, pc}
   d5928:	00030240 	.word	0x00030240

000d592c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d592c:	b508      	push	{r3, lr}
   d592e:	4b02      	ldr	r3, [pc, #8]	; (d5938 <network_listening+0xc>)
   d5930:	681b      	ldr	r3, [r3, #0]
   d5932:	6a1b      	ldr	r3, [r3, #32]
   d5934:	9301      	str	r3, [sp, #4]
   d5936:	bd08      	pop	{r3, pc}
   d5938:	00030240 	.word	0x00030240

000d593c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d593c:	b508      	push	{r3, lr}
   d593e:	4b02      	ldr	r3, [pc, #8]	; (d5948 <network_set_listen_timeout+0xc>)
   d5940:	681b      	ldr	r3, [r3, #0]
   d5942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5944:	9301      	str	r3, [sp, #4]
   d5946:	bd08      	pop	{r3, pc}
   d5948:	00030240 	.word	0x00030240

000d594c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d594c:	b508      	push	{r3, lr}
   d594e:	4b02      	ldr	r3, [pc, #8]	; (d5958 <network_get_listen_timeout+0xc>)
   d5950:	681b      	ldr	r3, [r3, #0]
   d5952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5954:	9301      	str	r3, [sp, #4]
   d5956:	bd08      	pop	{r3, pc}
   d5958:	00030240 	.word	0x00030240

000d595c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d595c:	b508      	push	{r3, lr}
   d595e:	4b02      	ldr	r3, [pc, #8]	; (d5968 <network_is_on+0xc>)
   d5960:	681b      	ldr	r3, [r3, #0]
   d5962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5964:	9301      	str	r3, [sp, #4]
   d5966:	bd08      	pop	{r3, pc}
   d5968:	00030240 	.word	0x00030240

000d596c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d596c:	b508      	push	{r3, lr}
   d596e:	4b02      	ldr	r3, [pc, #8]	; (d5978 <network_is_off+0xc>)
   d5970:	681b      	ldr	r3, [r3, #0]
   d5972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5974:	9301      	str	r3, [sp, #4]
   d5976:	bd08      	pop	{r3, pc}
   d5978:	00030240 	.word	0x00030240

000d597c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d597c:	b508      	push	{r3, lr}
   d597e:	4b02      	ldr	r3, [pc, #8]	; (d5988 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5980:	681b      	ldr	r3, [r3, #0]
   d5982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5984:	9301      	str	r3, [sp, #4]
   d5986:	bd08      	pop	{r3, pc}
   d5988:	00030244 	.word	0x00030244

000d598c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d598c:	b508      	push	{r3, lr}
   d598e:	4b02      	ldr	r3, [pc, #8]	; (d5998 <malloc+0xc>)
   d5990:	681b      	ldr	r3, [r3, #0]
   d5992:	681b      	ldr	r3, [r3, #0]
   d5994:	9301      	str	r3, [sp, #4]
   d5996:	bd08      	pop	{r3, pc}
   d5998:	0003021c 	.word	0x0003021c

000d599c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d599c:	b508      	push	{r3, lr}
   d599e:	4b02      	ldr	r3, [pc, #8]	; (d59a8 <free+0xc>)
   d59a0:	681b      	ldr	r3, [r3, #0]
   d59a2:	685b      	ldr	r3, [r3, #4]
   d59a4:	9301      	str	r3, [sp, #4]
   d59a6:	bd08      	pop	{r3, pc}
   d59a8:	0003021c 	.word	0x0003021c

000d59ac <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d59ac:	b508      	push	{r3, lr}
   d59ae:	4b02      	ldr	r3, [pc, #8]	; (d59b8 <vsnprintf+0xc>)
   d59b0:	681b      	ldr	r3, [r3, #0]
   d59b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d59b4:	9301      	str	r3, [sp, #4]
   d59b6:	bd08      	pop	{r3, pc}
   d59b8:	0003021c 	.word	0x0003021c

000d59bc <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d59bc:	b508      	push	{r3, lr}
   d59be:	4b02      	ldr	r3, [pc, #8]	; (d59c8 <newlib_impure_ptr_callback+0xc>)
   d59c0:	681b      	ldr	r3, [r3, #0]
   d59c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d59c4:	9301      	str	r3, [sp, #4]
   d59c6:	bd08      	pop	{r3, pc}
   d59c8:	0003021c 	.word	0x0003021c

000d59cc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d59cc:	2200      	movs	r2, #0
   d59ce:	6840      	ldr	r0, [r0, #4]
   d59d0:	4611      	mov	r1, r2
   d59d2:	f7ff bfab 	b.w	d592c <network_listening>

000d59d6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d59d6:	2200      	movs	r2, #0
   d59d8:	6840      	ldr	r0, [r0, #4]
   d59da:	4611      	mov	r1, r2
   d59dc:	f7ff bfb6 	b.w	d594c <network_get_listen_timeout>

000d59e0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d59e0:	6840      	ldr	r0, [r0, #4]
   d59e2:	2200      	movs	r2, #0
   d59e4:	f7ff bfaa 	b.w	d593c <network_set_listen_timeout>

000d59e8 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d59e8:	6840      	ldr	r0, [r0, #4]
   d59ea:	2200      	movs	r2, #0
   d59ec:	f081 0101 	eor.w	r1, r1, #1
   d59f0:	f7ff bf94 	b.w	d591c <network_listen>

000d59f4 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d59f4:	2300      	movs	r3, #0
   d59f6:	6840      	ldr	r0, [r0, #4]
   d59f8:	461a      	mov	r2, r3
   d59fa:	4619      	mov	r1, r3
   d59fc:	f7ff bf86 	b.w	d590c <network_off>

000d5a00 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5a00:	2300      	movs	r3, #0
   d5a02:	6840      	ldr	r0, [r0, #4]
   d5a04:	461a      	mov	r2, r3
   d5a06:	4619      	mov	r1, r3
   d5a08:	f7ff bf78 	b.w	d58fc <network_on>

000d5a0c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5a0c:	2200      	movs	r2, #0
   d5a0e:	6840      	ldr	r0, [r0, #4]
   d5a10:	4611      	mov	r1, r2
   d5a12:	f7ff bf6b 	b.w	d58ec <network_ready>

000d5a16 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d5a16:	2200      	movs	r2, #0
   d5a18:	6840      	ldr	r0, [r0, #4]
   d5a1a:	4611      	mov	r1, r2
   d5a1c:	f7ff bf56 	b.w	d58cc <network_connecting>

000d5a20 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5a20:	6840      	ldr	r0, [r0, #4]
   d5a22:	2200      	movs	r2, #0
   d5a24:	2102      	movs	r1, #2
   d5a26:	f7ff bf59 	b.w	d58dc <network_disconnect>

000d5a2a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d5a2a:	2300      	movs	r3, #0
   d5a2c:	6840      	ldr	r0, [r0, #4]
   d5a2e:	461a      	mov	r2, r3
   d5a30:	f7ff bf44 	b.w	d58bc <network_connect>

000d5a34 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5a34:	4b02      	ldr	r3, [pc, #8]	; (d5a40 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5a36:	2203      	movs	r2, #3
   d5a38:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5a3a:	4a02      	ldr	r2, [pc, #8]	; (d5a44 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5a3c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d5a3e:	4770      	bx	lr
   d5a40:	2003e650 	.word	0x2003e650
   d5a44:	000d7d20 	.word	0x000d7d20

000d5a48 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d5a48:	2100      	movs	r1, #0
   d5a4a:	f7ff bec3 	b.w	d57d4 <hal_spi_acquire>

000d5a4e <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d5a4e:	2100      	movs	r1, #0
   d5a50:	f7ff bec8 	b.w	d57e4 <hal_spi_release>

000d5a54 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d5a54:	b510      	push	{r4, lr}
   d5a56:	4604      	mov	r4, r0
   d5a58:	4608      	mov	r0, r1
{
    _spi = spi;
   d5a5a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d5a5c:	f7ff fe9a 	bl	d5794 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5a60:	2300      	movs	r3, #0
   d5a62:	6063      	str	r3, [r4, #4]
}
   d5a64:	4620      	mov	r0, r4
   d5a66:	bd10      	pop	{r4, pc}

000d5a68 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d5a68:	b510      	push	{r4, lr}
   d5a6a:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d5a6c:	7800      	ldrb	r0, [r0, #0]
   d5a6e:	f7ff ffeb 	bl	d5a48 <_ZN8SPIClass4lockEv.isra.0>
   d5a72:	b948      	cbnz	r0, d5a88 <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   d5a74:	7820      	ldrb	r0, [r4, #0]
   d5a76:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d5a7a:	f7ff fe7b 	bl	d5774 <hal_spi_begin>
        unlock();
   d5a7e:	7820      	ldrb	r0, [r4, #0]
    }
}
   d5a80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d5a84:	f7ff bfe3 	b.w	d5a4e <_ZN8SPIClass6unlockEv.isra.0>
}
   d5a88:	bd10      	pop	{r4, pc}

000d5a8a <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d5a8a:	7800      	ldrb	r0, [r0, #0]
   d5a8c:	f7ff bfdf 	b.w	d5a4e <_ZN8SPIClass6unlockEv.isra.0>

000d5a90 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d5a90:	0840      	lsrs	r0, r0, #1
{
   d5a92:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d5a94:	6018      	str	r0, [r3, #0]
   d5a96:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d5a98:	6818      	ldr	r0, [r3, #0]
   d5a9a:	4288      	cmp	r0, r1
   d5a9c:	b2e5      	uxtb	r5, r4
   d5a9e:	d906      	bls.n	d5aae <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d5aa0:	3401      	adds	r4, #1
   d5aa2:	2c08      	cmp	r4, #8
   d5aa4:	d002      	beq.n	d5aac <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d5aa6:	0840      	lsrs	r0, r0, #1
   d5aa8:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d5aaa:	e7f5      	b.n	d5a98 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d5aac:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d5aae:	4b02      	ldr	r3, [pc, #8]	; (d5ab8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d5ab0:	5d5b      	ldrb	r3, [r3, r5]
   d5ab2:	7013      	strb	r3, [r2, #0]
}
   d5ab4:	bd30      	pop	{r4, r5, pc}
   d5ab6:	bf00      	nop
   d5ab8:	000d7d54 	.word	0x000d7d54

000d5abc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   d5abc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5ac0:	4606      	mov	r6, r0
   d5ac2:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   d5ac4:	7800      	ldrb	r0, [r0, #0]
{
   d5ac6:	460c      	mov	r4, r1
    CHECK(lock());
   d5ac8:	f7ff ffbe 	bl	d5a48 <_ZN8SPIClass4lockEv.isra.0>
   d5acc:	2800      	cmp	r0, #0
   d5ace:	db1b      	blt.n	d5b08 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   d5ad0:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   d5ad2:	2214      	movs	r2, #20
   d5ad4:	2100      	movs	r1, #0
   d5ad6:	a809      	add	r0, sp, #36	; 0x24
   d5ad8:	f001 fb3a 	bl	d7150 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d5adc:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d5ade:	2200      	movs	r2, #0
   d5ae0:	a909      	add	r1, sp, #36	; 0x24
   d5ae2:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   d5ae4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   d5ae8:	f7ff fe64 	bl	d57b4 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   d5aec:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   d5af0:	b113      	cbz	r3, d5af8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   d5af2:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d5af6:	b155      	cbz	r5, d5b0e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   d5af8:	2700      	movs	r7, #0
   d5afa:	46b9      	mov	r9, r7
   d5afc:	46b8      	mov	r8, r7
   d5afe:	2501      	movs	r5, #1
    if (default_ && other.default_)
   d5b00:	7923      	ldrb	r3, [r4, #4]
   d5b02:	b15d      	cbz	r5, d5b1c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   d5b04:	b1c3      	cbz	r3, d5b38 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   d5b06:	2000      	movs	r0, #0
}
   d5b08:	b00f      	add	sp, #60	; 0x3c
   d5b0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   d5b0e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d5b12:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d5b16:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   d5b1a:	e7f1      	b.n	d5b00 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   d5b1c:	2b00      	cmp	r3, #0
   d5b1e:	d135      	bne.n	d5b8c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   d5b20:	68a3      	ldr	r3, [r4, #8]
   d5b22:	4543      	cmp	r3, r8
   d5b24:	d108      	bne.n	d5b38 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   d5b26:	f88d 9020 	strb.w	r9, [sp, #32]
   d5b2a:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d5b2e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d5b32:	89a3      	ldrh	r3, [r4, #12]
   d5b34:	429a      	cmp	r2, r3
   d5b36:	d0e6      	beq.n	d5b06 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   d5b38:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d5b3a:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   d5b3c:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d5b40:	980a      	ldr	r0, [sp, #40]	; 0x28
   d5b42:	ab04      	add	r3, sp, #16
   d5b44:	f10d 020f 	add.w	r2, sp, #15
   d5b48:	f7ff ffa2 	bl	d5a90 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   d5b4c:	7921      	ldrb	r1, [r4, #4]
   d5b4e:	b985      	cbnz	r5, d5b72 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   d5b50:	b989      	cbnz	r1, d5b76 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d5b52:	68a3      	ldr	r3, [r4, #8]
   d5b54:	4543      	cmp	r3, r8
   d5b56:	d30e      	bcc.n	d5b76 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   d5b58:	f88d 9020 	strb.w	r9, [sp, #32]
   d5b5c:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d5b60:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d5b64:	89a3      	ldrh	r3, [r4, #12]
   d5b66:	429a      	cmp	r2, r3
   d5b68:	d105      	bne.n	d5b76 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d5b6a:	9b04      	ldr	r3, [sp, #16]
   d5b6c:	4543      	cmp	r3, r8
   d5b6e:	d102      	bne.n	d5b76 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d5b70:	e7c9      	b.n	d5b06 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   d5b72:	2900      	cmp	r1, #0
   d5b74:	d1f9      	bne.n	d5b6a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   d5b76:	2300      	movs	r3, #0
   d5b78:	9301      	str	r3, [sp, #4]
   d5b7a:	7b63      	ldrb	r3, [r4, #13]
   d5b7c:	9300      	str	r3, [sp, #0]
   d5b7e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d5b82:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d5b84:	7830      	ldrb	r0, [r6, #0]
   d5b86:	f7ff fe1d 	bl	d57c4 <hal_spi_set_settings>
   d5b8a:	e7bc      	b.n	d5b06 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   d5b8c:	e9cd 5500 	strd	r5, r5, [sp]
   d5b90:	462b      	mov	r3, r5
   d5b92:	462a      	mov	r2, r5
   d5b94:	2101      	movs	r1, #1
   d5b96:	e7f5      	b.n	d5b84 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000d5b98 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d5b98:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d5b9a:	7800      	ldrb	r0, [r0, #0]
   d5b9c:	f7ff fdf2 	bl	d5784 <hal_spi_transfer>
}
   d5ba0:	b2c0      	uxtb	r0, r0
   d5ba2:	bd08      	pop	{r3, pc}

000d5ba4 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5ba4:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d5ba6:	4b09      	ldr	r3, [pc, #36]	; (d5bcc <_GLOBAL__sub_I_System+0x28>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5ba8:	4c09      	ldr	r4, [pc, #36]	; (d5bd0 <_GLOBAL__sub_I_System+0x2c>)
   d5baa:	2202      	movs	r2, #2
   d5bac:	2000      	movs	r0, #0
   d5bae:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d5bb0:	4b08      	ldr	r3, [pc, #32]	; (d5bd4 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d5bb2:	6020      	str	r0, [r4, #0]
   d5bb4:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d5bb6:	71a0      	strb	r0, [r4, #6]
   d5bb8:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5bba:	f7ff fe53 	bl	d5864 <set_system_mode>
SystemClass System;
   d5bbe:	4620      	mov	r0, r4
   d5bc0:	4a05      	ldr	r2, [pc, #20]	; (d5bd8 <_GLOBAL__sub_I_System+0x34>)
   d5bc2:	4906      	ldr	r1, [pc, #24]	; (d5bdc <_GLOBAL__sub_I_System+0x38>)
   d5bc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d5bc8:	f000 bde8 	b.w	d679c <__aeabi_atexit>
   d5bcc:	2003e664 	.word	0x2003e664
   d5bd0:	2003e658 	.word	0x2003e658
   d5bd4:	ffff0000 	.word	0xffff0000
   d5bd8:	2003e5c4 	.word	0x2003e5c4
   d5bdc:	000d40c5 	.word	0x000d40c5

000d5be0 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d5be0:	b510      	push	{r4, lr}
   d5be2:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5be4:	6800      	ldr	r0, [r0, #0]
   d5be6:	b108      	cbz	r0, d5bec <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d5be8:	f7ff fd1c 	bl	d5624 <os_mutex_recursive_destroy>
    }
   d5bec:	4620      	mov	r0, r4
   d5bee:	bd10      	pop	{r4, pc}

000d5bf0 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5bf0:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5bf2:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d5bf4:	4604      	mov	r4, r0
      if (_M_manager)
   d5bf6:	b113      	cbz	r3, d5bfe <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5bf8:	2203      	movs	r2, #3
   d5bfa:	4601      	mov	r1, r0
   d5bfc:	4798      	blx	r3
    }
   d5bfe:	4620      	mov	r0, r4
   d5c00:	bd10      	pop	{r4, pc}
	...

000d5c04 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d5c04:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d5c06:	4c06      	ldr	r4, [pc, #24]	; (d5c20 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d5c08:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d5c0a:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d5c0c:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d5c0e:	f7ff fd01 	bl	d5614 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d5c12:	4620      	mov	r0, r4
   d5c14:	4a03      	ldr	r2, [pc, #12]	; (d5c24 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d5c16:	4904      	ldr	r1, [pc, #16]	; (d5c28 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d5c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d5c1c:	f000 bdbe 	b.w	d679c <__aeabi_atexit>
   d5c20:	2003e668 	.word	0x2003e668
   d5c24:	2003e5c4 	.word	0x2003e5c4
   d5c28:	000d5be1 	.word	0x000d5be1

000d5c2c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5c2e:	4606      	mov	r6, r0
   d5c30:	460d      	mov	r5, r1
  size_t n = 0;
   d5c32:	188f      	adds	r7, r1, r2
   d5c34:	2400      	movs	r4, #0
  while (size--) {
   d5c36:	42bd      	cmp	r5, r7
   d5c38:	d00c      	beq.n	d5c54 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5c3a:	6833      	ldr	r3, [r6, #0]
   d5c3c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5c40:	689b      	ldr	r3, [r3, #8]
   d5c42:	4630      	mov	r0, r6
   d5c44:	4798      	blx	r3
     if (chunk>=0)
   d5c46:	1e03      	subs	r3, r0, #0
   d5c48:	db01      	blt.n	d5c4e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5c4a:	441c      	add	r4, r3
  while (size--) {
   d5c4c:	e7f3      	b.n	d5c36 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5c4e:	2c00      	cmp	r4, #0
   d5c50:	bf08      	it	eq
   d5c52:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d5c54:	4620      	mov	r0, r4
   d5c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5c58 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5c58:	b513      	push	{r0, r1, r4, lr}
   d5c5a:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d5c5c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d5c5e:	b159      	cbz	r1, d5c78 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d5c60:	9101      	str	r1, [sp, #4]
   d5c62:	f001 faa1 	bl	d71a8 <strlen>
   d5c66:	6823      	ldr	r3, [r4, #0]
   d5c68:	9901      	ldr	r1, [sp, #4]
   d5c6a:	68db      	ldr	r3, [r3, #12]
   d5c6c:	4602      	mov	r2, r0
   d5c6e:	4620      	mov	r0, r4
    }
   d5c70:	b002      	add	sp, #8
   d5c72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d5c76:	4718      	bx	r3
    }
   d5c78:	b002      	add	sp, #8
   d5c7a:	bd10      	pop	{r4, pc}

000d5c7c <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d5c7c:	b508      	push	{r3, lr}
  return write(str);
   d5c7e:	f7ff ffeb 	bl	d5c58 <_ZN5Print5writeEPKc>
}
   d5c82:	bd08      	pop	{r3, pc}

000d5c84 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d5c84:	6803      	ldr	r3, [r0, #0]
   d5c86:	689b      	ldr	r3, [r3, #8]
   d5c88:	4718      	bx	r3

000d5c8a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5c8a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5c8c:	210d      	movs	r1, #13
{
   d5c8e:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5c90:	f7ff fff8 	bl	d5c84 <_ZN5Print5printEc>
  n += print('\n');
   d5c94:	210a      	movs	r1, #10
  size_t n = print('\r');
   d5c96:	4604      	mov	r4, r0
  n += print('\n');
   d5c98:	4628      	mov	r0, r5
   d5c9a:	f7ff fff3 	bl	d5c84 <_ZN5Print5printEc>
  return n;
}
   d5c9e:	4420      	add	r0, r4
   d5ca0:	bd38      	pop	{r3, r4, r5, pc}

000d5ca2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d5ca2:	b538      	push	{r3, r4, r5, lr}
   d5ca4:	4605      	mov	r5, r0
  return write(str);
   d5ca6:	f7ff ffd7 	bl	d5c58 <_ZN5Print5writeEPKc>
   d5caa:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d5cac:	4628      	mov	r0, r5
   d5cae:	f7ff ffec 	bl	d5c8a <_ZN5Print7printlnEv>
  return n;
}
   d5cb2:	4420      	add	r0, r4
   d5cb4:	bd38      	pop	{r3, r4, r5, pc}

000d5cb6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5cb6:	b530      	push	{r4, r5, lr}
   d5cb8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5cba:	2300      	movs	r3, #0
   d5cbc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5cc0:	2a01      	cmp	r2, #1
   d5cc2:	bf98      	it	ls
   d5cc4:	220a      	movls	r2, #10
   d5cc6:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d5cc8:	460d      	mov	r5, r1
   d5cca:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d5cce:	fb01 5312 	mls	r3, r1, r2, r5
   d5cd2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5cd6:	2b09      	cmp	r3, #9
   d5cd8:	bf94      	ite	ls
   d5cda:	3330      	addls	r3, #48	; 0x30
   d5cdc:	3337      	addhi	r3, #55	; 0x37
   d5cde:	b2db      	uxtb	r3, r3
  } while(n);
   d5ce0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5ce2:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d5ce6:	d9ef      	bls.n	d5cc8 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d5ce8:	4621      	mov	r1, r4
   d5cea:	f7ff ffb5 	bl	d5c58 <_ZN5Print5writeEPKc>
}
   d5cee:	b00b      	add	sp, #44	; 0x2c
   d5cf0:	bd30      	pop	{r4, r5, pc}
	...

000d5cf4 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d5cf4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5cf8:	ec55 4b10 	vmov	r4, r5, d0
   d5cfc:	4606      	mov	r6, r0
   d5cfe:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d5d00:	ee10 2a10 	vmov	r2, s0
   d5d04:	ee10 0a10 	vmov	r0, s0
   d5d08:	462b      	mov	r3, r5
   d5d0a:	4629      	mov	r1, r5
   d5d0c:	f001 f9a6 	bl	d705c <__aeabi_dcmpun>
   d5d10:	b140      	cbz	r0, d5d24 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   d5d12:	4953      	ldr	r1, [pc, #332]	; (d5e60 <_ZN5Print10printFloatEdh+0x16c>)
   d5d14:	4630      	mov	r0, r6
   d5d16:	f7ff ff9f 	bl	d5c58 <_ZN5Print5writeEPKc>
   d5d1a:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   d5d1c:	4650      	mov	r0, sl
   d5d1e:	b003      	add	sp, #12
   d5d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   d5d24:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   d5d28:	4b4e      	ldr	r3, [pc, #312]	; (d5e64 <_ZN5Print10printFloatEdh+0x170>)
   d5d2a:	f04f 32ff 	mov.w	r2, #4294967295
   d5d2e:	4620      	mov	r0, r4
   d5d30:	4649      	mov	r1, r9
   d5d32:	f001 f993 	bl	d705c <__aeabi_dcmpun>
   d5d36:	b948      	cbnz	r0, d5d4c <_ZN5Print10printFloatEdh+0x58>
   d5d38:	4b4a      	ldr	r3, [pc, #296]	; (d5e64 <_ZN5Print10printFloatEdh+0x170>)
   d5d3a:	f04f 32ff 	mov.w	r2, #4294967295
   d5d3e:	4620      	mov	r0, r4
   d5d40:	4649      	mov	r1, r9
   d5d42:	f001 f96d 	bl	d7020 <__aeabi_dcmple>
   d5d46:	b908      	cbnz	r0, d5d4c <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   d5d48:	4947      	ldr	r1, [pc, #284]	; (d5e68 <_ZN5Print10printFloatEdh+0x174>)
   d5d4a:	e7e3      	b.n	d5d14 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d5d4c:	4b47      	ldr	r3, [pc, #284]	; (d5e6c <_ZN5Print10printFloatEdh+0x178>)
   d5d4e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d5d52:	4620      	mov	r0, r4
   d5d54:	4629      	mov	r1, r5
   d5d56:	f001 f977 	bl	d7048 <__aeabi_dcmpgt>
   d5d5a:	b108      	cbz	r0, d5d60 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   d5d5c:	4944      	ldr	r1, [pc, #272]	; (d5e70 <_ZN5Print10printFloatEdh+0x17c>)
   d5d5e:	e7d9      	b.n	d5d14 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d5d60:	4b44      	ldr	r3, [pc, #272]	; (d5e74 <_ZN5Print10printFloatEdh+0x180>)
   d5d62:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d5d66:	4620      	mov	r0, r4
   d5d68:	4629      	mov	r1, r5
   d5d6a:	f001 f94f 	bl	d700c <__aeabi_dcmplt>
   d5d6e:	2800      	cmp	r0, #0
   d5d70:	d1f4      	bne.n	d5d5c <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   d5d72:	2200      	movs	r2, #0
   d5d74:	2300      	movs	r3, #0
   d5d76:	4620      	mov	r0, r4
   d5d78:	4629      	mov	r1, r5
   d5d7a:	f001 f947 	bl	d700c <__aeabi_dcmplt>
   d5d7e:	b1d0      	cbz	r0, d5db6 <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   d5d80:	212d      	movs	r1, #45	; 0x2d
   d5d82:	4630      	mov	r0, r6
   d5d84:	f7ff ff7e 	bl	d5c84 <_ZN5Print5printEc>
     number = -number;
   d5d88:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   d5d8c:	4682      	mov	sl, r0
     number = -number;
   d5d8e:	461d      	mov	r5, r3
  double rounding = 0.5;
   d5d90:	4939      	ldr	r1, [pc, #228]	; (d5e78 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   d5d92:	f8df 90ec 	ldr.w	r9, [pc, #236]	; d5e80 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   d5d96:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   d5d9a:	2000      	movs	r0, #0
    rounding /= 10.0;
   d5d9c:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   d5da0:	fa5f f38b 	uxtb.w	r3, fp
   d5da4:	429f      	cmp	r7, r3
   d5da6:	d908      	bls.n	d5dba <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   d5da8:	4642      	mov	r2, r8
   d5daa:	464b      	mov	r3, r9
   d5dac:	f000 ffe6 	bl	d6d7c <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   d5db0:	f10b 0b01 	add.w	fp, fp, #1
   d5db4:	e7f4      	b.n	d5da0 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   d5db6:	4682      	mov	sl, r0
   d5db8:	e7ea      	b.n	d5d90 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   d5dba:	4622      	mov	r2, r4
   d5dbc:	462b      	mov	r3, r5
   d5dbe:	f000 fcfd 	bl	d67bc <__adddf3>
   d5dc2:	460d      	mov	r5, r1
   d5dc4:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   d5dc6:	f001 f987 	bl	d70d8 <__aeabi_d2uiz>
   d5dca:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   d5dcc:	f000 fe32 	bl	d6a34 <__aeabi_ui2d>
   d5dd0:	4602      	mov	r2, r0
   d5dd2:	460b      	mov	r3, r1
   d5dd4:	4620      	mov	r0, r4
   d5dd6:	4629      	mov	r1, r5
   d5dd8:	f000 fcee 	bl	d67b8 <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d5ddc:	220a      	movs	r2, #10
   d5dde:	4604      	mov	r4, r0
   d5de0:	460d      	mov	r5, r1
   d5de2:	4630      	mov	r0, r6
   d5de4:	4641      	mov	r1, r8
   d5de6:	f7ff ff66 	bl	d5cb6 <_ZN5Print11printNumberEmh>
  n += print(int_part);
   d5dea:	4482      	add	sl, r0
  if (digits > 0) {
   d5dec:	b127      	cbz	r7, d5df8 <_ZN5Print10printFloatEdh+0x104>
  return write(str);
   d5dee:	4923      	ldr	r1, [pc, #140]	; (d5e7c <_ZN5Print10printFloatEdh+0x188>)
   d5df0:	4630      	mov	r0, r6
   d5df2:	f7ff ff31 	bl	d5c58 <_ZN5Print5writeEPKc>
    n += print(".");
   d5df6:	4482      	add	sl, r0
    remainder *= 10.0;
   d5df8:	f8df 9084 	ldr.w	r9, [pc, #132]	; d5e80 <_ZN5Print10printFloatEdh+0x18c>
   d5dfc:	f04f 0800 	mov.w	r8, #0
  while (digits-- > 0)
   d5e00:	3f01      	subs	r7, #1
   d5e02:	b2ff      	uxtb	r7, r7
   d5e04:	2fff      	cmp	r7, #255	; 0xff
   d5e06:	d089      	beq.n	d5d1c <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   d5e08:	4642      	mov	r2, r8
   d5e0a:	464b      	mov	r3, r9
   d5e0c:	4620      	mov	r0, r4
   d5e0e:	4629      	mov	r1, r5
   d5e10:	f000 fe8a 	bl	d6b28 <__aeabi_dmul>
   d5e14:	4604      	mov	r4, r0
   d5e16:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   d5e18:	f001 f936 	bl	d7088 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   d5e1c:	f1b0 0b00 	subs.w	fp, r0, #0
   d5e20:	da1a      	bge.n	d5e58 <_ZN5Print10printFloatEdh+0x164>
            t = print('-');
   d5e22:	212d      	movs	r1, #45	; 0x2d
   d5e24:	4630      	mov	r0, r6
   d5e26:	f7ff ff2d 	bl	d5c84 <_ZN5Print5printEc>
            val = -n;
   d5e2a:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   d5e2e:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   d5e30:	220a      	movs	r2, #10
   d5e32:	4630      	mov	r0, r6
   d5e34:	9301      	str	r3, [sp, #4]
   d5e36:	f7ff ff3e 	bl	d5cb6 <_ZN5Print11printNumberEmh>
   d5e3a:	9b01      	ldr	r3, [sp, #4]
   d5e3c:	4418      	add	r0, r3
    n += print(toPrint);
   d5e3e:	4482      	add	sl, r0
    remainder -= toPrint;
   d5e40:	4658      	mov	r0, fp
   d5e42:	f000 fe07 	bl	d6a54 <__aeabi_i2d>
   d5e46:	4602      	mov	r2, r0
   d5e48:	460b      	mov	r3, r1
   d5e4a:	4620      	mov	r0, r4
   d5e4c:	4629      	mov	r1, r5
   d5e4e:	f000 fcb3 	bl	d67b8 <__aeabi_dsub>
   d5e52:	4604      	mov	r4, r0
   d5e54:	460d      	mov	r5, r1
  while (digits-- > 0)
   d5e56:	e7d3      	b.n	d5e00 <_ZN5Print10printFloatEdh+0x10c>
            val = n;
   d5e58:	4659      	mov	r1, fp
        size_t t = 0;
   d5e5a:	2300      	movs	r3, #0
   d5e5c:	e7e8      	b.n	d5e30 <_ZN5Print10printFloatEdh+0x13c>
   d5e5e:	bf00      	nop
   d5e60:	000d7d5c 	.word	0x000d7d5c
   d5e64:	7fefffff 	.word	0x7fefffff
   d5e68:	000d7d60 	.word	0x000d7d60
   d5e6c:	41efffff 	.word	0x41efffff
   d5e70:	000d7d64 	.word	0x000d7d64
   d5e74:	c1efffff 	.word	0xc1efffff
   d5e78:	3fe00000 	.word	0x3fe00000
   d5e7c:	000d7d68 	.word	0x000d7d68
   d5e80:	40240000 	.word	0x40240000

000d5e84 <_ZN5Print7printlnEdi>:
{
   d5e84:	b538      	push	{r3, r4, r5, lr}
  return printFloat(n, digits);
   d5e86:	b2c9      	uxtb	r1, r1
{
   d5e88:	4605      	mov	r5, r0
  return printFloat(n, digits);
   d5e8a:	f7ff ff33 	bl	d5cf4 <_ZN5Print10printFloatEdh>
   d5e8e:	4604      	mov	r4, r0
  n += println();
   d5e90:	4628      	mov	r0, r5
   d5e92:	f7ff fefa 	bl	d5c8a <_ZN5Print7printlnEv>
}
   d5e96:	4420      	add	r0, r4
   d5e98:	bd38      	pop	{r3, r4, r5, pc}

000d5e9a <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d5e9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5e9e:	b086      	sub	sp, #24
   d5ea0:	af00      	add	r7, sp, #0
   d5ea2:	4605      	mov	r5, r0
   d5ea4:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d5ea6:	1d38      	adds	r0, r7, #4
   d5ea8:	2114      	movs	r1, #20
{
   d5eaa:	4614      	mov	r4, r2
    va_copy(args2, args);
   d5eac:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d5eae:	f7ff fd7d 	bl	d59ac <vsnprintf>

    if (n<bufsize)
   d5eb2:	2813      	cmp	r0, #19
   d5eb4:	d80e      	bhi.n	d5ed4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d5eb6:	1d39      	adds	r1, r7, #4
   d5eb8:	4628      	mov	r0, r5
   d5eba:	f7ff fecd 	bl	d5c58 <_ZN5Print5writeEPKc>
   d5ebe:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d5ec0:	b11e      	cbz	r6, d5eca <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d5ec2:	4628      	mov	r0, r5
   d5ec4:	f7ff fee1 	bl	d5c8a <_ZN5Print7printlnEv>
   d5ec8:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d5eca:	4620      	mov	r0, r4
   d5ecc:	3718      	adds	r7, #24
   d5ece:	46bd      	mov	sp, r7
   d5ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d5ed4:	f100 0308 	add.w	r3, r0, #8
   d5ed8:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d5edc:	46e8      	mov	r8, sp
        char bigger[n+1];
   d5ede:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d5ee2:	4622      	mov	r2, r4
   d5ee4:	1c41      	adds	r1, r0, #1
   d5ee6:	683b      	ldr	r3, [r7, #0]
   d5ee8:	4668      	mov	r0, sp
   d5eea:	f7ff fd5f 	bl	d59ac <vsnprintf>
  return write(str);
   d5eee:	4669      	mov	r1, sp
   d5ef0:	4628      	mov	r0, r5
   d5ef2:	f7ff feb1 	bl	d5c58 <_ZN5Print5writeEPKc>
   d5ef6:	4604      	mov	r4, r0
   d5ef8:	46c5      	mov	sp, r8
   d5efa:	e7e1      	b.n	d5ec0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d5efc <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d5efc:	2300      	movs	r3, #0
   d5efe:	6840      	ldr	r0, [r0, #4]
   d5f00:	461a      	mov	r2, r3
   d5f02:	4619      	mov	r1, r3
   d5f04:	f7ff bcfa 	b.w	d58fc <network_on>

000d5f08 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5f08:	4b01      	ldr	r3, [pc, #4]	; (d5f10 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5f0a:	4a02      	ldr	r2, [pc, #8]	; (d5f14 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5f0c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d5f0e:	4770      	bx	lr
   d5f10:	2003e66c 	.word	0x2003e66c
   d5f14:	000d7d6a 	.word	0x000d7d6a

000d5f18 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5f18:	4b02      	ldr	r3, [pc, #8]	; (d5f24 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5f1a:	681a      	ldr	r2, [r3, #0]
   d5f1c:	4b02      	ldr	r3, [pc, #8]	; (d5f28 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5f1e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d5f20:	4770      	bx	lr
   d5f22:	bf00      	nop
   d5f24:	2003e55c 	.word	0x2003e55c
   d5f28:	2003e670 	.word	0x2003e670

000d5f2c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5f2c:	2100      	movs	r1, #0
   d5f2e:	f7ff bca1 	b.w	d5874 <system_delay_ms>

000d5f32 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5f32:	b510      	push	{r4, lr}
   d5f34:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5f36:	f7ff fe5b 	bl	d5bf0 <_ZNSt14_Function_baseD1Ev>
   d5f3a:	4620      	mov	r0, r4
   d5f3c:	bd10      	pop	{r4, pc}
	...

000d5f40 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d5f40:	4803      	ldr	r0, [pc, #12]	; (d5f50 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5f42:	4a04      	ldr	r2, [pc, #16]	; (d5f54 <_GLOBAL__sub_I_RGB+0x14>)
   d5f44:	4904      	ldr	r1, [pc, #16]	; (d5f58 <_GLOBAL__sub_I_RGB+0x18>)
   d5f46:	2300      	movs	r3, #0
   d5f48:	6083      	str	r3, [r0, #8]
   d5f4a:	f000 bc27 	b.w	d679c <__aeabi_atexit>
   d5f4e:	bf00      	nop
   d5f50:	2003e674 	.word	0x2003e674
   d5f54:	2003e5c4 	.word	0x2003e5c4
   d5f58:	000d5f33 	.word	0x000d5f33

000d5f5c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d5f5c:	4b01      	ldr	r3, [pc, #4]	; (d5f64 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d5f5e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d5f60:	4770      	bx	lr
   d5f62:	bf00      	nop
   d5f64:	2003e560 	.word	0x2003e560

000d5f68 <serialEventRun>:
{
   d5f68:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5f6a:	4b0b      	ldr	r3, [pc, #44]	; (d5f98 <serialEventRun+0x30>)
   d5f6c:	b143      	cbz	r3, d5f80 <serialEventRun+0x18>
   d5f6e:	f000 f957 	bl	d6220 <_Z16_fetch_usbserialv>
   d5f72:	6803      	ldr	r3, [r0, #0]
   d5f74:	691b      	ldr	r3, [r3, #16]
   d5f76:	4798      	blx	r3
   d5f78:	2800      	cmp	r0, #0
   d5f7a:	dd01      	ble.n	d5f80 <serialEventRun+0x18>
        serialEvent();
   d5f7c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d5f80:	4b06      	ldr	r3, [pc, #24]	; (d5f9c <serialEventRun+0x34>)
   d5f82:	b143      	cbz	r3, d5f96 <serialEventRun+0x2e>
   d5f84:	f000 f9ca 	bl	d631c <_Z22__fetch_global_Serial1v>
   d5f88:	6803      	ldr	r3, [r0, #0]
   d5f8a:	691b      	ldr	r3, [r3, #16]
   d5f8c:	4798      	blx	r3
   d5f8e:	2800      	cmp	r0, #0
   d5f90:	dd01      	ble.n	d5f96 <serialEventRun+0x2e>
        serialEvent1();
   d5f92:	f3af 8000 	nop.w
}
   d5f96:	bd08      	pop	{r3, pc}
	...

000d5fa0 <_post_loop>:
{
   d5fa0:	b508      	push	{r3, lr}
	serialEventRun();
   d5fa2:	f7ff ffe1 	bl	d5f68 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5fa6:	f7ff fb1d 	bl	d55e4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5faa:	4b01      	ldr	r3, [pc, #4]	; (d5fb0 <_post_loop+0x10>)
   d5fac:	6018      	str	r0, [r3, #0]
}
   d5fae:	bd08      	pop	{r3, pc}
   d5fb0:	2003e7d4 	.word	0x2003e7d4

000d5fb4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5fb4:	4802      	ldr	r0, [pc, #8]	; (d5fc0 <_Z33system_initialize_user_backup_ramv+0xc>)
   d5fb6:	4a03      	ldr	r2, [pc, #12]	; (d5fc4 <_Z33system_initialize_user_backup_ramv+0x10>)
   d5fb8:	4903      	ldr	r1, [pc, #12]	; (d5fc8 <_Z33system_initialize_user_backup_ramv+0x14>)
   d5fba:	1a12      	subs	r2, r2, r0
   d5fbc:	f001 b8ba 	b.w	d7134 <memcpy>
   d5fc0:	2003f400 	.word	0x2003f400
   d5fc4:	2003f404 	.word	0x2003f404
   d5fc8:	000d7ed0 	.word	0x000d7ed0

000d5fcc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5fcc:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5fce:	2300      	movs	r3, #0
   d5fd0:	9300      	str	r3, [sp, #0]
   d5fd2:	461a      	mov	r2, r3
   d5fd4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5fd8:	f7ff fc66 	bl	d58a8 <system_ctrl_set_result>
}
   d5fdc:	b003      	add	sp, #12
   d5fde:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5fe4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d5fe4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5fe6:	8843      	ldrh	r3, [r0, #2]
   d5fe8:	2b0a      	cmp	r3, #10
   d5fea:	d008      	beq.n	d5ffe <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5fec:	2b50      	cmp	r3, #80	; 0x50
   d5fee:	d10b      	bne.n	d6008 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d5ff0:	4b09      	ldr	r3, [pc, #36]	; (d6018 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5ff2:	681b      	ldr	r3, [r3, #0]
   d5ff4:	b14b      	cbz	r3, d600a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d5ff6:	b003      	add	sp, #12
   d5ff8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d5ffc:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d5ffe:	f7ff ffe5 	bl	d5fcc <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d6002:	b003      	add	sp, #12
   d6004:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6008:	2300      	movs	r3, #0
   d600a:	9300      	str	r3, [sp, #0]
   d600c:	461a      	mov	r2, r3
   d600e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6012:	f7ff fc49 	bl	d58a8 <system_ctrl_set_result>
}
   d6016:	e7f4      	b.n	d6002 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d6018:	2003e688 	.word	0x2003e688

000d601c <module_user_init_hook>:
{
   d601c:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d601e:	4c12      	ldr	r4, [pc, #72]	; (d6068 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d6020:	4812      	ldr	r0, [pc, #72]	; (d606c <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6022:	4d13      	ldr	r5, [pc, #76]	; (d6070 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d6024:	2100      	movs	r1, #0
   d6026:	f7ff fcc9 	bl	d59bc <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d602a:	6823      	ldr	r3, [r4, #0]
   d602c:	42ab      	cmp	r3, r5
   d602e:	4b11      	ldr	r3, [pc, #68]	; (d6074 <module_user_init_hook+0x58>)
   d6030:	bf0c      	ite	eq
   d6032:	2201      	moveq	r2, #1
   d6034:	2200      	movne	r2, #0
   d6036:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d6038:	d002      	beq.n	d6040 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d603a:	f7ff ffbb 	bl	d5fb4 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d603e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d6040:	f7ff fac0 	bl	d55c4 <HAL_RNG_GetRandomNumber>
   d6044:	4604      	mov	r4, r0
    srand(seed);
   d6046:	f001 f88b 	bl	d7160 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d604a:	4b0b      	ldr	r3, [pc, #44]	; (d6078 <module_user_init_hook+0x5c>)
   d604c:	b113      	cbz	r3, d6054 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d604e:	4620      	mov	r0, r4
   d6050:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6054:	2100      	movs	r1, #0
   d6056:	4808      	ldr	r0, [pc, #32]	; (d6078 <module_user_init_hook+0x5c>)
   d6058:	f7ff fc90 	bl	d597c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d605c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6060:	4806      	ldr	r0, [pc, #24]	; (d607c <module_user_init_hook+0x60>)
   d6062:	2100      	movs	r1, #0
   d6064:	f7ff bc16 	b.w	d5894 <system_ctrl_set_app_request_handler>
   d6068:	2003f400 	.word	0x2003f400
   d606c:	000d5f5d 	.word	0x000d5f5d
   d6070:	9a271c1e 	.word	0x9a271c1e
   d6074:	2003e684 	.word	0x2003e684
   d6078:	00000000 	.word	0x00000000
   d607c:	000d5fe5 	.word	0x000d5fe5

000d6080 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d6080:	4770      	bx	lr

000d6082 <_ZN9IPAddressD0Ev>:
   d6082:	b510      	push	{r4, lr}
   d6084:	2118      	movs	r1, #24
   d6086:	4604      	mov	r4, r0
   d6088:	f000 fb8d 	bl	d67a6 <_ZdlPvj>
   d608c:	4620      	mov	r0, r4
   d608e:	bd10      	pop	{r4, pc}

000d6090 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6090:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6092:	7d03      	ldrb	r3, [r0, #20]
   d6094:	2b06      	cmp	r3, #6
{
   d6096:	b08d      	sub	sp, #52	; 0x34
   d6098:	460e      	mov	r6, r1
   d609a:	f100 0704 	add.w	r7, r0, #4
   d609e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d60a2:	d012      	beq.n	d60ca <_ZNK9IPAddress7printToER5Print+0x3a>
   d60a4:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   d60a8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d60ac:	220a      	movs	r2, #10
   d60ae:	4630      	mov	r0, r6
   d60b0:	f7ff fe01 	bl	d5cb6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d60b4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d60b6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d60b8:	d019      	beq.n	d60ee <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d60ba:	2c00      	cmp	r4, #0
   d60bc:	d0f4      	beq.n	d60a8 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d60be:	212e      	movs	r1, #46	; 0x2e
   d60c0:	4630      	mov	r0, r6
   d60c2:	f7ff fddf 	bl	d5c84 <_ZN5Print5printEc>
   d60c6:	4404      	add	r4, r0
   d60c8:	e7ee      	b.n	d60a8 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d60ca:	232f      	movs	r3, #47	; 0x2f
   d60cc:	466a      	mov	r2, sp
   d60ce:	4639      	mov	r1, r7
   d60d0:	200a      	movs	r0, #10
		buf[0] = 0;
   d60d2:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d60d6:	f7ff faad 	bl	d5634 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d60da:	4668      	mov	r0, sp
   d60dc:	f001 f864 	bl	d71a8 <strlen>
   d60e0:	6833      	ldr	r3, [r6, #0]
   d60e2:	4602      	mov	r2, r0
   d60e4:	68db      	ldr	r3, [r3, #12]
   d60e6:	4669      	mov	r1, sp
   d60e8:	4630      	mov	r0, r6
   d60ea:	4798      	blx	r3
   d60ec:	4604      	mov	r4, r0
    }
    return n;
}
   d60ee:	4620      	mov	r0, r4
   d60f0:	b00d      	add	sp, #52	; 0x34
   d60f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d60f4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d60f4:	b510      	push	{r4, lr}
   d60f6:	4b05      	ldr	r3, [pc, #20]	; (d610c <_ZN9IPAddressC1Ev+0x18>)
   d60f8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d60fa:	2211      	movs	r2, #17
   d60fc:	f840 3b04 	str.w	r3, [r0], #4
   d6100:	2100      	movs	r1, #0
   d6102:	f001 f825 	bl	d7150 <memset>
}
   d6106:	4620      	mov	r0, r4
   d6108:	bd10      	pop	{r4, pc}
   d610a:	bf00      	nop
   d610c:	000d7d94 	.word	0x000d7d94

000d6110 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d6110:	4603      	mov	r3, r0
   d6112:	4a07      	ldr	r2, [pc, #28]	; (d6130 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6114:	b510      	push	{r4, lr}
   d6116:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d611a:	f101 0210 	add.w	r2, r1, #16
   d611e:	f851 4b04 	ldr.w	r4, [r1], #4
   d6122:	f843 4b04 	str.w	r4, [r3], #4
   d6126:	4291      	cmp	r1, r2
   d6128:	d1f9      	bne.n	d611e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d612a:	780a      	ldrb	r2, [r1, #0]
   d612c:	701a      	strb	r2, [r3, #0]
}
   d612e:	bd10      	pop	{r4, pc}
   d6130:	000d7d94 	.word	0x000d7d94

000d6134 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d6134:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d6136:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d613a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d613e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d6142:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d6146:	2304      	movs	r3, #4
   d6148:	6041      	str	r1, [r0, #4]
   d614a:	7503      	strb	r3, [r0, #20]
}
   d614c:	bd10      	pop	{r4, pc}
	...

000d6150 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d6150:	b513      	push	{r0, r1, r4, lr}
   d6152:	4b05      	ldr	r3, [pc, #20]	; (d6168 <_ZN9IPAddressC1EPKh+0x18>)
   d6154:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d6156:	78cb      	ldrb	r3, [r1, #3]
   d6158:	9300      	str	r3, [sp, #0]
   d615a:	788b      	ldrb	r3, [r1, #2]
   d615c:	784a      	ldrb	r2, [r1, #1]
   d615e:	7809      	ldrb	r1, [r1, #0]
   d6160:	f7ff ffe8 	bl	d6134 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d6164:	b002      	add	sp, #8
   d6166:	bd10      	pop	{r4, pc}
   d6168:	000d7d94 	.word	0x000d7d94

000d616c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d616c:	7441      	strb	r1, [r0, #17]
}
   d616e:	4770      	bx	lr

000d6170 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6170:	4770      	bx	lr

000d6172 <_ZN9USBSerial4readEv>:
{
   d6172:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6174:	2100      	movs	r1, #0
   d6176:	7c00      	ldrb	r0, [r0, #16]
   d6178:	f7ff fb54 	bl	d5824 <HAL_USB_USART_Receive_Data>
}
   d617c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6180:	bd08      	pop	{r3, pc}

000d6182 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d6182:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d6184:	2101      	movs	r1, #1
   d6186:	7c00      	ldrb	r0, [r0, #16]
   d6188:	f7ff fb4c 	bl	d5824 <HAL_USB_USART_Receive_Data>
}
   d618c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6190:	bd08      	pop	{r3, pc}

000d6192 <_ZN9USBSerial17availableForWriteEv>:
{
   d6192:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6194:	7c00      	ldrb	r0, [r0, #16]
   d6196:	f7ff fb3d 	bl	d5814 <HAL_USB_USART_Available_Data_For_Write>
}
   d619a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d619e:	bd08      	pop	{r3, pc}

000d61a0 <_ZN9USBSerial9availableEv>:
{
   d61a0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d61a2:	7c00      	ldrb	r0, [r0, #16]
   d61a4:	f7ff fb2e 	bl	d5804 <HAL_USB_USART_Available_Data>
}
   d61a8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d61ac:	bd08      	pop	{r3, pc}

000d61ae <_ZN9USBSerial5writeEh>:
{
   d61ae:	b513      	push	{r0, r1, r4, lr}
   d61b0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d61b2:	7c00      	ldrb	r0, [r0, #16]
{
   d61b4:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d61b6:	f7ff fb2d 	bl	d5814 <HAL_USB_USART_Available_Data_For_Write>
   d61ba:	2800      	cmp	r0, #0
   d61bc:	9901      	ldr	r1, [sp, #4]
   d61be:	dc01      	bgt.n	d61c4 <_ZN9USBSerial5writeEh+0x16>
   d61c0:	7c60      	ldrb	r0, [r4, #17]
   d61c2:	b120      	cbz	r0, d61ce <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d61c4:	7c20      	ldrb	r0, [r4, #16]
   d61c6:	f7ff fb35 	bl	d5834 <HAL_USB_USART_Send_Data>
   d61ca:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d61ce:	b002      	add	sp, #8
   d61d0:	bd10      	pop	{r4, pc}

000d61d2 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d61d2:	7c00      	ldrb	r0, [r0, #16]
   d61d4:	f7ff bb36 	b.w	d5844 <HAL_USB_USART_Flush_Data>

000d61d8 <_ZN9USBSerialD0Ev>:
   d61d8:	b510      	push	{r4, lr}
   d61da:	2114      	movs	r1, #20
   d61dc:	4604      	mov	r4, r0
   d61de:	f000 fae2 	bl	d67a6 <_ZdlPvj>
   d61e2:	4620      	mov	r0, r4
   d61e4:	bd10      	pop	{r4, pc}
	...

000d61e8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d61e8:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d61ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d61ee:	4604      	mov	r4, r0
   d61f0:	4608      	mov	r0, r1
   d61f2:	2100      	movs	r1, #0
   d61f4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d61f8:	4b04      	ldr	r3, [pc, #16]	; (d620c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d61fa:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d61fc:	2301      	movs	r3, #1
  _serial = serial;
   d61fe:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d6200:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d6202:	4611      	mov	r1, r2
   d6204:	f7ff faf6 	bl	d57f4 <HAL_USB_USART_Init>
}
   d6208:	4620      	mov	r0, r4
   d620a:	bd10      	pop	{r4, pc}
   d620c:	000d7da8 	.word	0x000d7da8

000d6210 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6210:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d6212:	2214      	movs	r2, #20
{
   d6214:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6216:	2100      	movs	r1, #0
   d6218:	f000 ff9a 	bl	d7150 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d621c:	4620      	mov	r0, r4
   d621e:	bd10      	pop	{r4, pc}

000d6220 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6220:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6222:	4c10      	ldr	r4, [pc, #64]	; (d6264 <_Z16_fetch_usbserialv+0x44>)
{
   d6224:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d6226:	a803      	add	r0, sp, #12
   d6228:	f7ff fff2 	bl	d6210 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d622c:	7821      	ldrb	r1, [r4, #0]
   d622e:	f3bf 8f5b 	dmb	ish
   d6232:	f011 0101 	ands.w	r1, r1, #1
   d6236:	d111      	bne.n	d625c <_Z16_fetch_usbserialv+0x3c>
   d6238:	4620      	mov	r0, r4
   d623a:	9101      	str	r1, [sp, #4]
   d623c:	f7fd ff3a 	bl	d40b4 <__cxa_guard_acquire>
   d6240:	9901      	ldr	r1, [sp, #4]
   d6242:	b158      	cbz	r0, d625c <_Z16_fetch_usbserialv+0x3c>
   d6244:	aa03      	add	r2, sp, #12
   d6246:	4808      	ldr	r0, [pc, #32]	; (d6268 <_Z16_fetch_usbserialv+0x48>)
   d6248:	f7ff ffce 	bl	d61e8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d624c:	4620      	mov	r0, r4
   d624e:	f7fd ff36 	bl	d40be <__cxa_guard_release>
   d6252:	4a06      	ldr	r2, [pc, #24]	; (d626c <_Z16_fetch_usbserialv+0x4c>)
   d6254:	4906      	ldr	r1, [pc, #24]	; (d6270 <_Z16_fetch_usbserialv+0x50>)
   d6256:	4804      	ldr	r0, [pc, #16]	; (d6268 <_Z16_fetch_usbserialv+0x48>)
   d6258:	f000 faa0 	bl	d679c <__aeabi_atexit>
	return _usbserial;
}
   d625c:	4802      	ldr	r0, [pc, #8]	; (d6268 <_Z16_fetch_usbserialv+0x48>)
   d625e:	b008      	add	sp, #32
   d6260:	bd10      	pop	{r4, pc}
   d6262:	bf00      	nop
   d6264:	2003e68c 	.word	0x2003e68c
   d6268:	2003e690 	.word	0x2003e690
   d626c:	2003e5c4 	.word	0x2003e5c4
   d6270:	000d6171 	.word	0x000d6171

000d6274 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d6274:	4770      	bx	lr

000d6276 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6276:	7441      	strb	r1, [r0, #17]
}
   d6278:	4770      	bx	lr

000d627a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d627a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d627c:	7c00      	ldrb	r0, [r0, #16]
   d627e:	f7ff fa19 	bl	d56b4 <hal_usart_available_data_for_write>
}
   d6282:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6286:	bd08      	pop	{r3, pc}

000d6288 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d6288:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d628a:	7c00      	ldrb	r0, [r0, #16]
   d628c:	f7ff f9ea 	bl	d5664 <hal_usart_available>
}
   d6290:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6294:	bd08      	pop	{r3, pc}

000d6296 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d6296:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d6298:	7c00      	ldrb	r0, [r0, #16]
   d629a:	f7ff f9f3 	bl	d5684 <hal_usart_peek>
}
   d629e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d62a2:	bd08      	pop	{r3, pc}

000d62a4 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d62a4:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d62a6:	7c00      	ldrb	r0, [r0, #16]
   d62a8:	f7ff f9e4 	bl	d5674 <hal_usart_read>
}
   d62ac:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d62b0:	bd08      	pop	{r3, pc}

000d62b2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d62b2:	7c00      	ldrb	r0, [r0, #16]
   d62b4:	f7ff b9ee 	b.w	d5694 <hal_usart_flush>

000d62b8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d62b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d62ba:	7c45      	ldrb	r5, [r0, #17]
{
   d62bc:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d62be:	b12d      	cbz	r5, d62cc <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d62c0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d62c2:	b003      	add	sp, #12
   d62c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d62c8:	f7ff b9c4 	b.w	d5654 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d62cc:	7c00      	ldrb	r0, [r0, #16]
   d62ce:	9101      	str	r1, [sp, #4]
   d62d0:	f7ff f9f0 	bl	d56b4 <hal_usart_available_data_for_write>
   d62d4:	2800      	cmp	r0, #0
   d62d6:	9901      	ldr	r1, [sp, #4]
   d62d8:	dcf2      	bgt.n	d62c0 <_ZN11USARTSerial5writeEh+0x8>
}
   d62da:	4628      	mov	r0, r5
   d62dc:	b003      	add	sp, #12
   d62de:	bd30      	pop	{r4, r5, pc}

000d62e0 <_ZN11USARTSerialD0Ev>:
   d62e0:	b510      	push	{r4, lr}
   d62e2:	2114      	movs	r1, #20
   d62e4:	4604      	mov	r4, r0
   d62e6:	f000 fa5e 	bl	d67a6 <_ZdlPvj>
   d62ea:	4620      	mov	r0, r4
   d62ec:	bd10      	pop	{r4, pc}
	...

000d62f0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d62f0:	b510      	push	{r4, lr}
   d62f2:	f04f 0c00 	mov.w	ip, #0
   d62f6:	4604      	mov	r4, r0
   d62f8:	4608      	mov	r0, r1
   d62fa:	4611      	mov	r1, r2
   d62fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6300:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d6304:	4a04      	ldr	r2, [pc, #16]	; (d6318 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d6306:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d6308:	2201      	movs	r2, #1
  _serial = serial;
   d630a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d630c:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d630e:	461a      	mov	r2, r3
   d6310:	f7ff f998 	bl	d5644 <hal_usart_init>
}
   d6314:	4620      	mov	r0, r4
   d6316:	bd10      	pop	{r4, pc}
   d6318:	000d7dd8 	.word	0x000d7dd8

000d631c <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d631c:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d631e:	4c0e      	ldr	r4, [pc, #56]	; (d6358 <_Z22__fetch_global_Serial1v+0x3c>)
   d6320:	7821      	ldrb	r1, [r4, #0]
   d6322:	f3bf 8f5b 	dmb	ish
   d6326:	f011 0101 	ands.w	r1, r1, #1
   d632a:	d112      	bne.n	d6352 <_Z22__fetch_global_Serial1v+0x36>
   d632c:	4620      	mov	r0, r4
   d632e:	9101      	str	r1, [sp, #4]
   d6330:	f7fd fec0 	bl	d40b4 <__cxa_guard_acquire>
   d6334:	9901      	ldr	r1, [sp, #4]
   d6336:	b160      	cbz	r0, d6352 <_Z22__fetch_global_Serial1v+0x36>
   d6338:	4a08      	ldr	r2, [pc, #32]	; (d635c <_Z22__fetch_global_Serial1v+0x40>)
   d633a:	4b09      	ldr	r3, [pc, #36]	; (d6360 <_Z22__fetch_global_Serial1v+0x44>)
   d633c:	4809      	ldr	r0, [pc, #36]	; (d6364 <_Z22__fetch_global_Serial1v+0x48>)
   d633e:	f7ff ffd7 	bl	d62f0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d6342:	4620      	mov	r0, r4
   d6344:	f7fd febb 	bl	d40be <__cxa_guard_release>
   d6348:	4a07      	ldr	r2, [pc, #28]	; (d6368 <_Z22__fetch_global_Serial1v+0x4c>)
   d634a:	4908      	ldr	r1, [pc, #32]	; (d636c <_Z22__fetch_global_Serial1v+0x50>)
   d634c:	4805      	ldr	r0, [pc, #20]	; (d6364 <_Z22__fetch_global_Serial1v+0x48>)
   d634e:	f000 fa25 	bl	d679c <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d6352:	4804      	ldr	r0, [pc, #16]	; (d6364 <_Z22__fetch_global_Serial1v+0x48>)
   d6354:	b002      	add	sp, #8
   d6356:	bd10      	pop	{r4, pc}
   d6358:	2003e6a4 	.word	0x2003e6a4
   d635c:	2003e6a8 	.word	0x2003e6a8
   d6360:	2003e72c 	.word	0x2003e72c
   d6364:	2003e7b0 	.word	0x2003e7b0
   d6368:	2003e5c4 	.word	0x2003e5c4
   d636c:	000d6275 	.word	0x000d6275

000d6370 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d6370:	4770      	bx	lr

000d6372 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d6372:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6374:	4606      	mov	r6, r0
   d6376:	4615      	mov	r5, r2
   d6378:	460c      	mov	r4, r1
   d637a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d637c:	42bc      	cmp	r4, r7
   d637e:	d006      	beq.n	d638e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6380:	6833      	ldr	r3, [r6, #0]
   d6382:	f814 1b01 	ldrb.w	r1, [r4], #1
   d6386:	689b      	ldr	r3, [r3, #8]
   d6388:	4630      	mov	r0, r6
   d638a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d638c:	e7f6      	b.n	d637c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d638e:	4628      	mov	r0, r5
   d6390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6392 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d6392:	7c00      	ldrb	r0, [r0, #16]
   d6394:	2200      	movs	r2, #0
   d6396:	f7ff b9b5 	b.w	d5704 <hal_i2c_write>

000d639a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d639a:	7c00      	ldrb	r0, [r0, #16]
   d639c:	2100      	movs	r1, #0
   d639e:	f7ff b9b9 	b.w	d5714 <hal_i2c_available>

000d63a2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d63a2:	7c00      	ldrb	r0, [r0, #16]
   d63a4:	2100      	movs	r1, #0
   d63a6:	f7ff b9bd 	b.w	d5724 <hal_i2c_read>

000d63aa <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d63aa:	7c00      	ldrb	r0, [r0, #16]
   d63ac:	2100      	movs	r1, #0
   d63ae:	f7ff b9c1 	b.w	d5734 <hal_i2c_peek>

000d63b2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d63b2:	7c00      	ldrb	r0, [r0, #16]
   d63b4:	2100      	movs	r1, #0
   d63b6:	f7ff b9c5 	b.w	d5744 <hal_i2c_flush>

000d63ba <_ZN7TwoWireD0Ev>:
   d63ba:	b510      	push	{r4, lr}
   d63bc:	2114      	movs	r1, #20
   d63be:	4604      	mov	r4, r0
   d63c0:	f000 f9f1 	bl	d67a6 <_ZdlPvj>
   d63c4:	4620      	mov	r0, r4
   d63c6:	bd10      	pop	{r4, pc}

000d63c8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d63c8:	b510      	push	{r4, lr}
   d63ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d63ce:	4604      	mov	r4, r0
   d63d0:	4608      	mov	r0, r1
   d63d2:	2100      	movs	r1, #0
   d63d4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d63d8:	4b03      	ldr	r3, [pc, #12]	; (d63e8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d63da:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d63dc:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d63de:	4611      	mov	r1, r2
   d63e0:	f7ff f9c0 	bl	d5764 <hal_i2c_init>
}
   d63e4:	4620      	mov	r0, r4
   d63e6:	bd10      	pop	{r4, pc}
   d63e8:	000d7e08 	.word	0x000d7e08

000d63ec <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   d63ec:	7c00      	ldrb	r0, [r0, #16]
   d63ee:	2200      	movs	r2, #0
   d63f0:	f7ff b968 	b.w	d56c4 <hal_i2c_set_speed>

000d63f4 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d63f4:	2300      	movs	r3, #0
   d63f6:	7c00      	ldrb	r0, [r0, #16]
   d63f8:	461a      	mov	r2, r3
   d63fa:	4619      	mov	r1, r3
   d63fc:	f7ff b96a 	b.w	d56d4 <hal_i2c_begin>

000d6400 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d6400:	7c00      	ldrb	r0, [r0, #16]
   d6402:	2200      	movs	r2, #0
   d6404:	f7ff b96e 	b.w	d56e4 <hal_i2c_begin_transmission>

000d6408 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d6408:	b2c9      	uxtb	r1, r1
   d640a:	f7ff bff9 	b.w	d6400 <_ZN7TwoWire17beginTransmissionEh>

000d640e <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d640e:	7c00      	ldrb	r0, [r0, #16]
   d6410:	2200      	movs	r2, #0
   d6412:	f7ff b96f 	b.w	d56f4 <hal_i2c_end_transmission>

000d6416 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d6416:	2101      	movs	r1, #1
   d6418:	f7ff bff9 	b.w	d640e <_ZN7TwoWire15endTransmissionEh>

000d641c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d641c:	2200      	movs	r2, #0
   d641e:	6840      	ldr	r0, [r0, #4]
   d6420:	4611      	mov	r1, r2
   d6422:	f7ff ba63 	b.w	d58ec <network_ready>

000d6426 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6426:	2200      	movs	r2, #0
   d6428:	6840      	ldr	r0, [r0, #4]
   d642a:	4611      	mov	r1, r2
   d642c:	f7ff ba7e 	b.w	d592c <network_listening>

000d6430 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d6430:	2200      	movs	r2, #0
   d6432:	6840      	ldr	r0, [r0, #4]
   d6434:	4611      	mov	r1, r2
   d6436:	f7ff ba89 	b.w	d594c <network_get_listen_timeout>

000d643a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d643a:	6840      	ldr	r0, [r0, #4]
   d643c:	2200      	movs	r2, #0
   d643e:	f7ff ba7d 	b.w	d593c <network_set_listen_timeout>

000d6442 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d6442:	6840      	ldr	r0, [r0, #4]
   d6444:	2200      	movs	r2, #0
   d6446:	f081 0101 	eor.w	r1, r1, #1
   d644a:	f7ff ba67 	b.w	d591c <network_listen>

000d644e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d644e:	2300      	movs	r3, #0
   d6450:	6840      	ldr	r0, [r0, #4]
   d6452:	461a      	mov	r2, r3
   d6454:	4619      	mov	r1, r3
   d6456:	f7ff ba59 	b.w	d590c <network_off>

000d645a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d645a:	2200      	movs	r2, #0
   d645c:	6840      	ldr	r0, [r0, #4]
   d645e:	4611      	mov	r1, r2
   d6460:	f7ff ba34 	b.w	d58cc <network_connecting>

000d6464 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6464:	6840      	ldr	r0, [r0, #4]
   d6466:	2200      	movs	r2, #0
   d6468:	2102      	movs	r1, #2
   d646a:	f7ff ba37 	b.w	d58dc <network_disconnect>

000d646e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d646e:	2300      	movs	r3, #0
   d6470:	6840      	ldr	r0, [r0, #4]
   d6472:	461a      	mov	r2, r3
   d6474:	f7ff ba22 	b.w	d58bc <network_connect>

000d6478 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d6478:	4b02      	ldr	r3, [pc, #8]	; (d6484 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d647a:	2204      	movs	r2, #4
   d647c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d647e:	4a02      	ldr	r2, [pc, #8]	; (d6488 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d6480:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d6482:	4770      	bx	lr
   d6484:	2003e7c4 	.word	0x2003e7c4
   d6488:	000d7e30 	.word	0x000d7e30

000d648c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d648c:	2300      	movs	r3, #0
   d648e:	6840      	ldr	r0, [r0, #4]
   d6490:	461a      	mov	r2, r3
   d6492:	f7ff ba13 	b.w	d58bc <network_connect>

000d6496 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d6496:	6840      	ldr	r0, [r0, #4]
   d6498:	2200      	movs	r2, #0
   d649a:	2102      	movs	r1, #2
   d649c:	f7ff ba1e 	b.w	d58dc <network_disconnect>

000d64a0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d64a0:	2200      	movs	r2, #0
   d64a2:	6840      	ldr	r0, [r0, #4]
   d64a4:	4611      	mov	r1, r2
   d64a6:	f7ff ba11 	b.w	d58cc <network_connecting>

000d64aa <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d64aa:	2200      	movs	r2, #0
   d64ac:	6840      	ldr	r0, [r0, #4]
   d64ae:	4611      	mov	r1, r2
   d64b0:	f7ff ba1c 	b.w	d58ec <network_ready>

000d64b4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d64b4:	2300      	movs	r3, #0
   d64b6:	6840      	ldr	r0, [r0, #4]
   d64b8:	461a      	mov	r2, r3
   d64ba:	4619      	mov	r1, r3
   d64bc:	f7ff ba1e 	b.w	d58fc <network_on>

000d64c0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d64c0:	2300      	movs	r3, #0
   d64c2:	6840      	ldr	r0, [r0, #4]
   d64c4:	461a      	mov	r2, r3
   d64c6:	4619      	mov	r1, r3
   d64c8:	f7ff ba20 	b.w	d590c <network_off>

000d64cc <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d64cc:	6840      	ldr	r0, [r0, #4]
   d64ce:	2100      	movs	r1, #0
   d64d0:	f7ff ba44 	b.w	d595c <network_is_on>

000d64d4 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d64d4:	6840      	ldr	r0, [r0, #4]
   d64d6:	2100      	movs	r1, #0
   d64d8:	f7ff ba48 	b.w	d596c <network_is_off>

000d64dc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d64dc:	6840      	ldr	r0, [r0, #4]
   d64de:	2200      	movs	r2, #0
   d64e0:	f081 0101 	eor.w	r1, r1, #1
   d64e4:	f7ff ba1a 	b.w	d591c <network_listen>

000d64e8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d64e8:	6840      	ldr	r0, [r0, #4]
   d64ea:	2200      	movs	r2, #0
   d64ec:	f7ff ba26 	b.w	d593c <network_set_listen_timeout>

000d64f0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d64f0:	2200      	movs	r2, #0
   d64f2:	6840      	ldr	r0, [r0, #4]
   d64f4:	4611      	mov	r1, r2
   d64f6:	f7ff ba29 	b.w	d594c <network_get_listen_timeout>

000d64fa <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d64fa:	2200      	movs	r2, #0
   d64fc:	6840      	ldr	r0, [r0, #4]
   d64fe:	4611      	mov	r1, r2
   d6500:	f7ff ba14 	b.w	d592c <network_listening>

000d6504 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6504:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6508:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d650a:	b095      	sub	sp, #84	; 0x54
   d650c:	4616      	mov	r6, r2
   d650e:	460d      	mov	r5, r1
   d6510:	4607      	mov	r7, r0
    IPAddress addr;
   d6512:	f7ff fdef 	bl	d60f4 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d6516:	4621      	mov	r1, r4
   d6518:	2218      	movs	r2, #24
   d651a:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d651c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d651e:	f000 fe17 	bl	d7150 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d6522:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d6524:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d6528:	4621      	mov	r1, r4
   d652a:	466b      	mov	r3, sp
   d652c:	aa0c      	add	r2, sp, #48	; 0x30
   d652e:	4630      	mov	r0, r6
   d6530:	f7ff f810 	bl	d5554 <netdb_getaddrinfo>
    if (!r) {
   d6534:	4604      	mov	r4, r0
   d6536:	2800      	cmp	r0, #0
   d6538:	d14c      	bne.n	d65d4 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d653a:	4602      	mov	r2, r0
   d653c:	2101      	movs	r1, #1
   d653e:	6868      	ldr	r0, [r5, #4]
   d6540:	f7ff f9d4 	bl	d58ec <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6544:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6546:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6548:	4622      	mov	r2, r4
   d654a:	6868      	ldr	r0, [r5, #4]
   d654c:	f7ff f9ce 	bl	d58ec <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6550:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6552:	4681      	mov	r9, r0
        bool ok = false;
   d6554:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6556:	2e00      	cmp	r6, #0
   d6558:	d03c      	beq.n	d65d4 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d655a:	2900      	cmp	r1, #0
   d655c:	d13a      	bne.n	d65d4 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d655e:	6873      	ldr	r3, [r6, #4]
   d6560:	2b02      	cmp	r3, #2
   d6562:	d003      	beq.n	d656c <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d6564:	2b0a      	cmp	r3, #10
   d6566:	d011      	beq.n	d658c <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6568:	69f6      	ldr	r6, [r6, #28]
   d656a:	e7f4      	b.n	d6556 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d656c:	f1b8 0f00 	cmp.w	r8, #0
   d6570:	d00a      	beq.n	d6588 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d6572:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d6574:	a806      	add	r0, sp, #24
   d6576:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d6578:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d657a:	f7ff fde9 	bl	d6150 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d657e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6580:	1d3c      	adds	r4, r7, #4
   d6582:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6584:	682b      	ldr	r3, [r5, #0]
   d6586:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d6588:	4641      	mov	r1, r8
   d658a:	e7ed      	b.n	d6568 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d658c:	f1b9 0f00 	cmp.w	r9, #0
   d6590:	d101      	bne.n	d6596 <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d6592:	4649      	mov	r1, r9
   d6594:	e7e8      	b.n	d6568 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d6596:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d6598:	2210      	movs	r2, #16
   d659a:	a801      	add	r0, sp, #4
   d659c:	f000 fdd8 	bl	d7150 <memset>
                    a.v = 6;
   d65a0:	2306      	movs	r3, #6
   d65a2:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d65a6:	ad01      	add	r5, sp, #4
   d65a8:	f104 0308 	add.w	r3, r4, #8
   d65ac:	3418      	adds	r4, #24
   d65ae:	6818      	ldr	r0, [r3, #0]
   d65b0:	6859      	ldr	r1, [r3, #4]
   d65b2:	462a      	mov	r2, r5
   d65b4:	c203      	stmia	r2!, {r0, r1}
   d65b6:	3308      	adds	r3, #8
   d65b8:	42a3      	cmp	r3, r4
   d65ba:	4615      	mov	r5, r2
   d65bc:	d1f7      	bne.n	d65ae <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d65be:	a901      	add	r1, sp, #4
   d65c0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d65c2:	ad07      	add	r5, sp, #28
   d65c4:	f7ff fda4 	bl	d6110 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d65c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d65ca:	1d3c      	adds	r4, r7, #4
   d65cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d65ce:	682b      	ldr	r3, [r5, #0]
   d65d0:	7023      	strb	r3, [r4, #0]
   d65d2:	e7de      	b.n	d6592 <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d65d4:	9800      	ldr	r0, [sp, #0]
   d65d6:	f7fe ffb5 	bl	d5544 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d65da:	4638      	mov	r0, r7
   d65dc:	b015      	add	sp, #84	; 0x54
   d65de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d65e4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d65e4:	4b02      	ldr	r3, [pc, #8]	; (d65f0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d65e6:	4a03      	ldr	r2, [pc, #12]	; (d65f4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d65e8:	601a      	str	r2, [r3, #0]
   d65ea:	2200      	movs	r2, #0
   d65ec:	605a      	str	r2, [r3, #4]

} // spark
   d65ee:	4770      	bx	lr
   d65f0:	2003e7cc 	.word	0x2003e7cc
   d65f4:	000d7e6c 	.word	0x000d7e6c

000d65f8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d65f8:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d65fa:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d65fc:	d902      	bls.n	d6604 <pinAvailable+0xc>
    return false;
   d65fe:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d6600:	b002      	add	sp, #8
   d6602:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d6604:	f1a0 030b 	sub.w	r3, r0, #11
   d6608:	2b02      	cmp	r3, #2
   d660a:	d81a      	bhi.n	d6642 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d660c:	4c17      	ldr	r4, [pc, #92]	; (d666c <pinAvailable+0x74>)
   d660e:	7821      	ldrb	r1, [r4, #0]
   d6610:	f3bf 8f5b 	dmb	ish
   d6614:	f011 0101 	ands.w	r1, r1, #1
   d6618:	d10b      	bne.n	d6632 <pinAvailable+0x3a>
   d661a:	4620      	mov	r0, r4
   d661c:	9101      	str	r1, [sp, #4]
   d661e:	f7fd fd49 	bl	d40b4 <__cxa_guard_acquire>
   d6622:	9901      	ldr	r1, [sp, #4]
   d6624:	b128      	cbz	r0, d6632 <pinAvailable+0x3a>
   d6626:	4812      	ldr	r0, [pc, #72]	; (d6670 <pinAvailable+0x78>)
   d6628:	f7ff fa14 	bl	d5a54 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d662c:	4620      	mov	r0, r4
   d662e:	f7fd fd46 	bl	d40be <__cxa_guard_release>
   d6632:	4b0f      	ldr	r3, [pc, #60]	; (d6670 <pinAvailable+0x78>)
   d6634:	7818      	ldrb	r0, [r3, #0]
   d6636:	f7ff f8b5 	bl	d57a4 <hal_spi_is_enabled>
   d663a:	2800      	cmp	r0, #0
   d663c:	d1df      	bne.n	d65fe <pinAvailable+0x6>
  return true; // 'pin' is available
   d663e:	2001      	movs	r0, #1
   d6640:	e7de      	b.n	d6600 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d6642:	2801      	cmp	r0, #1
   d6644:	d809      	bhi.n	d665a <pinAvailable+0x62>
   d6646:	f000 f881 	bl	d674c <_Z19__fetch_global_Wirev>
   d664a:	2100      	movs	r1, #0
   d664c:	7c00      	ldrb	r0, [r0, #16]
   d664e:	f7ff f881 	bl	d5754 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d6652:	f080 0001 	eor.w	r0, r0, #1
   d6656:	b2c0      	uxtb	r0, r0
   d6658:	e7d2      	b.n	d6600 <pinAvailable+0x8>
   d665a:	3809      	subs	r0, #9
   d665c:	2801      	cmp	r0, #1
   d665e:	d8ee      	bhi.n	d663e <pinAvailable+0x46>
   d6660:	f7ff fe5c 	bl	d631c <_Z22__fetch_global_Serial1v>
   d6664:	7c00      	ldrb	r0, [r0, #16]
   d6666:	f7ff f81d 	bl	d56a4 <hal_usart_is_enabled>
   d666a:	e7f2      	b.n	d6652 <pinAvailable+0x5a>
   d666c:	2003e644 	.word	0x2003e644
   d6670:	2003e648 	.word	0x2003e648

000d6674 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6674:	2823      	cmp	r0, #35	; 0x23
{
   d6676:	b538      	push	{r3, r4, r5, lr}
   d6678:	4604      	mov	r4, r0
   d667a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d667c:	d80a      	bhi.n	d6694 <pinMode+0x20>
   d667e:	29ff      	cmp	r1, #255	; 0xff
   d6680:	d008      	beq.n	d6694 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d6682:	f7ff ffb9 	bl	d65f8 <pinAvailable>
   d6686:	b128      	cbz	r0, d6694 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d6688:	4629      	mov	r1, r5
   d668a:	4620      	mov	r0, r4
}
   d668c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d6690:	f7fe bf70 	b.w	d5574 <HAL_Pin_Mode>
}
   d6694:	bd38      	pop	{r3, r4, r5, pc}

000d6696 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d6696:	b538      	push	{r3, r4, r5, lr}
   d6698:	4604      	mov	r4, r0
   d669a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d669c:	f7fe ff72 	bl	d5584 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d66a0:	28ff      	cmp	r0, #255	; 0xff
   d66a2:	d010      	beq.n	d66c6 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d66a4:	2806      	cmp	r0, #6
   d66a6:	d804      	bhi.n	d66b2 <digitalWrite+0x1c>
   d66a8:	234d      	movs	r3, #77	; 0x4d
   d66aa:	fa23 f000 	lsr.w	r0, r3, r0
   d66ae:	07c3      	lsls	r3, r0, #31
   d66b0:	d409      	bmi.n	d66c6 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d66b2:	4620      	mov	r0, r4
   d66b4:	f7ff ffa0 	bl	d65f8 <pinAvailable>
   d66b8:	b128      	cbz	r0, d66c6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d66ba:	4629      	mov	r1, r5
   d66bc:	4620      	mov	r0, r4
}
   d66be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d66c2:	f7fe bf67 	b.w	d5594 <HAL_GPIO_Write>
}
   d66c6:	bd38      	pop	{r3, r4, r5, pc}

000d66c8 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d66c8:	b510      	push	{r4, lr}
   d66ca:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d66cc:	f7fe ff5a 	bl	d5584 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d66d0:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d66d2:	b2db      	uxtb	r3, r3
   d66d4:	2b01      	cmp	r3, #1
   d66d6:	d908      	bls.n	d66ea <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d66d8:	4620      	mov	r0, r4
   d66da:	f7ff ff8d 	bl	d65f8 <pinAvailable>
   d66de:	b120      	cbz	r0, d66ea <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d66e0:	4620      	mov	r0, r4
}
   d66e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d66e6:	f7fe bf5d 	b.w	d55a4 <HAL_GPIO_Read>
}
   d66ea:	2000      	movs	r0, #0
   d66ec:	bd10      	pop	{r4, pc}

000d66ee <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d66ee:	280d      	cmp	r0, #13
{
   d66f0:	b510      	push	{r4, lr}
   d66f2:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d66f4:	bf9c      	itt	ls
   d66f6:	340e      	addls	r4, #14
   d66f8:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d66fa:	4620      	mov	r0, r4
   d66fc:	f7ff ff7c 	bl	d65f8 <pinAvailable>
   d6700:	b150      	cbz	r0, d6718 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d6702:	2103      	movs	r1, #3
   d6704:	4620      	mov	r0, r4
   d6706:	f7fe ff2d 	bl	d5564 <HAL_Validate_Pin_Function>
   d670a:	2803      	cmp	r0, #3
   d670c:	d104      	bne.n	d6718 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d670e:	4620      	mov	r0, r4
}
   d6710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d6714:	f7fe bf4e 	b.w	d55b4 <hal_adc_read>
}
   d6718:	2000      	movs	r0, #0
   d671a:	bd10      	pop	{r4, pc}

000d671c <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d671c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d671e:	2300      	movs	r3, #0
   d6720:	2520      	movs	r5, #32
   d6722:	8043      	strh	r3, [r0, #2]
   d6724:	2314      	movs	r3, #20
{
   d6726:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d6728:	8003      	strh	r3, [r0, #0]
   d672a:	6085      	str	r5, [r0, #8]
   d672c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d672e:	4906      	ldr	r1, [pc, #24]	; (d6748 <_Z17acquireWireBufferv+0x2c>)
   d6730:	4628      	mov	r0, r5
   d6732:	f000 f83a 	bl	d67aa <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6736:	4904      	ldr	r1, [pc, #16]	; (d6748 <_Z17acquireWireBufferv+0x2c>)
	};
   d6738:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d673a:	4628      	mov	r0, r5
   d673c:	f000 f835 	bl	d67aa <_ZnajRKSt9nothrow_t>
	};
   d6740:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d6742:	4620      	mov	r0, r4
   d6744:	bd38      	pop	{r3, r4, r5, pc}
   d6746:	bf00      	nop
   d6748:	000d7ea0 	.word	0x000d7ea0

000d674c <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d674c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d674e:	4d0f      	ldr	r5, [pc, #60]	; (d678c <_Z19__fetch_global_Wirev+0x40>)
   d6750:	7829      	ldrb	r1, [r5, #0]
   d6752:	f3bf 8f5b 	dmb	ish
   d6756:	f011 0401 	ands.w	r4, r1, #1
{
   d675a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d675c:	d113      	bne.n	d6786 <_Z19__fetch_global_Wirev+0x3a>
   d675e:	4628      	mov	r0, r5
   d6760:	f7fd fca8 	bl	d40b4 <__cxa_guard_acquire>
   d6764:	b178      	cbz	r0, d6786 <_Z19__fetch_global_Wirev+0x3a>
   d6766:	a801      	add	r0, sp, #4
   d6768:	f7ff ffd8 	bl	d671c <_Z17acquireWireBufferv>
   d676c:	aa01      	add	r2, sp, #4
   d676e:	4621      	mov	r1, r4
   d6770:	4807      	ldr	r0, [pc, #28]	; (d6790 <_Z19__fetch_global_Wirev+0x44>)
   d6772:	f7ff fe29 	bl	d63c8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d6776:	4628      	mov	r0, r5
   d6778:	f7fd fca1 	bl	d40be <__cxa_guard_release>
   d677c:	4a05      	ldr	r2, [pc, #20]	; (d6794 <_Z19__fetch_global_Wirev+0x48>)
   d677e:	4906      	ldr	r1, [pc, #24]	; (d6798 <_Z19__fetch_global_Wirev+0x4c>)
   d6780:	4803      	ldr	r0, [pc, #12]	; (d6790 <_Z19__fetch_global_Wirev+0x44>)
   d6782:	f000 f80b 	bl	d679c <__aeabi_atexit>
	return wire;
}
   d6786:	4802      	ldr	r0, [pc, #8]	; (d6790 <_Z19__fetch_global_Wirev+0x44>)
   d6788:	b007      	add	sp, #28
   d678a:	bd30      	pop	{r4, r5, pc}
   d678c:	2003e7d8 	.word	0x2003e7d8
   d6790:	2003e7dc 	.word	0x2003e7dc
   d6794:	2003e5c4 	.word	0x2003e5c4
   d6798:	000d6371 	.word	0x000d6371

000d679c <__aeabi_atexit>:
   d679c:	460b      	mov	r3, r1
   d679e:	4601      	mov	r1, r0
   d67a0:	4618      	mov	r0, r3
   d67a2:	f000 bcb9 	b.w	d7118 <__cxa_atexit>

000d67a6 <_ZdlPvj>:
   d67a6:	f7fd bc78 	b.w	d409a <_ZdlPv>

000d67aa <_ZnajRKSt9nothrow_t>:
   d67aa:	f7fd bc74 	b.w	d4096 <_Znaj>
	...

000d67b0 <__aeabi_drsub>:
   d67b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d67b4:	e002      	b.n	d67bc <__adddf3>
   d67b6:	bf00      	nop

000d67b8 <__aeabi_dsub>:
   d67b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d67bc <__adddf3>:
   d67bc:	b530      	push	{r4, r5, lr}
   d67be:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d67c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d67c6:	ea94 0f05 	teq	r4, r5
   d67ca:	bf08      	it	eq
   d67cc:	ea90 0f02 	teqeq	r0, r2
   d67d0:	bf1f      	itttt	ne
   d67d2:	ea54 0c00 	orrsne.w	ip, r4, r0
   d67d6:	ea55 0c02 	orrsne.w	ip, r5, r2
   d67da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d67de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d67e2:	f000 80e2 	beq.w	d69aa <__adddf3+0x1ee>
   d67e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d67ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d67ee:	bfb8      	it	lt
   d67f0:	426d      	neglt	r5, r5
   d67f2:	dd0c      	ble.n	d680e <__adddf3+0x52>
   d67f4:	442c      	add	r4, r5
   d67f6:	ea80 0202 	eor.w	r2, r0, r2
   d67fa:	ea81 0303 	eor.w	r3, r1, r3
   d67fe:	ea82 0000 	eor.w	r0, r2, r0
   d6802:	ea83 0101 	eor.w	r1, r3, r1
   d6806:	ea80 0202 	eor.w	r2, r0, r2
   d680a:	ea81 0303 	eor.w	r3, r1, r3
   d680e:	2d36      	cmp	r5, #54	; 0x36
   d6810:	bf88      	it	hi
   d6812:	bd30      	pophi	{r4, r5, pc}
   d6814:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6818:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d681c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d6820:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d6824:	d002      	beq.n	d682c <__adddf3+0x70>
   d6826:	4240      	negs	r0, r0
   d6828:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d682c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d6830:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6834:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d6838:	d002      	beq.n	d6840 <__adddf3+0x84>
   d683a:	4252      	negs	r2, r2
   d683c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d6840:	ea94 0f05 	teq	r4, r5
   d6844:	f000 80a7 	beq.w	d6996 <__adddf3+0x1da>
   d6848:	f1a4 0401 	sub.w	r4, r4, #1
   d684c:	f1d5 0e20 	rsbs	lr, r5, #32
   d6850:	db0d      	blt.n	d686e <__adddf3+0xb2>
   d6852:	fa02 fc0e 	lsl.w	ip, r2, lr
   d6856:	fa22 f205 	lsr.w	r2, r2, r5
   d685a:	1880      	adds	r0, r0, r2
   d685c:	f141 0100 	adc.w	r1, r1, #0
   d6860:	fa03 f20e 	lsl.w	r2, r3, lr
   d6864:	1880      	adds	r0, r0, r2
   d6866:	fa43 f305 	asr.w	r3, r3, r5
   d686a:	4159      	adcs	r1, r3
   d686c:	e00e      	b.n	d688c <__adddf3+0xd0>
   d686e:	f1a5 0520 	sub.w	r5, r5, #32
   d6872:	f10e 0e20 	add.w	lr, lr, #32
   d6876:	2a01      	cmp	r2, #1
   d6878:	fa03 fc0e 	lsl.w	ip, r3, lr
   d687c:	bf28      	it	cs
   d687e:	f04c 0c02 	orrcs.w	ip, ip, #2
   d6882:	fa43 f305 	asr.w	r3, r3, r5
   d6886:	18c0      	adds	r0, r0, r3
   d6888:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d688c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6890:	d507      	bpl.n	d68a2 <__adddf3+0xe6>
   d6892:	f04f 0e00 	mov.w	lr, #0
   d6896:	f1dc 0c00 	rsbs	ip, ip, #0
   d689a:	eb7e 0000 	sbcs.w	r0, lr, r0
   d689e:	eb6e 0101 	sbc.w	r1, lr, r1
   d68a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d68a6:	d31b      	bcc.n	d68e0 <__adddf3+0x124>
   d68a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d68ac:	d30c      	bcc.n	d68c8 <__adddf3+0x10c>
   d68ae:	0849      	lsrs	r1, r1, #1
   d68b0:	ea5f 0030 	movs.w	r0, r0, rrx
   d68b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d68b8:	f104 0401 	add.w	r4, r4, #1
   d68bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d68c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d68c4:	f080 809a 	bcs.w	d69fc <__adddf3+0x240>
   d68c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d68cc:	bf08      	it	eq
   d68ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d68d2:	f150 0000 	adcs.w	r0, r0, #0
   d68d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d68da:	ea41 0105 	orr.w	r1, r1, r5
   d68de:	bd30      	pop	{r4, r5, pc}
   d68e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d68e4:	4140      	adcs	r0, r0
   d68e6:	eb41 0101 	adc.w	r1, r1, r1
   d68ea:	3c01      	subs	r4, #1
   d68ec:	bf28      	it	cs
   d68ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d68f2:	d2e9      	bcs.n	d68c8 <__adddf3+0x10c>
   d68f4:	f091 0f00 	teq	r1, #0
   d68f8:	bf04      	itt	eq
   d68fa:	4601      	moveq	r1, r0
   d68fc:	2000      	moveq	r0, #0
   d68fe:	fab1 f381 	clz	r3, r1
   d6902:	bf08      	it	eq
   d6904:	3320      	addeq	r3, #32
   d6906:	f1a3 030b 	sub.w	r3, r3, #11
   d690a:	f1b3 0220 	subs.w	r2, r3, #32
   d690e:	da0c      	bge.n	d692a <__adddf3+0x16e>
   d6910:	320c      	adds	r2, #12
   d6912:	dd08      	ble.n	d6926 <__adddf3+0x16a>
   d6914:	f102 0c14 	add.w	ip, r2, #20
   d6918:	f1c2 020c 	rsb	r2, r2, #12
   d691c:	fa01 f00c 	lsl.w	r0, r1, ip
   d6920:	fa21 f102 	lsr.w	r1, r1, r2
   d6924:	e00c      	b.n	d6940 <__adddf3+0x184>
   d6926:	f102 0214 	add.w	r2, r2, #20
   d692a:	bfd8      	it	le
   d692c:	f1c2 0c20 	rsble	ip, r2, #32
   d6930:	fa01 f102 	lsl.w	r1, r1, r2
   d6934:	fa20 fc0c 	lsr.w	ip, r0, ip
   d6938:	bfdc      	itt	le
   d693a:	ea41 010c 	orrle.w	r1, r1, ip
   d693e:	4090      	lslle	r0, r2
   d6940:	1ae4      	subs	r4, r4, r3
   d6942:	bfa2      	ittt	ge
   d6944:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d6948:	4329      	orrge	r1, r5
   d694a:	bd30      	popge	{r4, r5, pc}
   d694c:	ea6f 0404 	mvn.w	r4, r4
   d6950:	3c1f      	subs	r4, #31
   d6952:	da1c      	bge.n	d698e <__adddf3+0x1d2>
   d6954:	340c      	adds	r4, #12
   d6956:	dc0e      	bgt.n	d6976 <__adddf3+0x1ba>
   d6958:	f104 0414 	add.w	r4, r4, #20
   d695c:	f1c4 0220 	rsb	r2, r4, #32
   d6960:	fa20 f004 	lsr.w	r0, r0, r4
   d6964:	fa01 f302 	lsl.w	r3, r1, r2
   d6968:	ea40 0003 	orr.w	r0, r0, r3
   d696c:	fa21 f304 	lsr.w	r3, r1, r4
   d6970:	ea45 0103 	orr.w	r1, r5, r3
   d6974:	bd30      	pop	{r4, r5, pc}
   d6976:	f1c4 040c 	rsb	r4, r4, #12
   d697a:	f1c4 0220 	rsb	r2, r4, #32
   d697e:	fa20 f002 	lsr.w	r0, r0, r2
   d6982:	fa01 f304 	lsl.w	r3, r1, r4
   d6986:	ea40 0003 	orr.w	r0, r0, r3
   d698a:	4629      	mov	r1, r5
   d698c:	bd30      	pop	{r4, r5, pc}
   d698e:	fa21 f004 	lsr.w	r0, r1, r4
   d6992:	4629      	mov	r1, r5
   d6994:	bd30      	pop	{r4, r5, pc}
   d6996:	f094 0f00 	teq	r4, #0
   d699a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d699e:	bf06      	itte	eq
   d69a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d69a4:	3401      	addeq	r4, #1
   d69a6:	3d01      	subne	r5, #1
   d69a8:	e74e      	b.n	d6848 <__adddf3+0x8c>
   d69aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d69ae:	bf18      	it	ne
   d69b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d69b4:	d029      	beq.n	d6a0a <__adddf3+0x24e>
   d69b6:	ea94 0f05 	teq	r4, r5
   d69ba:	bf08      	it	eq
   d69bc:	ea90 0f02 	teqeq	r0, r2
   d69c0:	d005      	beq.n	d69ce <__adddf3+0x212>
   d69c2:	ea54 0c00 	orrs.w	ip, r4, r0
   d69c6:	bf04      	itt	eq
   d69c8:	4619      	moveq	r1, r3
   d69ca:	4610      	moveq	r0, r2
   d69cc:	bd30      	pop	{r4, r5, pc}
   d69ce:	ea91 0f03 	teq	r1, r3
   d69d2:	bf1e      	ittt	ne
   d69d4:	2100      	movne	r1, #0
   d69d6:	2000      	movne	r0, #0
   d69d8:	bd30      	popne	{r4, r5, pc}
   d69da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d69de:	d105      	bne.n	d69ec <__adddf3+0x230>
   d69e0:	0040      	lsls	r0, r0, #1
   d69e2:	4149      	adcs	r1, r1
   d69e4:	bf28      	it	cs
   d69e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d69ea:	bd30      	pop	{r4, r5, pc}
   d69ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d69f0:	bf3c      	itt	cc
   d69f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d69f6:	bd30      	popcc	{r4, r5, pc}
   d69f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d69fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d6a00:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6a04:	f04f 0000 	mov.w	r0, #0
   d6a08:	bd30      	pop	{r4, r5, pc}
   d6a0a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6a0e:	bf1a      	itte	ne
   d6a10:	4619      	movne	r1, r3
   d6a12:	4610      	movne	r0, r2
   d6a14:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d6a18:	bf1c      	itt	ne
   d6a1a:	460b      	movne	r3, r1
   d6a1c:	4602      	movne	r2, r0
   d6a1e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6a22:	bf06      	itte	eq
   d6a24:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d6a28:	ea91 0f03 	teqeq	r1, r3
   d6a2c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d6a30:	bd30      	pop	{r4, r5, pc}
   d6a32:	bf00      	nop

000d6a34 <__aeabi_ui2d>:
   d6a34:	f090 0f00 	teq	r0, #0
   d6a38:	bf04      	itt	eq
   d6a3a:	2100      	moveq	r1, #0
   d6a3c:	4770      	bxeq	lr
   d6a3e:	b530      	push	{r4, r5, lr}
   d6a40:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6a44:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6a48:	f04f 0500 	mov.w	r5, #0
   d6a4c:	f04f 0100 	mov.w	r1, #0
   d6a50:	e750      	b.n	d68f4 <__adddf3+0x138>
   d6a52:	bf00      	nop

000d6a54 <__aeabi_i2d>:
   d6a54:	f090 0f00 	teq	r0, #0
   d6a58:	bf04      	itt	eq
   d6a5a:	2100      	moveq	r1, #0
   d6a5c:	4770      	bxeq	lr
   d6a5e:	b530      	push	{r4, r5, lr}
   d6a60:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6a64:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6a68:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d6a6c:	bf48      	it	mi
   d6a6e:	4240      	negmi	r0, r0
   d6a70:	f04f 0100 	mov.w	r1, #0
   d6a74:	e73e      	b.n	d68f4 <__adddf3+0x138>
   d6a76:	bf00      	nop

000d6a78 <__aeabi_f2d>:
   d6a78:	0042      	lsls	r2, r0, #1
   d6a7a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d6a7e:	ea4f 0131 	mov.w	r1, r1, rrx
   d6a82:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d6a86:	bf1f      	itttt	ne
   d6a88:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d6a8c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6a90:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d6a94:	4770      	bxne	lr
   d6a96:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d6a9a:	bf08      	it	eq
   d6a9c:	4770      	bxeq	lr
   d6a9e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d6aa2:	bf04      	itt	eq
   d6aa4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d6aa8:	4770      	bxeq	lr
   d6aaa:	b530      	push	{r4, r5, lr}
   d6aac:	f44f 7460 	mov.w	r4, #896	; 0x380
   d6ab0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6ab4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6ab8:	e71c      	b.n	d68f4 <__adddf3+0x138>
   d6aba:	bf00      	nop

000d6abc <__aeabi_ul2d>:
   d6abc:	ea50 0201 	orrs.w	r2, r0, r1
   d6ac0:	bf08      	it	eq
   d6ac2:	4770      	bxeq	lr
   d6ac4:	b530      	push	{r4, r5, lr}
   d6ac6:	f04f 0500 	mov.w	r5, #0
   d6aca:	e00a      	b.n	d6ae2 <__aeabi_l2d+0x16>

000d6acc <__aeabi_l2d>:
   d6acc:	ea50 0201 	orrs.w	r2, r0, r1
   d6ad0:	bf08      	it	eq
   d6ad2:	4770      	bxeq	lr
   d6ad4:	b530      	push	{r4, r5, lr}
   d6ad6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d6ada:	d502      	bpl.n	d6ae2 <__aeabi_l2d+0x16>
   d6adc:	4240      	negs	r0, r0
   d6ade:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6ae2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6ae6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6aea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d6aee:	f43f aed8 	beq.w	d68a2 <__adddf3+0xe6>
   d6af2:	f04f 0203 	mov.w	r2, #3
   d6af6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6afa:	bf18      	it	ne
   d6afc:	3203      	addne	r2, #3
   d6afe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6b02:	bf18      	it	ne
   d6b04:	3203      	addne	r2, #3
   d6b06:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d6b0a:	f1c2 0320 	rsb	r3, r2, #32
   d6b0e:	fa00 fc03 	lsl.w	ip, r0, r3
   d6b12:	fa20 f002 	lsr.w	r0, r0, r2
   d6b16:	fa01 fe03 	lsl.w	lr, r1, r3
   d6b1a:	ea40 000e 	orr.w	r0, r0, lr
   d6b1e:	fa21 f102 	lsr.w	r1, r1, r2
   d6b22:	4414      	add	r4, r2
   d6b24:	e6bd      	b.n	d68a2 <__adddf3+0xe6>
   d6b26:	bf00      	nop

000d6b28 <__aeabi_dmul>:
   d6b28:	b570      	push	{r4, r5, r6, lr}
   d6b2a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6b2e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6b32:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6b36:	bf1d      	ittte	ne
   d6b38:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6b3c:	ea94 0f0c 	teqne	r4, ip
   d6b40:	ea95 0f0c 	teqne	r5, ip
   d6b44:	f000 f8de 	bleq	d6d04 <__aeabi_dmul+0x1dc>
   d6b48:	442c      	add	r4, r5
   d6b4a:	ea81 0603 	eor.w	r6, r1, r3
   d6b4e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d6b52:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d6b56:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d6b5a:	bf18      	it	ne
   d6b5c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d6b60:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6b64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6b68:	d038      	beq.n	d6bdc <__aeabi_dmul+0xb4>
   d6b6a:	fba0 ce02 	umull	ip, lr, r0, r2
   d6b6e:	f04f 0500 	mov.w	r5, #0
   d6b72:	fbe1 e502 	umlal	lr, r5, r1, r2
   d6b76:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d6b7a:	fbe0 e503 	umlal	lr, r5, r0, r3
   d6b7e:	f04f 0600 	mov.w	r6, #0
   d6b82:	fbe1 5603 	umlal	r5, r6, r1, r3
   d6b86:	f09c 0f00 	teq	ip, #0
   d6b8a:	bf18      	it	ne
   d6b8c:	f04e 0e01 	orrne.w	lr, lr, #1
   d6b90:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d6b94:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6b98:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d6b9c:	d204      	bcs.n	d6ba8 <__aeabi_dmul+0x80>
   d6b9e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d6ba2:	416d      	adcs	r5, r5
   d6ba4:	eb46 0606 	adc.w	r6, r6, r6
   d6ba8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d6bac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d6bb0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d6bb4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d6bb8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d6bbc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6bc0:	bf88      	it	hi
   d6bc2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6bc6:	d81e      	bhi.n	d6c06 <__aeabi_dmul+0xde>
   d6bc8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d6bcc:	bf08      	it	eq
   d6bce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d6bd2:	f150 0000 	adcs.w	r0, r0, #0
   d6bd6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6bda:	bd70      	pop	{r4, r5, r6, pc}
   d6bdc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d6be0:	ea46 0101 	orr.w	r1, r6, r1
   d6be4:	ea40 0002 	orr.w	r0, r0, r2
   d6be8:	ea81 0103 	eor.w	r1, r1, r3
   d6bec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d6bf0:	bfc2      	ittt	gt
   d6bf2:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6bf6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6bfa:	bd70      	popgt	{r4, r5, r6, pc}
   d6bfc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6c00:	f04f 0e00 	mov.w	lr, #0
   d6c04:	3c01      	subs	r4, #1
   d6c06:	f300 80ab 	bgt.w	d6d60 <__aeabi_dmul+0x238>
   d6c0a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d6c0e:	bfde      	ittt	le
   d6c10:	2000      	movle	r0, #0
   d6c12:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d6c16:	bd70      	pople	{r4, r5, r6, pc}
   d6c18:	f1c4 0400 	rsb	r4, r4, #0
   d6c1c:	3c20      	subs	r4, #32
   d6c1e:	da35      	bge.n	d6c8c <__aeabi_dmul+0x164>
   d6c20:	340c      	adds	r4, #12
   d6c22:	dc1b      	bgt.n	d6c5c <__aeabi_dmul+0x134>
   d6c24:	f104 0414 	add.w	r4, r4, #20
   d6c28:	f1c4 0520 	rsb	r5, r4, #32
   d6c2c:	fa00 f305 	lsl.w	r3, r0, r5
   d6c30:	fa20 f004 	lsr.w	r0, r0, r4
   d6c34:	fa01 f205 	lsl.w	r2, r1, r5
   d6c38:	ea40 0002 	orr.w	r0, r0, r2
   d6c3c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d6c40:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6c44:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6c48:	fa21 f604 	lsr.w	r6, r1, r4
   d6c4c:	eb42 0106 	adc.w	r1, r2, r6
   d6c50:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6c54:	bf08      	it	eq
   d6c56:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6c5a:	bd70      	pop	{r4, r5, r6, pc}
   d6c5c:	f1c4 040c 	rsb	r4, r4, #12
   d6c60:	f1c4 0520 	rsb	r5, r4, #32
   d6c64:	fa00 f304 	lsl.w	r3, r0, r4
   d6c68:	fa20 f005 	lsr.w	r0, r0, r5
   d6c6c:	fa01 f204 	lsl.w	r2, r1, r4
   d6c70:	ea40 0002 	orr.w	r0, r0, r2
   d6c74:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6c78:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6c7c:	f141 0100 	adc.w	r1, r1, #0
   d6c80:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6c84:	bf08      	it	eq
   d6c86:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6c8a:	bd70      	pop	{r4, r5, r6, pc}
   d6c8c:	f1c4 0520 	rsb	r5, r4, #32
   d6c90:	fa00 f205 	lsl.w	r2, r0, r5
   d6c94:	ea4e 0e02 	orr.w	lr, lr, r2
   d6c98:	fa20 f304 	lsr.w	r3, r0, r4
   d6c9c:	fa01 f205 	lsl.w	r2, r1, r5
   d6ca0:	ea43 0302 	orr.w	r3, r3, r2
   d6ca4:	fa21 f004 	lsr.w	r0, r1, r4
   d6ca8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6cac:	fa21 f204 	lsr.w	r2, r1, r4
   d6cb0:	ea20 0002 	bic.w	r0, r0, r2
   d6cb4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d6cb8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6cbc:	bf08      	it	eq
   d6cbe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6cc2:	bd70      	pop	{r4, r5, r6, pc}
   d6cc4:	f094 0f00 	teq	r4, #0
   d6cc8:	d10f      	bne.n	d6cea <__aeabi_dmul+0x1c2>
   d6cca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d6cce:	0040      	lsls	r0, r0, #1
   d6cd0:	eb41 0101 	adc.w	r1, r1, r1
   d6cd4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6cd8:	bf08      	it	eq
   d6cda:	3c01      	subeq	r4, #1
   d6cdc:	d0f7      	beq.n	d6cce <__aeabi_dmul+0x1a6>
   d6cde:	ea41 0106 	orr.w	r1, r1, r6
   d6ce2:	f095 0f00 	teq	r5, #0
   d6ce6:	bf18      	it	ne
   d6ce8:	4770      	bxne	lr
   d6cea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d6cee:	0052      	lsls	r2, r2, #1
   d6cf0:	eb43 0303 	adc.w	r3, r3, r3
   d6cf4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d6cf8:	bf08      	it	eq
   d6cfa:	3d01      	subeq	r5, #1
   d6cfc:	d0f7      	beq.n	d6cee <__aeabi_dmul+0x1c6>
   d6cfe:	ea43 0306 	orr.w	r3, r3, r6
   d6d02:	4770      	bx	lr
   d6d04:	ea94 0f0c 	teq	r4, ip
   d6d08:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6d0c:	bf18      	it	ne
   d6d0e:	ea95 0f0c 	teqne	r5, ip
   d6d12:	d00c      	beq.n	d6d2e <__aeabi_dmul+0x206>
   d6d14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6d18:	bf18      	it	ne
   d6d1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6d1e:	d1d1      	bne.n	d6cc4 <__aeabi_dmul+0x19c>
   d6d20:	ea81 0103 	eor.w	r1, r1, r3
   d6d24:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6d28:	f04f 0000 	mov.w	r0, #0
   d6d2c:	bd70      	pop	{r4, r5, r6, pc}
   d6d2e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6d32:	bf06      	itte	eq
   d6d34:	4610      	moveq	r0, r2
   d6d36:	4619      	moveq	r1, r3
   d6d38:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6d3c:	d019      	beq.n	d6d72 <__aeabi_dmul+0x24a>
   d6d3e:	ea94 0f0c 	teq	r4, ip
   d6d42:	d102      	bne.n	d6d4a <__aeabi_dmul+0x222>
   d6d44:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d6d48:	d113      	bne.n	d6d72 <__aeabi_dmul+0x24a>
   d6d4a:	ea95 0f0c 	teq	r5, ip
   d6d4e:	d105      	bne.n	d6d5c <__aeabi_dmul+0x234>
   d6d50:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d6d54:	bf1c      	itt	ne
   d6d56:	4610      	movne	r0, r2
   d6d58:	4619      	movne	r1, r3
   d6d5a:	d10a      	bne.n	d6d72 <__aeabi_dmul+0x24a>
   d6d5c:	ea81 0103 	eor.w	r1, r1, r3
   d6d60:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6d64:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6d68:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6d6c:	f04f 0000 	mov.w	r0, #0
   d6d70:	bd70      	pop	{r4, r5, r6, pc}
   d6d72:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6d76:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d6d7a:	bd70      	pop	{r4, r5, r6, pc}

000d6d7c <__aeabi_ddiv>:
   d6d7c:	b570      	push	{r4, r5, r6, lr}
   d6d7e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6d82:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6d86:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6d8a:	bf1d      	ittte	ne
   d6d8c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6d90:	ea94 0f0c 	teqne	r4, ip
   d6d94:	ea95 0f0c 	teqne	r5, ip
   d6d98:	f000 f8a7 	bleq	d6eea <__aeabi_ddiv+0x16e>
   d6d9c:	eba4 0405 	sub.w	r4, r4, r5
   d6da0:	ea81 0e03 	eor.w	lr, r1, r3
   d6da4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6da8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6dac:	f000 8088 	beq.w	d6ec0 <__aeabi_ddiv+0x144>
   d6db0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6db4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d6db8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d6dbc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d6dc0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d6dc4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d6dc8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d6dcc:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d6dd0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d6dd4:	429d      	cmp	r5, r3
   d6dd6:	bf08      	it	eq
   d6dd8:	4296      	cmpeq	r6, r2
   d6dda:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d6dde:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d6de2:	d202      	bcs.n	d6dea <__aeabi_ddiv+0x6e>
   d6de4:	085b      	lsrs	r3, r3, #1
   d6de6:	ea4f 0232 	mov.w	r2, r2, rrx
   d6dea:	1ab6      	subs	r6, r6, r2
   d6dec:	eb65 0503 	sbc.w	r5, r5, r3
   d6df0:	085b      	lsrs	r3, r3, #1
   d6df2:	ea4f 0232 	mov.w	r2, r2, rrx
   d6df6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d6dfa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d6dfe:	ebb6 0e02 	subs.w	lr, r6, r2
   d6e02:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6e06:	bf22      	ittt	cs
   d6e08:	1ab6      	subcs	r6, r6, r2
   d6e0a:	4675      	movcs	r5, lr
   d6e0c:	ea40 000c 	orrcs.w	r0, r0, ip
   d6e10:	085b      	lsrs	r3, r3, #1
   d6e12:	ea4f 0232 	mov.w	r2, r2, rrx
   d6e16:	ebb6 0e02 	subs.w	lr, r6, r2
   d6e1a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6e1e:	bf22      	ittt	cs
   d6e20:	1ab6      	subcs	r6, r6, r2
   d6e22:	4675      	movcs	r5, lr
   d6e24:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d6e28:	085b      	lsrs	r3, r3, #1
   d6e2a:	ea4f 0232 	mov.w	r2, r2, rrx
   d6e2e:	ebb6 0e02 	subs.w	lr, r6, r2
   d6e32:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6e36:	bf22      	ittt	cs
   d6e38:	1ab6      	subcs	r6, r6, r2
   d6e3a:	4675      	movcs	r5, lr
   d6e3c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d6e40:	085b      	lsrs	r3, r3, #1
   d6e42:	ea4f 0232 	mov.w	r2, r2, rrx
   d6e46:	ebb6 0e02 	subs.w	lr, r6, r2
   d6e4a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6e4e:	bf22      	ittt	cs
   d6e50:	1ab6      	subcs	r6, r6, r2
   d6e52:	4675      	movcs	r5, lr
   d6e54:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d6e58:	ea55 0e06 	orrs.w	lr, r5, r6
   d6e5c:	d018      	beq.n	d6e90 <__aeabi_ddiv+0x114>
   d6e5e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d6e62:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d6e66:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d6e6a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d6e6e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d6e72:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d6e76:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d6e7a:	d1c0      	bne.n	d6dfe <__aeabi_ddiv+0x82>
   d6e7c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6e80:	d10b      	bne.n	d6e9a <__aeabi_ddiv+0x11e>
   d6e82:	ea41 0100 	orr.w	r1, r1, r0
   d6e86:	f04f 0000 	mov.w	r0, #0
   d6e8a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d6e8e:	e7b6      	b.n	d6dfe <__aeabi_ddiv+0x82>
   d6e90:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6e94:	bf04      	itt	eq
   d6e96:	4301      	orreq	r1, r0
   d6e98:	2000      	moveq	r0, #0
   d6e9a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6e9e:	bf88      	it	hi
   d6ea0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6ea4:	f63f aeaf 	bhi.w	d6c06 <__aeabi_dmul+0xde>
   d6ea8:	ebb5 0c03 	subs.w	ip, r5, r3
   d6eac:	bf04      	itt	eq
   d6eae:	ebb6 0c02 	subseq.w	ip, r6, r2
   d6eb2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6eb6:	f150 0000 	adcs.w	r0, r0, #0
   d6eba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6ebe:	bd70      	pop	{r4, r5, r6, pc}
   d6ec0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d6ec4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d6ec8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d6ecc:	bfc2      	ittt	gt
   d6ece:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6ed2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6ed6:	bd70      	popgt	{r4, r5, r6, pc}
   d6ed8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6edc:	f04f 0e00 	mov.w	lr, #0
   d6ee0:	3c01      	subs	r4, #1
   d6ee2:	e690      	b.n	d6c06 <__aeabi_dmul+0xde>
   d6ee4:	ea45 0e06 	orr.w	lr, r5, r6
   d6ee8:	e68d      	b.n	d6c06 <__aeabi_dmul+0xde>
   d6eea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6eee:	ea94 0f0c 	teq	r4, ip
   d6ef2:	bf08      	it	eq
   d6ef4:	ea95 0f0c 	teqeq	r5, ip
   d6ef8:	f43f af3b 	beq.w	d6d72 <__aeabi_dmul+0x24a>
   d6efc:	ea94 0f0c 	teq	r4, ip
   d6f00:	d10a      	bne.n	d6f18 <__aeabi_ddiv+0x19c>
   d6f02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6f06:	f47f af34 	bne.w	d6d72 <__aeabi_dmul+0x24a>
   d6f0a:	ea95 0f0c 	teq	r5, ip
   d6f0e:	f47f af25 	bne.w	d6d5c <__aeabi_dmul+0x234>
   d6f12:	4610      	mov	r0, r2
   d6f14:	4619      	mov	r1, r3
   d6f16:	e72c      	b.n	d6d72 <__aeabi_dmul+0x24a>
   d6f18:	ea95 0f0c 	teq	r5, ip
   d6f1c:	d106      	bne.n	d6f2c <__aeabi_ddiv+0x1b0>
   d6f1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6f22:	f43f aefd 	beq.w	d6d20 <__aeabi_dmul+0x1f8>
   d6f26:	4610      	mov	r0, r2
   d6f28:	4619      	mov	r1, r3
   d6f2a:	e722      	b.n	d6d72 <__aeabi_dmul+0x24a>
   d6f2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6f30:	bf18      	it	ne
   d6f32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6f36:	f47f aec5 	bne.w	d6cc4 <__aeabi_dmul+0x19c>
   d6f3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d6f3e:	f47f af0d 	bne.w	d6d5c <__aeabi_dmul+0x234>
   d6f42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d6f46:	f47f aeeb 	bne.w	d6d20 <__aeabi_dmul+0x1f8>
   d6f4a:	e712      	b.n	d6d72 <__aeabi_dmul+0x24a>

000d6f4c <__gedf2>:
   d6f4c:	f04f 3cff 	mov.w	ip, #4294967295
   d6f50:	e006      	b.n	d6f60 <__cmpdf2+0x4>
   d6f52:	bf00      	nop

000d6f54 <__ledf2>:
   d6f54:	f04f 0c01 	mov.w	ip, #1
   d6f58:	e002      	b.n	d6f60 <__cmpdf2+0x4>
   d6f5a:	bf00      	nop

000d6f5c <__cmpdf2>:
   d6f5c:	f04f 0c01 	mov.w	ip, #1
   d6f60:	f84d cd04 	str.w	ip, [sp, #-4]!
   d6f64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6f68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6f6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6f70:	bf18      	it	ne
   d6f72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d6f76:	d01b      	beq.n	d6fb0 <__cmpdf2+0x54>
   d6f78:	b001      	add	sp, #4
   d6f7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d6f7e:	bf0c      	ite	eq
   d6f80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d6f84:	ea91 0f03 	teqne	r1, r3
   d6f88:	bf02      	ittt	eq
   d6f8a:	ea90 0f02 	teqeq	r0, r2
   d6f8e:	2000      	moveq	r0, #0
   d6f90:	4770      	bxeq	lr
   d6f92:	f110 0f00 	cmn.w	r0, #0
   d6f96:	ea91 0f03 	teq	r1, r3
   d6f9a:	bf58      	it	pl
   d6f9c:	4299      	cmppl	r1, r3
   d6f9e:	bf08      	it	eq
   d6fa0:	4290      	cmpeq	r0, r2
   d6fa2:	bf2c      	ite	cs
   d6fa4:	17d8      	asrcs	r0, r3, #31
   d6fa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d6faa:	f040 0001 	orr.w	r0, r0, #1
   d6fae:	4770      	bx	lr
   d6fb0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6fb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6fb8:	d102      	bne.n	d6fc0 <__cmpdf2+0x64>
   d6fba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d6fbe:	d107      	bne.n	d6fd0 <__cmpdf2+0x74>
   d6fc0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6fc4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6fc8:	d1d6      	bne.n	d6f78 <__cmpdf2+0x1c>
   d6fca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d6fce:	d0d3      	beq.n	d6f78 <__cmpdf2+0x1c>
   d6fd0:	f85d 0b04 	ldr.w	r0, [sp], #4
   d6fd4:	4770      	bx	lr
   d6fd6:	bf00      	nop

000d6fd8 <__aeabi_cdrcmple>:
   d6fd8:	4684      	mov	ip, r0
   d6fda:	4610      	mov	r0, r2
   d6fdc:	4662      	mov	r2, ip
   d6fde:	468c      	mov	ip, r1
   d6fe0:	4619      	mov	r1, r3
   d6fe2:	4663      	mov	r3, ip
   d6fe4:	e000      	b.n	d6fe8 <__aeabi_cdcmpeq>
   d6fe6:	bf00      	nop

000d6fe8 <__aeabi_cdcmpeq>:
   d6fe8:	b501      	push	{r0, lr}
   d6fea:	f7ff ffb7 	bl	d6f5c <__cmpdf2>
   d6fee:	2800      	cmp	r0, #0
   d6ff0:	bf48      	it	mi
   d6ff2:	f110 0f00 	cmnmi.w	r0, #0
   d6ff6:	bd01      	pop	{r0, pc}

000d6ff8 <__aeabi_dcmpeq>:
   d6ff8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6ffc:	f7ff fff4 	bl	d6fe8 <__aeabi_cdcmpeq>
   d7000:	bf0c      	ite	eq
   d7002:	2001      	moveq	r0, #1
   d7004:	2000      	movne	r0, #0
   d7006:	f85d fb08 	ldr.w	pc, [sp], #8
   d700a:	bf00      	nop

000d700c <__aeabi_dcmplt>:
   d700c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7010:	f7ff ffea 	bl	d6fe8 <__aeabi_cdcmpeq>
   d7014:	bf34      	ite	cc
   d7016:	2001      	movcc	r0, #1
   d7018:	2000      	movcs	r0, #0
   d701a:	f85d fb08 	ldr.w	pc, [sp], #8
   d701e:	bf00      	nop

000d7020 <__aeabi_dcmple>:
   d7020:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7024:	f7ff ffe0 	bl	d6fe8 <__aeabi_cdcmpeq>
   d7028:	bf94      	ite	ls
   d702a:	2001      	movls	r0, #1
   d702c:	2000      	movhi	r0, #0
   d702e:	f85d fb08 	ldr.w	pc, [sp], #8
   d7032:	bf00      	nop

000d7034 <__aeabi_dcmpge>:
   d7034:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7038:	f7ff ffce 	bl	d6fd8 <__aeabi_cdrcmple>
   d703c:	bf94      	ite	ls
   d703e:	2001      	movls	r0, #1
   d7040:	2000      	movhi	r0, #0
   d7042:	f85d fb08 	ldr.w	pc, [sp], #8
   d7046:	bf00      	nop

000d7048 <__aeabi_dcmpgt>:
   d7048:	f84d ed08 	str.w	lr, [sp, #-8]!
   d704c:	f7ff ffc4 	bl	d6fd8 <__aeabi_cdrcmple>
   d7050:	bf34      	ite	cc
   d7052:	2001      	movcc	r0, #1
   d7054:	2000      	movcs	r0, #0
   d7056:	f85d fb08 	ldr.w	pc, [sp], #8
   d705a:	bf00      	nop

000d705c <__aeabi_dcmpun>:
   d705c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7060:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7064:	d102      	bne.n	d706c <__aeabi_dcmpun+0x10>
   d7066:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d706a:	d10a      	bne.n	d7082 <__aeabi_dcmpun+0x26>
   d706c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7070:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7074:	d102      	bne.n	d707c <__aeabi_dcmpun+0x20>
   d7076:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d707a:	d102      	bne.n	d7082 <__aeabi_dcmpun+0x26>
   d707c:	f04f 0000 	mov.w	r0, #0
   d7080:	4770      	bx	lr
   d7082:	f04f 0001 	mov.w	r0, #1
   d7086:	4770      	bx	lr

000d7088 <__aeabi_d2iz>:
   d7088:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d708c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d7090:	d215      	bcs.n	d70be <__aeabi_d2iz+0x36>
   d7092:	d511      	bpl.n	d70b8 <__aeabi_d2iz+0x30>
   d7094:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d7098:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d709c:	d912      	bls.n	d70c4 <__aeabi_d2iz+0x3c>
   d709e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d70a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d70a6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d70aa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d70ae:	fa23 f002 	lsr.w	r0, r3, r2
   d70b2:	bf18      	it	ne
   d70b4:	4240      	negne	r0, r0
   d70b6:	4770      	bx	lr
   d70b8:	f04f 0000 	mov.w	r0, #0
   d70bc:	4770      	bx	lr
   d70be:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d70c2:	d105      	bne.n	d70d0 <__aeabi_d2iz+0x48>
   d70c4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d70c8:	bf08      	it	eq
   d70ca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d70ce:	4770      	bx	lr
   d70d0:	f04f 0000 	mov.w	r0, #0
   d70d4:	4770      	bx	lr
   d70d6:	bf00      	nop

000d70d8 <__aeabi_d2uiz>:
   d70d8:	004a      	lsls	r2, r1, #1
   d70da:	d211      	bcs.n	d7100 <__aeabi_d2uiz+0x28>
   d70dc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d70e0:	d211      	bcs.n	d7106 <__aeabi_d2uiz+0x2e>
   d70e2:	d50d      	bpl.n	d7100 <__aeabi_d2uiz+0x28>
   d70e4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d70e8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d70ec:	d40e      	bmi.n	d710c <__aeabi_d2uiz+0x34>
   d70ee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d70f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d70f6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d70fa:	fa23 f002 	lsr.w	r0, r3, r2
   d70fe:	4770      	bx	lr
   d7100:	f04f 0000 	mov.w	r0, #0
   d7104:	4770      	bx	lr
   d7106:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d710a:	d102      	bne.n	d7112 <__aeabi_d2uiz+0x3a>
   d710c:	f04f 30ff 	mov.w	r0, #4294967295
   d7110:	4770      	bx	lr
   d7112:	f04f 0000 	mov.w	r0, #0
   d7116:	4770      	bx	lr

000d7118 <__cxa_atexit>:
   d7118:	b510      	push	{r4, lr}
   d711a:	4c05      	ldr	r4, [pc, #20]	; (d7130 <__cxa_atexit+0x18>)
   d711c:	4613      	mov	r3, r2
   d711e:	b12c      	cbz	r4, d712c <__cxa_atexit+0x14>
   d7120:	460a      	mov	r2, r1
   d7122:	4601      	mov	r1, r0
   d7124:	2002      	movs	r0, #2
   d7126:	f3af 8000 	nop.w
   d712a:	bd10      	pop	{r4, pc}
   d712c:	4620      	mov	r0, r4
   d712e:	e7fc      	b.n	d712a <__cxa_atexit+0x12>
   d7130:	00000000 	.word	0x00000000

000d7134 <memcpy>:
   d7134:	440a      	add	r2, r1
   d7136:	4291      	cmp	r1, r2
   d7138:	f100 33ff 	add.w	r3, r0, #4294967295
   d713c:	d100      	bne.n	d7140 <memcpy+0xc>
   d713e:	4770      	bx	lr
   d7140:	b510      	push	{r4, lr}
   d7142:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7146:	f803 4f01 	strb.w	r4, [r3, #1]!
   d714a:	4291      	cmp	r1, r2
   d714c:	d1f9      	bne.n	d7142 <memcpy+0xe>
   d714e:	bd10      	pop	{r4, pc}

000d7150 <memset>:
   d7150:	4402      	add	r2, r0
   d7152:	4603      	mov	r3, r0
   d7154:	4293      	cmp	r3, r2
   d7156:	d100      	bne.n	d715a <memset+0xa>
   d7158:	4770      	bx	lr
   d715a:	f803 1b01 	strb.w	r1, [r3], #1
   d715e:	e7f9      	b.n	d7154 <memset+0x4>

000d7160 <srand>:
   d7160:	b538      	push	{r3, r4, r5, lr}
   d7162:	4b0d      	ldr	r3, [pc, #52]	; (d7198 <srand+0x38>)
   d7164:	681d      	ldr	r5, [r3, #0]
   d7166:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d7168:	4604      	mov	r4, r0
   d716a:	b97b      	cbnz	r3, d718c <srand+0x2c>
   d716c:	2018      	movs	r0, #24
   d716e:	f7fe fc0d 	bl	d598c <malloc>
   d7172:	4a0a      	ldr	r2, [pc, #40]	; (d719c <srand+0x3c>)
   d7174:	4b0a      	ldr	r3, [pc, #40]	; (d71a0 <srand+0x40>)
   d7176:	63a8      	str	r0, [r5, #56]	; 0x38
   d7178:	e9c0 2300 	strd	r2, r3, [r0]
   d717c:	4b09      	ldr	r3, [pc, #36]	; (d71a4 <srand+0x44>)
   d717e:	6083      	str	r3, [r0, #8]
   d7180:	230b      	movs	r3, #11
   d7182:	8183      	strh	r3, [r0, #12]
   d7184:	2201      	movs	r2, #1
   d7186:	2300      	movs	r3, #0
   d7188:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d718c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d718e:	2200      	movs	r2, #0
   d7190:	611c      	str	r4, [r3, #16]
   d7192:	615a      	str	r2, [r3, #20]
   d7194:	bd38      	pop	{r3, r4, r5, pc}
   d7196:	bf00      	nop
   d7198:	2003e560 	.word	0x2003e560
   d719c:	abcd330e 	.word	0xabcd330e
   d71a0:	e66d1234 	.word	0xe66d1234
   d71a4:	0005deec 	.word	0x0005deec

000d71a8 <strlen>:
   d71a8:	4603      	mov	r3, r0
   d71aa:	f813 2b01 	ldrb.w	r2, [r3], #1
   d71ae:	2a00      	cmp	r2, #0
   d71b0:	d1fb      	bne.n	d71aa <strlen+0x2>
   d71b2:	1a18      	subs	r0, r3, r0
   d71b4:	3801      	subs	r0, #1
   d71b6:	4770      	bx	lr

000d71b8 <dynalib_user>:
   d71b8:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   d71c8:	0000 0000 6563 736c 7569 3a73 6600 6861     ....celsius:.fah
   d71d8:	6572 686e 6965 3a74 6400 6665 7561 746c     renheit:.default
   d71e8:	0020 534d 0042 534c 0042 533c 4950 6553      .MSB.LSB.<SPISe
   d71f8:	7474 6e69 7367 6420 6665 7561 746c 003e     ttings default>.
   d7208:	533c 4950 6553 7474 6e69 7367 2520 2573     <SPISettings %s%
   d7218:	2075 7325 4d20 444f 2545 3e75                u %s MODE%u>.

000d7225 <_ZL4font>:
   d7225:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   d7235:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   d7245:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   d7255:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   d7265:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   d7275:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   d7285:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   d7295:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   d72a5:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   d72b5:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   d72c5:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   d72d5:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   d72e5:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   d72f5:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   d7305:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   d7315:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   d7325:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   d7335:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   d7345:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   d7355:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   d7365:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   d7375:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   d7385:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   d7395:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   d73a5:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   d73b5:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   d73c5:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   d73d5:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   d73e5:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   d73f5:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   d7405:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   d7415:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   d7425:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   d7435:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   d7445:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   d7455:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   d7465:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   d7475:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   d7485:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   d7495:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   d74a5:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   d74b5:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   d74c5:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   d74d5:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   d74e5:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   d74f5:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   d7505:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   d7515:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   d7525:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   d7535:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   d7545:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   d7555:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   d7565:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   d7575:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   d7585:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   d7595:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   d75a5:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   d75b5:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   d75c5:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   d75d5:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   d75e5:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   d75f5:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   d7605:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   d7615:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   d7625:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   d7635:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   d7645:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   d7655:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   d7665:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   d7675:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   d7685:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   d7695:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   d76a5:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   d76b5:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   d76c5:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   d76d5:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   d76e5:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   d76f5:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   d7705:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   d7715:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....
   d7725:	0000                                         ...

000d7728 <_ZTV12Adafruit_GFX>:
	...
   d7738:	495d 000d 5c2d 000d 40a1 000d 4365 000d     ]I..-\...@..eC..
   d7748:	4367 000d 4399 000d 4375 000d 4387 000d     gC...C..uC...C..
   d7758:	42a9 000d 4365 000d 4591 000d 450b 000d     .B..eC...E...E..
   d7768:	43b1 000d 43ef 000d 4429 000d 446f 000d     .C...C..)D..oD..
   d7778:	450d 000d 448b 000d                         .E...D..

000d7780 <_ZTV16OledWingAdafruit>:
	...
   d7788:	4a6d 000d 4a8d 000d 495d 000d 5c2d 000d     mJ...J..]I..-\..
   d7798:	4c75 000d 4365 000d 4367 000d 4399 000d     uL..eC..gC...C..
   d77a8:	4375 000d 4387 000d 42a9 000d 4365 000d     uC...C...B..eC..
   d77b8:	4591 000d 4e2f 000d 53c3 000d 5375 000d     .E../N...S..uS..
   d77c8:	4429 000d 446f 000d 450d 000d 448b 000d     )D..oD...E...D..

000d77d8 <_ZTVN8particle11SPISettingsE>:
	...
   d77e0:	4255 000d 4229 000d 422b 000d               UB..)B..+B..

000d77ec <_ZL12splash1_data>:
   d77ec:	0000 0000 0100 0080 0000 0000 0000 0000     ................
   d77fc:	8003 0000 0000 0000 0000 0700 00c0 0000     ................
   d780c:	0000 0000 0000 c007 0000 0000 0000 0000     ................
   d781c:	0f00 00c0 0000 0000 0000 0000 e01f 0000     ................
   d782c:	0000 0000 0000 1f00 00e0 0000 0000 0000     ................
   d783c:	0000 e03f 0000 0000 0000 0000 3f00 00f0     ..?..........?..
	...
   d7854:	f07f 0000 0000 0000 1f00 7ff8 00f0 0000     ................
   d7864:	0000 0000 fe3f f07f 0000 0000 0000 3f00     ....?..........?
   d7874:	7fff 00f0 0000 0000 0000 ff1f e0fb 0000     ................
   d7884:	0000 0000 0f00 f9ff c0ff 0000 0000 0000     ................
   d7894:	ff0f fff9 00f8 0000 0000 0700 f1ff ffff     ................
   d78a4:	0000 0000 0000 fc03 ff73 80ff 0000 0000     ........s.......
   d78b4:	0100 3ffe ffff 0080 0000 0000 ff00 0f1e     ...?............
   d78c4:	00ff 0000 0000 0000 fe7f fc1f 0000 0000     ................
   d78d4:	0000 3f00 ffff 00f8 0000 0000 0000 df0f     ...?............
   d78e4:	e0ff 0000 0000 0000 1f00 ff19 00c0 0000     ................
   d78f4:	0000 0000 3c3f 00ff 0000 0000 0000 7e00     ....?<.........~
   d7904:	f87c 0000 0000 0000 0000 fe7f 007c 0000     |...........|...
   d7914:	0000 0000 ff00 fcff 0000 0000 0000 0000     ................
   d7924:	ffff 00fe 0000 0000 0000 ff00 feff 0000     ................
   d7934:	0000 0000 0100 efff 00fe 0000 0000 0000     ................
   d7944:	ff01 fecf 0000 0000 0000 0300 07ff 00fe     ................
   d7954:	0000 0000 0000 fc03 fe07 0000 0000 0000     ................
   d7964:	0300 03f0 00fe 0000 0000 0000 8001 fe00     ................
	...
   d797c:	0000 007e 0000 0000 0000 0000 3e00 0000     ..~..........>..
	...
   d7994:	000c 0000 0000 0700 0080 00fc 0300 00c0     ................
   d79a4:	0000 8007 fc01 0000 c003 0000 0700 0180     ................
   d79b4:	00fc 0300 00c0 0000 8007 e001 0000 1e00     ................
   d79c4:	0000 0700 0180 00e0 0000 001e e37f 9ff7     ................
   d79d4:	fdf9 78e7 df7b ffc0 fff7 fdbf fffd 7b78     ...x{.........x{
   d79e4:	c0df f7ff bfff fdfd 78ff df7b f0c0 87f7     .........x{.....
   d79f4:	3dbc ffe1 7b78 00de f7f0 bc87 e13d 78f0     .=..x{......=..x
   d7a04:	de7b 0000 87f7 3d80 e0e1 7b78 00de f77f     {......=..x{....
   d7a14:	9f87 e1fd 78e0 de7b ff00 87f7 fdbf e0e1     .....x{.........
   d7a24:	7b78 00de f7f0 bc87 e13d 78e0 de7b f000     x{......=..x{...
   d7a34:	87f7 3dbc e0e1 7b78 00de f7f0 bc87 e13d     ...=..x{......=.
   d7a44:	78e0 de7b ff00 fff7 fdbf e0e1 fb7f c0df     .x{.............
   d7a54:	f7ff bfff e1fd 7fe0 dffb 7cc0 f3f3 3d9f     ...........|...=
   d7a64:	e0e1 7b3e c0cf 0000 0000 0000 0000 0000     ..>{............
   d7a74:	ff00 ffff ffff ffff ffff c0ff ffff ffff     ................
   d7a84:	68fd 11db 311a ffc0 ffff fdff 5a2b 6afb     .h...1......+Z.j
   d7a94:	c0ef ffff ffff 4bfd 3b5b 331a ffc0 ffff     .......K[;.3....
   d7aa4:	fdff 5b6b 6adb c0fd                         ..k[.j..

000d7aac <_ZL12splash2_data>:
   d7aac:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   d7abc:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   d7acc:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   d7ae8:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   d7af8:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   d7b08:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   d7b18:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   d7b28:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   d7b38:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   d7b48:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   d7b58:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   d7b68:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   d7b78:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   d7b88:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   d7b98:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   d7ba8:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   d7bb8:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   d7bc8:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   d7bd8:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   d7be8:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   d7bf8:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   d7c08:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   d7c18:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   d7c28:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   d7c40:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   d7c50:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   d7c60:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   d7c70:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   d7c80:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000d7c8c <_ZTV16Adafruit_SSD1306>:
	...
   d7c94:	4c49 000d 4c61 000d 495d 000d 5c2d 000d     IL..aL..]I..-\..
   d7ca4:	4c75 000d 4365 000d 4367 000d 4399 000d     uL..eC..gC...C..
   d7cb4:	4375 000d 4387 000d 42a9 000d 4365 000d     uC...C...B..eC..
   d7cc4:	4591 000d 4e2f 000d 53c3 000d 5375 000d     .E../N...S..uS..
   d7cd4:	4429 000d 446f 000d 450d 000d 448b 000d     )D..oD...E...D..

000d7ce4 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   d7ce4:	8000 e0c0 f8f0 fefc                         ........

000d7cec <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   d7cec:	0100 0703 1f0f 7f3f                         ......?.

000d7cf4 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   d7cf4:	d5ae a880                                   ....

000d7cf8 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   d7cf8:	00d3 8d40                                   ..@.

000d7cfc <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   d7cfc:	0020 c8a1                                    ...

000d7d00 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   d7d00:	40db a6a4 af2e                              .@....

000d7d06 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   d7d06:	02da 8f81                                   ....

000d7d0a <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   d7d0a:	12da                                         ...

000d7d0d <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   d7d0d:	02da                                         ...

000d7d10 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   d7d10:	0022 21ff 0000 0000                         "..!....

000d7d18 <_ZTVN5spark13EthernetClassE>:
	...
   d7d20:	5a2b 000d 5a21 000d 5a17 000d 5a0d 000d     +Z..!Z...Z...Z..
   d7d30:	5a01 000d 59f5 000d 64cd 000d 64d5 000d     .Z...Y...d...d..
   d7d40:	59e9 000d 59e1 000d 59d7 000d 59cd 000d     .Y...Y...Y...Y..
   d7d50:	6505 000d                                   .e..

000d7d54 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d7d54:	0800 1810 2820 3830 616e 006e 6e69 0066     .... (08nan.inf.
   d7d64:	766f 0066 002e 7061 0070 5925 252d 2d6d     ovf...app.%Y-%m-
   d7d74:	6425 2554 3a48 4d25 253a 2553 007a 7361     %dT%H:%M:%S%z.as
   d7d84:	7463 6d69 0065 0000                         ctime...

000d7d8c <_ZTV9IPAddress>:
	...
   d7d94:	6091 000d 6081 000d 6083 000d               .`...`...`..

000d7da0 <_ZTV9USBSerial>:
	...
   d7da8:	6171 000d 61d9 000d 61af 000d 5c2d 000d     qa...a...a..-\..
   d7db8:	61a1 000d 6173 000d 6183 000d 61d3 000d     .a..sa...a...a..
   d7dc8:	6193 000d 616d 000d                         .a..ma..

000d7dd0 <_ZTV11USARTSerial>:
	...
   d7dd8:	6275 000d 62e1 000d 62b9 000d 5c2d 000d     ub...b...b..-\..
   d7de8:	6289 000d 62a5 000d 6297 000d 62b3 000d     .b...b...b...b..
   d7df8:	6277 000d 627b 000d                         wb..{b..

000d7e00 <_ZTV7TwoWire>:
	...
   d7e08:	6371 000d 63bb 000d 6393 000d 6373 000d     qc...c...c..sc..
   d7e18:	639b 000d 63a3 000d 63ab 000d 63b3 000d     .c...c...c...c..

000d7e28 <_ZTVN5spark9WiFiClassE>:
	...
   d7e30:	646f 000d 6465 000d 645b 000d 641d 000d     od..ed..[d...d..
   d7e40:	5efd 000d 644f 000d 64cd 000d 64d5 000d     .^..Od...d...d..
   d7e50:	6443 000d 643b 000d 6431 000d 6427 000d     Cd..;d..1d..'d..
   d7e60:	6505 000d                                   .e..

000d7e64 <_ZTVN5spark12NetworkClassE>:
	...
   d7e6c:	648d 000d 6497 000d 64a1 000d 64ab 000d     .d...d...d...d..
   d7e7c:	64b5 000d 64c1 000d 64cd 000d 64d5 000d     .d...d...d...d..
   d7e8c:	64dd 000d 64e9 000d 64f1 000d 64fb 000d     .d...d...d...d..
   d7e9c:	6505 000d                                   .e..

000d7ea0 <_ZSt7nothrow>:
	...

000d7ea1 <link_const_variable_data_end>:
   d7ea1:	00          	.byte	0x00
	...

000d7ea4 <link_constructors_location>:
   d7ea4:	000d41d1 	.word	0x000d41d1
   d7ea8:	000d5a35 	.word	0x000d5a35
   d7eac:	000d5ba5 	.word	0x000d5ba5
   d7eb0:	000d5c05 	.word	0x000d5c05
   d7eb4:	000d5f09 	.word	0x000d5f09
   d7eb8:	000d5f19 	.word	0x000d5f19
   d7ebc:	000d5f41 	.word	0x000d5f41
   d7ec0:	000d6479 	.word	0x000d6479
   d7ec4:	000d65e5 	.word	0x000d65e5

000d7ec8 <link_constructors_end>:
	...
